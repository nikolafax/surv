_draw_frame:
  begin   (midx: 0)
//Transmitter.c,33 :: 		void draw_frame() {
_draw_frame:
  begin   (midx: 0)
//Transmitter.c,34 :: 		TFT_Init_ILI9341_8bit(320, 240);
	R1 <2> <- 240   (midx: 0)
	R0 <2> <- 320   (midx: 0)
	CALL _TFT_Init_ILI9341_8bit   (midx: 0)
//Transmitter.c,35 :: 		TFT_Fill_Screen(CL_WHITE);
	R0 <2> <- 65535   (midx: 0)
	CALL _TFT_Fill_Screen   (midx: 0)
//Transmitter.c,36 :: 		TFT_Write_Text("BOARD ID :", 140, 40);    // Display string on TFT
	R0 <4> <- #?lstr1_Transmitter   (midx: 0)
	R2 <2> <- 40   (midx: 0)
	R1 <2> <- 140   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	CALL _TFT_Write_Text   (midx: 0)
//Transmitter.c,37 :: 		TFT_Write_Text("Button 1 :", 140, 80);
	R0 <4> <- #?lstr2_Transmitter   (midx: 0)
	R2 <2> <- 80   (midx: 0)
	R1 <2> <- 140   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	CALL _TFT_Write_Text   (midx: 0)
//Transmitter.c,38 :: 		TFT_Write_Text("Button 2 :", 140, 120);
	R0 <4> <- #?lstr3_Transmitter   (midx: 0)
	R2 <2> <- 120   (midx: 0)
	R1 <2> <- 140   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	CALL _TFT_Write_Text   (midx: 0)
//Transmitter.c,39 :: 		TFT_Write_Text("ANALOG 1 :", 140, 160);
	R0 <4> <- #?lstr4_Transmitter   (midx: 0)
	R2 <2> <- 160   (midx: 0)
	R1 <2> <- 140   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	CALL _TFT_Write_Text   (midx: 0)
  end
   (midx: 0)
_parse_analog:
  begin   (midx: 0)
//Transmitter.c,42 :: 		void parse_analog() {
_parse_analog:
  begin   (midx: 0)
//Transmitter.c,43 :: 		adc_l = adc_result % 256;
	R2 <4> <- addr(_adc_result)   (midx: 0)
	R1 <2> <- [R2]   (midx: 0)
	R0 <2> <- 256   (midx: 0)
	R3 <2> <-  R1 mod R0   (midx: 5)
	R0 <4> <- addr(_adc_l)   (midx: 0)
	[R0] <1> <- R3   (midx: 0)
//Transmitter.c,44 :: 		adc_h = (adc_result - adc_l) / 265;
	R1 <2> <- R3   (midx: 0)
	R0 <4> <- R2   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R1 <2> <-  R0 - R1   (midx: 5)
	R0 <2> <- 265   (midx: 0)
	R2 <2> <-  R1 / R0   (midx: 5)
	R0 <4> <- addr(_adc_h)   (midx: 0)
	[R0] <1> <- R2   (midx: 0)
//Transmitter.c,45 :: 		sendByteTwo = adc_l;
	R1 <1> <- R3   (midx: 0)
	R0 <4> <- addr(_sendByteTwo)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//Transmitter.c,46 :: 		sendByteOne |= adc_h;
	R2 <1> <- R2   (midx: 0)
	R1 <4> <- addr(_sendByteOne)   (midx: 0)
	R0 <1> <- [R1]   (midx: 0)
	R0 <1> <-  R0 | R2   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
  end
   (midx: 0)
_display_on_screen:
  begin   (midx: 0)
//Transmitter.c,50 :: 		void display_on_screen() {
_display_on_screen:
  begin   (midx: 0)
//Transmitter.c,52 :: 		TFT_Set_Font(&TFT_defaultFont, CL_BLACK, FO_HORIZONTAL);
	R2 <1> <- 0   (midx: 0)
	R1 <2> <- 0   (midx: 0)
	R0 <4> <- #_TFT_defaultFont   (midx: 0)
	CALL _TFT_Set_Font   (midx: 0)
//Transmitter.c,54 :: 		ByteToStr(sendByteThree, &txt);  //dev ID
	R0 <4> <- addr(_sendByteThree)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	R1 <4> <- #_txt   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	CALL _ByteToStr   (midx: 0)
//Transmitter.c,55 :: 		TFT_Write_Text(txt, 215, 40);
	R2 <2> <- 40   (midx: 0)
	R1 <2> <- 215   (midx: 0)
	R0 <4> <- #_txt   (midx: 0)
	CALL _TFT_Write_Text   (midx: 0)
//Transmitter.c,57 :: 		ByteToStr(button1, &txt);      // Convert byte to string
	R0 <4> <- addr(_button1)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	R1 <4> <- #_txt   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	CALL _ByteToStr   (midx: 0)
//Transmitter.c,58 :: 		TFT_Write_Text(txt, 215, 80);    // Display string on TFT
	R2 <2> <- 80   (midx: 0)
	R1 <2> <- 215   (midx: 0)
	R0 <4> <- #_txt   (midx: 0)
	CALL _TFT_Write_Text   (midx: 0)
//Transmitter.c,60 :: 		ByteToStr(button2, &txt);
	R0 <4> <- addr(_button2)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	R1 <4> <- #_txt   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	CALL _ByteToStr   (midx: 0)
//Transmitter.c,61 :: 		TFT_Write_Text(txt, 215, 120);
	R2 <2> <- 120   (midx: 0)
	R1 <2> <- 215   (midx: 0)
	R0 <4> <- #_txt   (midx: 0)
	CALL _TFT_Write_Text   (midx: 0)
//Transmitter.c,63 :: 		IntToStr(adc_result, &txt);
	R0 <4> <- addr(_adc_result)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R1 <4> <- #_txt   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	CALL _IntToStr   (midx: 0)
//Transmitter.c,64 :: 		TFT_Write_Text(txt, 215, 160);
	R2 <2> <- 160   (midx: 0)
	R1 <2> <- 215   (midx: 0)
	R0 <4> <- #_txt   (midx: 0)
	CALL _TFT_Write_Text   (midx: 0)
//Transmitter.c,66 :: 		delay_ms(1000);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//Transmitter.c,69 :: 		TFT_Set_Font(&TFT_defaultFont, CL_WHITE, FO_HORIZONTAL);
	R2 <1> <- 0   (midx: 0)
	R1 <2> <- 65535   (midx: 0)
	R0 <4> <- #_TFT_defaultFont   (midx: 0)
	CALL _TFT_Set_Font   (midx: 0)
//Transmitter.c,71 :: 		ByteToStr(sendByteThree, &txt);
	R0 <4> <- addr(_sendByteThree)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	R1 <4> <- #_txt   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	CALL _ByteToStr   (midx: 0)
//Transmitter.c,72 :: 		TFT_Write_Text(txt, 215, 40);
	R2 <2> <- 40   (midx: 0)
	R1 <2> <- 215   (midx: 0)
	R0 <4> <- #_txt   (midx: 0)
	CALL _TFT_Write_Text   (midx: 0)
//Transmitter.c,74 :: 		ByteToStr(button1, &txt);
	R0 <4> <- addr(_button1)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	R1 <4> <- #_txt   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	CALL _ByteToStr   (midx: 0)
//Transmitter.c,75 :: 		TFT_Write_Text(txt, 215, 80);
	R2 <2> <- 80   (midx: 0)
	R1 <2> <- 215   (midx: 0)
	R0 <4> <- #_txt   (midx: 0)
	CALL _TFT_Write_Text   (midx: 0)
//Transmitter.c,77 :: 		ByteToStr(button2, &txt);
	R0 <4> <- addr(_button2)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	R1 <4> <- #_txt   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	CALL _ByteToStr   (midx: 0)
//Transmitter.c,78 :: 		TFT_Write_Text(txt, 215, 120);
	R2 <2> <- 120   (midx: 0)
	R1 <2> <- 215   (midx: 0)
	R0 <4> <- #_txt   (midx: 0)
	CALL _TFT_Write_Text   (midx: 0)
//Transmitter.c,80 :: 		ByteToStr(adc_result, &txt);
	R0 <4> <- addr(_adc_result)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	R1 <4> <- #_txt   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	CALL _ByteToStr   (midx: 0)
//Transmitter.c,81 :: 		TFT_Write_Text(txt, 215, 160);
	R2 <2> <- 160   (midx: 0)
	R1 <2> <- 215   (midx: 0)
	R0 <4> <- #_txt   (midx: 0)
	CALL _TFT_Write_Text   (midx: 0)
  end
   (midx: 0)
_read_sensors:
  begin   (midx: 0)
//Transmitter.c,84 :: 		void read_sensors() {
_read_sensors:
  begin   (midx: 0)
//Transmitter.c,85 :: 		if (Button(&GPIOD_IDR, 0, 1, 1)) {          // detect logical one on PA0 pin
	R3 <4> <- 1   (midx: 0)
	R2 <4> <- 1   (midx: 0)
	R1 <4> <- 0   (midx: 0)
	R0 <4> <- #GPIOD_IDR   (midx: 0)
	CALL _Button   (midx: 0)
	if (!R0) then goto 1   (midx: 0)
//Transmitter.c,86 :: 		button1 = 1;
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(_button1)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//Transmitter.c,87 :: 		sendByteOne &= 0b00100000;
	R1 <4> <- addr(_sendByteOne)   (midx: 0)
	R0 <1> <- [R1]   (midx: 0)
	R0 <1> <-  R0 & 32   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//Transmitter.c,88 :: 		}
1:   (midx: 0)
//Transmitter.c,89 :: 		if (Button(&GPIOD_IDR, 1, 1, 1)) {          // detect logical one on PA0 pin
	R3 <4> <- 1   (midx: 0)
	R2 <4> <- 1   (midx: 0)
	R1 <4> <- 1   (midx: 0)
	R0 <4> <- #GPIOD_IDR   (midx: 0)
	CALL _Button   (midx: 0)
	if (!R0) then goto 2   (midx: 0)
//Transmitter.c,90 :: 		button2 = 1;
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(_button2)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//Transmitter.c,91 :: 		sendByteOne &= 0b00010000;
	R1 <4> <- addr(_sendByteOne)   (midx: 0)
	R0 <1> <- [R1]   (midx: 0)
	R0 <1> <-  R0 & 16   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//Transmitter.c,92 :: 		}
2:   (midx: 0)
//Transmitter.c,94 :: 		adc_result = ADC1_Get_Sample(3); // Get ADC value from corresponding channel
	R0 <2> <- 3   (midx: 0)
	CALL _ADC1_Get_Sample   (midx: 0)
	R1 <4> <- addr(_adc_result)   (midx: 0)
	[R1] <2> <- R0   (midx: 0)
//Transmitter.c,95 :: 		parse_analog();
	CALL _parse_analog   (midx: 0)
  end
   (midx: 0)
_reset_values:
  begin   (midx: 0)
//Transmitter.c,99 :: 		void reset_values() {
_reset_values:
  begin   (midx: 0)
//Transmitter.c,100 :: 		sendByteOne = 0;
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- addr(_sendByteOne)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//Transmitter.c,101 :: 		sendByteTwo = 0;
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- addr(_sendByteTwo)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
  end
   (midx: 0)
_run_transmitter:
  begin   (midx: 0)
//Transmitter.c,104 :: 		void run_transmitter() {
_run_transmitter:
  begin   (midx: 0)
//Transmitter.c,107 :: 		DATA_TX[0] = sendByteOne;
	R0 <4> <- addr(_sendByteOne)   (midx: 0)
	R1 <1> <- [R0]   (midx: 0)
	R0 <4> <- addr(_DATA_TX)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//Transmitter.c,108 :: 		DATA_TX[1] = sendByteTwo;
	R0 <4> <- addr(_sendByteTwo)   (midx: 0)
	R1 <1> <- [R0]   (midx: 0)
	R0 <4> <- addr(_DATA_TX+1)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//Transmitter.c,109 :: 		DATA_TX[2] = sendByteThree;
	R0 <4> <- addr(_sendByteThree)   (midx: 0)
	R1 <1> <- [R0]   (midx: 0)
	R0 <4> <- addr(_DATA_TX+2)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//Transmitter.c,112 :: 		write_TX_normal_FIFO();          // Transmiting
	CALL _write_TX_normal_FIFO   (midx: 0)
//Transmitter.c,115 :: 		display_on_screen();
	CALL _display_on_screen   (midx: 0)
//Transmitter.c,116 :: 		reset_values();
	CALL _reset_values   (midx: 0)
  end
   (midx: 0)
_listen_for_id:
  begin   (midx: 0)
//Transmitter.c,119 :: 		void listen_for_id() {
_listen_for_id:
  begin   (midx: 0)
//Transmitter.c,120 :: 		run_transmitter();
	CALL _run_transmitter   (midx: 0)
//Transmitter.c,121 :: 		delay_ms(100);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//Transmitter.c,123 :: 		if (Debounce_INT() == 0) {
	CALL _Debounce_INT   (midx: 0)
	if ( R0 != 0) then goto 4   (midx: 0)
//Transmitter.c,124 :: 		temp1 = read_ZIGBEE_short(INTSTAT); // Read and flush register INTSTAT
	R0 <1> <- 49   (midx: 0)
	CALL _read_ZIGBEE_short   (midx: 0)
	R1 <4> <- addr(_temp1)   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//Transmitter.c,125 :: 		read_RX_FIFO();                     // Read receive data
	CALL _read_RX_FIFO   (midx: 0)
//Transmitter.c,127 :: 		if (DATA_RX[0] == 64) { //64 is controler to senzor message id, which is send only for senzort to get id
	R0 <4> <- addr(_DATA_RX)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	if ( R0 != 64) then goto 5   (midx: 4)
//Transmitter.c,128 :: 		sendByteThree = DATA_RX[2];
	R0 <4> <- addr(_DATA_RX+2)   (midx: 0)
	R1 <1> <- [R0]   (midx: 0)
	R0 <4> <- addr(_sendByteThree)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//Transmitter.c,129 :: 		}
5:   (midx: 0)
//Transmitter.c,130 :: 		}
4:   (midx: 0)
  end
   (midx: 0)
_send_senzor_data:
  begin   (midx: 0)
//Transmitter.c,133 :: 		void send_senzor_data() {
_send_senzor_data:
  begin   (midx: 0)
//Transmitter.c,134 :: 		read_sensors();
	CALL _read_sensors   (midx: 0)
//Transmitter.c,135 :: 		run_transmitter();
	CALL _run_transmitter   (midx: 0)
  end
   (midx: 0)
_main:
  begin   (midx: 0)
//Transmitter.c,139 :: 		void main() {
_main:
  begin   (midx: 0)
//Transmitter.c,140 :: 		Initialize();                      // Initialize MCU and Bee click board
	CALL _Initialize   (midx: 0)
//Transmitter.c,141 :: 		draw_frame();
	CALL _draw_frame   (midx: 0)
//Transmitter.c,143 :: 		GPIO_Digital_Input(&GPIOD_IDR, _GPIO_PINMASK_0);
	R1 <4> <- 1   (midx: 0)
	R0 <4> <- #GPIOD_IDR   (midx: 0)
	CALL _GPIO_Digital_Input   (midx: 0)
//Transmitter.c,144 :: 		ADC_Set_Input_Channel(_ADC_CHANNEL_3);                 // Choose ADC channel
	R0 <2> <- 8   (midx: 0)
	CALL _ADC_Set_Input_Channel   (midx: 0)
//Transmitter.c,145 :: 		ADC1_Init();                                               // Init
	CALL _ADC1_Init   (midx: 0)
//Transmitter.c,146 :: 		DATA_RX[2] = 0;
	R1 <1> <- 0   (midx: 0)
	R0 <4> <- addr(_DATA_RX+2)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//Transmitter.c,147 :: 		Delay_ms(100);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//Transmitter.c,148 :: 		reset_values();
	CALL _reset_values   (midx: 0)
//Transmitter.c,150 :: 		while (sendByteThree == 0) {
7:   (midx: 0)
	R0 <4> <- addr(_sendByteThree)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	if ( R0 != 0) then goto 8   (midx: 0)
//Transmitter.c,151 :: 		listen_for_id();
	CALL _listen_for_id   (midx: 0)
//Transmitter.c,153 :: 		Delay_ms(50);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//Transmitter.c,154 :: 		}
	goto	7   (midx: 0)
8:   (midx: 0)
//Transmitter.c,155 :: 		while (1) {
10:   (midx: 0)
//Transmitter.c,157 :: 		send_senzor_data();
	CALL _send_senzor_data   (midx: 0)
//Transmitter.c,159 :: 		Delay_ms(100);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//Transmitter.c,160 :: 		}
	goto	10   (midx: 0)
  end
   (midx: 0)
