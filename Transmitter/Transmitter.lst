;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 07-Jun-16 14:03:55
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0xFFFC2000  	536936444
0x0004	0x39E90000  	14825
0x0008	0x39DD0000  	14813
0x000C	0x39DD0000  	14813
0x0010	0x39DD0000  	14813
0x0014	0x39DD0000  	14813
0x0018	0x39DD0000  	14813
0x001C	0x39DD0000  	14813
0x0020	0x39DD0000  	14813
0x0024	0x39DD0000  	14813
0x0028	0x39DD0000  	14813
0x002C	0x39DD0000  	14813
0x0030	0x39DD0000  	14813
0x0034	0x39DD0000  	14813
0x0038	0x39DD0000  	14813
0x003C	0x39DD0000  	14813
0x0040	0x39DD0000  	14813
0x0044	0x39DD0000  	14813
0x0048	0x39DD0000  	14813
0x004C	0x39DD0000  	14813
0x0050	0x39DD0000  	14813
0x0054	0x39DD0000  	14813
0x0058	0x39DD0000  	14813
0x005C	0x39DD0000  	14813
0x0060	0x39DD0000  	14813
0x0064	0x39DD0000  	14813
0x0068	0x39DD0000  	14813
0x006C	0x39DD0000  	14813
0x0070	0x39DD0000  	14813
0x0074	0x39DD0000  	14813
0x0078	0x39DD0000  	14813
0x007C	0x39DD0000  	14813
0x0080	0x39DD0000  	14813
0x0084	0x39DD0000  	14813
0x0088	0x39DD0000  	14813
0x008C	0x39DD0000  	14813
0x0090	0x39DD0000  	14813
0x0094	0x39DD0000  	14813
0x0098	0x39DD0000  	14813
0x009C	0x39DD0000  	14813
0x00A0	0x39DD0000  	14813
0x00A4	0x39DD0000  	14813
0x00A8	0x39DD0000  	14813
0x00AC	0x39DD0000  	14813
0x00B0	0x39DD0000  	14813
0x00B4	0x39DD0000  	14813
0x00B8	0x39DD0000  	14813
0x00BC	0x39DD0000  	14813
0x00C0	0x39DD0000  	14813
0x00C4	0x39DD0000  	14813
0x00C8	0x39DD0000  	14813
0x00CC	0x39DD0000  	14813
0x00D0	0x39DD0000  	14813
0x00D4	0x39DD0000  	14813
0x00D8	0x39DD0000  	14813
0x00DC	0x39DD0000  	14813
0x00E0	0x39DD0000  	14813
0x00E4	0x39DD0000  	14813
0x00E8	0x39DD0000  	14813
0x00EC	0x39DD0000  	14813
0x00F0	0x39DD0000  	14813
0x00F4	0x39DD0000  	14813
0x00F8	0x39DD0000  	14813
0x00FC	0x39DD0000  	14813
0x0100	0x39DD0000  	14813
0x0104	0x39DD0000  	14813
0x0108	0x39DD0000  	14813
0x010C	0x39DD0000  	14813
0x0110	0x39DD0000  	14813
0x0114	0x39DD0000  	14813
0x0118	0x39DD0000  	14813
0x011C	0x39DD0000  	14813
0x0120	0x39DD0000  	14813
0x0124	0x39DD0000  	14813
0x0128	0x39DD0000  	14813
0x012C	0x39DD0000  	14813
0x0130	0x39DD0000  	14813
0x0134	0x39DD0000  	14813
0x0138	0x39DD0000  	14813
0x013C	0x39DD0000  	14813
0x0140	0x39DD0000  	14813
0x0144	0x39DD0000  	14813
0x0148	0x39DD0000  	14813
0x014C	0x39DD0000  	14813
; end of ____SysVT
_main:
;Transmitter.c, 124 :: 		void main() {
0x39E8	0xB081    SUB	SP, SP, #4
0x39EA	0xF000F839  BL	14944
0x39EE	0xF000FDA9  BL	17732
0x39F2	0xF7FFFFE9  BL	14792
0x39F6	0xF000FD65  BL	17604
;Transmitter.c, 125 :: 		Initialize();                      // Initialize MCU and Bee click board
0x39FA	0xF7FFFD81  BL	_Initialize+0
;Transmitter.c, 126 :: 		draw_frame();
0x39FE	0xF7FFFF33  BL	_draw_frame+0
;Transmitter.c, 128 :: 		GPIO_Digital_Input(&GPIOD_IDR, _GPIO_PINMASK_0);
0x3A02	0xF2400101  MOVW	R1, #1
0x3A06	0x4814    LDR	R0, [PC, #80]
0x3A08	0xF7FFFB04  BL	_GPIO_Digital_Input+0
;Transmitter.c, 129 :: 		ADC_Set_Input_Channel(_ADC_CHANNEL_3);                 // Choose ADC channel
0x3A0C	0xF2400008  MOVW	R0, #8
0x3A10	0xF7FFFE9A  BL	_ADC_Set_Input_Channel+0
;Transmitter.c, 130 :: 		ADC1_Init();                                               // Init
0x3A14	0xF7FFFF96  BL	_ADC1_Init+0
;Transmitter.c, 131 :: 		DATA_RX[2] = 0;
0x3A18	0x2100    MOVS	R1, #0
0x3A1A	0xB249    SXTB	R1, R1
0x3A1C	0x480F    LDR	R0, [PC, #60]
0x3A1E	0x7001    STRB	R1, [R0, #0]
;Transmitter.c, 132 :: 		Delay_ms(100);
0x3A20	0xF644777F  MOVW	R7, #20351
0x3A24	0xF2C00712  MOVT	R7, #18
L_main19:
0x3A28	0x1E7F    SUBS	R7, R7, #1
0x3A2A	0xD1FD    BNE	L_main19
0x3A2C	0xBF00    NOP
0x3A2E	0xBF00    NOP
0x3A30	0xBF00    NOP
0x3A32	0xBF00    NOP
0x3A34	0xBF00    NOP
;Transmitter.c, 133 :: 		while (1) {
L_main21:
;Transmitter.c, 135 :: 		listen_for_id();
0x3A36	0xF7FFFF9F  BL	_listen_for_id+0
;Transmitter.c, 137 :: 		run_transmitter();
0x3A3A	0xF7FFFF5D  BL	_run_transmitter+0
;Transmitter.c, 139 :: 		Delay_ms(100);
0x3A3E	0xF644777F  MOVW	R7, #20351
0x3A42	0xF2C00712  MOVT	R7, #18
0x3A46	0xBF00    NOP
0x3A48	0xBF00    NOP
L_main23:
0x3A4A	0x1E7F    SUBS	R7, R7, #1
0x3A4C	0xD1FD    BNE	L_main23
0x3A4E	0xBF00    NOP
0x3A50	0xBF00    NOP
0x3A52	0xBF00    NOP
;Transmitter.c, 140 :: 		}
0x3A54	0xE7EF    B	L_main21
;Transmitter.c, 141 :: 		}
L_end_main:
L__main_end_loop:
0x3A56	0xE7FE    B	L__main_end_loop
0x3A58	0x14084001  	GPIOD_IDR+0
0x3A5C	0x00722000  	_DATA_RX+2
; end of _main
___CC2DW:
;__Lib_System_105_107.c, 27 :: 		
0x36F8	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 29 :: 		
L_loopDW:
;__Lib_System_105_107.c, 30 :: 		
0x36FA	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_105_107.c, 31 :: 		
0x36FE	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_105_107.c, 32 :: 		
0x3702	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 33 :: 		
0x3706	0xD1F8    BNE	L_loopDW
;__Lib_System_105_107.c, 35 :: 		
L_end___CC2DW:
0x3708	0xB001    ADD	SP, SP, #4
0x370A	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_105_107.c, 69 :: 		
0x370C	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 71 :: 		
0x370E	0xF04F0900  MOV	R9, #0
;__Lib_System_105_107.c, 72 :: 		
0x3712	0xF04F0C00  MOV	R12, #0
;__Lib_System_105_107.c, 73 :: 		
0x3716	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_105_107.c, 74 :: 		
0x371A	0xDC04    BGT	L_loopFZs
;__Lib_System_105_107.c, 75 :: 		
0x371C	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_105_107.c, 76 :: 		
0x3720	0xDB01    BLT	L_loopFZs
;__Lib_System_105_107.c, 77 :: 		
0x3722	0x46D4    MOV	R12, R10
;__Lib_System_105_107.c, 78 :: 		
0x3724	0x46EA    MOV	R10, SP
;__Lib_System_105_107.c, 79 :: 		
L_loopFZs:
;__Lib_System_105_107.c, 80 :: 		
0x3726	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_105_107.c, 81 :: 		
0x372A	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 82 :: 		
0x372E	0xD1FA    BNE	L_loopFZs
;__Lib_System_105_107.c, 83 :: 		
0x3730	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_105_107.c, 84 :: 		
0x3734	0xDD05    BLE	L_norep
;__Lib_System_105_107.c, 85 :: 		
0x3736	0x46E2    MOV	R10, R12
;__Lib_System_105_107.c, 86 :: 		
0x3738	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_105_107.c, 87 :: 		
0x373C	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_105_107.c, 88 :: 		
0x3740	0xE7F1    B	L_loopFZs
;__Lib_System_105_107.c, 89 :: 		
L_norep:
;__Lib_System_105_107.c, 91 :: 		
L_end___FillZeros:
0x3742	0xB001    ADD	SP, SP, #4
0x3744	0x4770    BX	LR
; end of ___FillZeros
_Initialize:
;Init_Routines.c, 12 :: 		void Initialize() {
0x3500	0xB081    SUB	SP, SP, #4
0x3502	0xF8CDE000  STR	LR, [SP, #0]
;Init_Routines.c, 13 :: 		short int i = 0;
;Init_Routines.c, 15 :: 		LQI = 0;
0x3506	0x2100    MOVS	R1, #0
0x3508	0xB249    SXTB	R1, R1
0x350A	0x484F    LDR	R0, [PC, #316]
0x350C	0x7001    STRB	R1, [R0, #0]
;Init_Routines.c, 16 :: 		RSSI2 = 0;
0x350E	0x2100    MOVS	R1, #0
0x3510	0xB249    SXTB	R1, R1
0x3512	0x484E    LDR	R0, [PC, #312]
0x3514	0x7001    STRB	R1, [R0, #0]
;Init_Routines.c, 17 :: 		SEQ_NUMBER = 0x23;
0x3516	0x2123    MOVS	R1, #35
0x3518	0xB249    SXTB	R1, R1
0x351A	0x484D    LDR	R0, [PC, #308]
0x351C	0x7001    STRB	R1, [R0, #0]
;Init_Routines.c, 18 :: 		lost_data = 0;
0x351E	0x2100    MOVS	R1, #0
0x3520	0xB249    SXTB	R1, R1
0x3522	0x484C    LDR	R0, [PC, #304]
0x3524	0x7001    STRB	R1, [R0, #0]
;Init_Routines.c, 19 :: 		address_RX_FIFO = 0x300;
0x3526	0xF2403100  MOVW	R1, #768
0x352A	0xB209    SXTH	R1, R1
0x352C	0x484A    LDR	R0, [PC, #296]
0x352E	0x8001    STRH	R1, [R0, #0]
;Init_Routines.c, 20 :: 		address_TX_normal_FIFO = 0;
0x3530	0x2100    MOVS	R1, #0
0x3532	0xB209    SXTH	R1, R1
0x3534	0x4849    LDR	R0, [PC, #292]
0x3536	0x8001    STRH	R1, [R0, #0]
;Init_Routines.c, 22 :: 		for (i = 0; i < 2; i++) {
; i start address is: 8 (R2)
0x3538	0x2200    MOVS	R2, #0
0x353A	0xB252    SXTB	R2, R2
; i end address is: 8 (R2)
L_Initialize0:
; i start address is: 8 (R2)
0x353C	0x2A02    CMP	R2, #2
0x353E	0xDA16    BGE	L_Initialize1
;Init_Routines.c, 23 :: 		ADDRESS_short_1[i] = 1;
0x3540	0x4847    LDR	R0, [PC, #284]
0x3542	0x1881    ADDS	R1, R0, R2
0x3544	0x2001    MOVS	R0, #1
0x3546	0xB240    SXTB	R0, R0
0x3548	0x7008    STRB	R0, [R1, #0]
;Init_Routines.c, 24 :: 		ADDRESS_short_2[i] = 2;
0x354A	0x4846    LDR	R0, [PC, #280]
0x354C	0x1881    ADDS	R1, R0, R2
0x354E	0x2002    MOVS	R0, #2
0x3550	0xB240    SXTB	R0, R0
0x3552	0x7008    STRB	R0, [R1, #0]
;Init_Routines.c, 25 :: 		PAN_ID_1[i] = 3;
0x3554	0x4844    LDR	R0, [PC, #272]
0x3556	0x1881    ADDS	R1, R0, R2
0x3558	0x2003    MOVS	R0, #3
0x355A	0xB240    SXTB	R0, R0
0x355C	0x7008    STRB	R0, [R1, #0]
;Init_Routines.c, 26 :: 		PAN_ID_2[i] = 3;
0x355E	0x4843    LDR	R0, [PC, #268]
0x3560	0x1881    ADDS	R1, R0, R2
0x3562	0x2003    MOVS	R0, #3
0x3564	0xB240    SXTB	R0, R0
0x3566	0x7008    STRB	R0, [R1, #0]
;Init_Routines.c, 22 :: 		for (i = 0; i < 2; i++) {
0x3568	0x1C52    ADDS	R2, R2, #1
0x356A	0xB252    SXTB	R2, R2
;Init_Routines.c, 27 :: 		}
; i end address is: 8 (R2)
0x356C	0xE7E6    B	L_Initialize0
L_Initialize1:
;Init_Routines.c, 29 :: 		for (i = 0; i < 8; i++) {
; i start address is: 8 (R2)
0x356E	0x2200    MOVS	R2, #0
0x3570	0xB252    SXTB	R2, R2
; i end address is: 8 (R2)
L_Initialize3:
; i start address is: 8 (R2)
0x3572	0x2A08    CMP	R2, #8
0x3574	0xDA0C    BGE	L_Initialize4
;Init_Routines.c, 30 :: 		ADDRESS_long_1[i] = 1;
0x3576	0x483E    LDR	R0, [PC, #248]
0x3578	0x1881    ADDS	R1, R0, R2
0x357A	0x2001    MOVS	R0, #1
0x357C	0xB240    SXTB	R0, R0
0x357E	0x7008    STRB	R0, [R1, #0]
;Init_Routines.c, 31 :: 		ADDRESS_long_2[i] = 2;
0x3580	0x483C    LDR	R0, [PC, #240]
0x3582	0x1881    ADDS	R1, R0, R2
0x3584	0x2002    MOVS	R0, #2
0x3586	0xB240    SXTB	R0, R0
0x3588	0x7008    STRB	R0, [R1, #0]
;Init_Routines.c, 29 :: 		for (i = 0; i < 8; i++) {
0x358A	0x1C52    ADDS	R2, R2, #1
0x358C	0xB252    SXTB	R2, R2
;Init_Routines.c, 32 :: 		}
; i end address is: 8 (R2)
0x358E	0xE7F0    B	L_Initialize3
L_Initialize4:
;Init_Routines.c, 35 :: 		GPIO_Digital_Output(&GPIOD_BASE, _GPIO_PINMASK_13);
0x3590	0xF2420100  MOVW	R1, #8192
0x3594	0x4838    LDR	R0, [PC, #224]
0x3596	0xF7FFFD49  BL	_GPIO_Digital_Output+0
;Init_Routines.c, 36 :: 		GPIO_Digital_Output(&GPIOD_BASE, _GPIO_PINMASK_10);
0x359A	0xF2404100  MOVW	R1, #1024
0x359E	0x4836    LDR	R0, [PC, #216]
0x35A0	0xF7FFFD44  BL	_GPIO_Digital_Output+0
;Init_Routines.c, 37 :: 		GPIO_Digital_Output(&GPIOC_BASE, _GPIO_PINMASK_2);
0x35A4	0xF2400104  MOVW	R1, #4
0x35A8	0x4834    LDR	R0, [PC, #208]
0x35AA	0xF7FFFD3F  BL	_GPIO_Digital_Output+0
;Init_Routines.c, 40 :: 		GPIO_Digital_Input(&GPIOD_BASE, _GPIO_PINMASK_0);
0x35AE	0xF2400101  MOVW	R1, #1
0x35B2	0x4831    LDR	R0, [PC, #196]
0x35B4	0xF7FFFD2E  BL	_GPIO_Digital_Input+0
;Init_Routines.c, 42 :: 		DATA_TX[0] = 0;        // Initialize first byte
0x35B8	0x2100    MOVS	R1, #0
0x35BA	0xB249    SXTB	R1, R1
0x35BC	0x4830    LDR	R0, [PC, #192]
0x35BE	0x7001    STRB	R1, [R0, #0]
;Init_Routines.c, 44 :: 		Delay_ms(5);
0x35C0	0xF64E275F  MOVW	R7, #59999
0x35C4	0xF2C00700  MOVT	R7, #0
L_Initialize6:
0x35C8	0x1E7F    SUBS	R7, R7, #1
0x35CA	0xD1FD    BNE	L_Initialize6
0x35CC	0xBF00    NOP
0x35CE	0xBF00    NOP
0x35D0	0xBF00    NOP
0x35D2	0xBF00    NOP
0x35D4	0xBF00    NOP
;Init_Routines.c, 50 :: 		&_GPIO_MODULE_SPI3_PC10_11_12);
0x35D6	0x4A2B    LDR	R2, [PC, #172]
;Init_Routines.c, 49 :: 		_SPI_MSB_FIRST | _SPI_SS_DISABLE | _SPI_SSM_ENABLE | _SPI_SSI_1,
0x35D8	0xF2403104  MOVW	R1, #772
;Init_Routines.c, 47 :: 		SPI3_Init_Advanced(_SPI_FPCLK_DIV4, _SPI_MASTER  | _SPI_8_BIT |
0x35DC	0x2001    MOVS	R0, #1
;Init_Routines.c, 50 :: 		&_GPIO_MODULE_SPI3_PC10_11_12);
0x35DE	0xF7FFFCEF  BL	_SPI3_Init_Advanced+0
;Init_Routines.c, 51 :: 		TFT_BLED = 1;                             // Turn on TFT Backlight
0x35E2	0x2101    MOVS	R1, #1
0x35E4	0xB249    SXTB	R1, R1
0x35E6	0x4828    LDR	R0, [PC, #160]
0x35E8	0x6001    STR	R1, [R0, #0]
;Init_Routines.c, 53 :: 		TFT_Init(320, 240);                       // Initialize TFT display
0x35EA	0x21F0    MOVS	R1, #240
0x35EC	0xF2401040  MOVW	R0, #320
0x35F0	0xF7FFFD94  BL	_TFT_Init+0
;Init_Routines.c, 54 :: 		TFT_Fill_Screen(CL_WHITE);                // Clear Screen
0x35F4	0xF64F70FF  MOVW	R0, #65535
0x35F8	0xF7FFFD48  BL	_TFT_Fill_Screen+0
;Init_Routines.c, 56 :: 		pin_reset();                              // Activate reset from pin
0x35FC	0xF7FFFD24  BL	_pin_reset+0
;Init_Routines.c, 57 :: 		software_reset();                         // Activate software reset
0x3600	0xF7FFFC84  BL	_software_reset+0
;Init_Routines.c, 58 :: 		RF_reset();                               // RF reset
0x3604	0xF7FFFC58  BL	_RF_reset+0
;Init_Routines.c, 59 :: 		set_WAKE_from_pin();                      // Set wake from pin
0x3608	0xF7FFFC32  BL	_set_wake_from_pin+0
;Init_Routines.c, 61 :: 		set_long_address(ADDRESS_long_1);         // Set long address
0x360C	0x4818    LDR	R0, [PC, #96]
0x360E	0xF7FFFCB7  BL	_set_long_address+0
;Init_Routines.c, 62 :: 		set_short_address(ADDRESS_short_1);       // Set short address
0x3612	0x4813    LDR	R0, [PC, #76]
0x3614	0xF7FFFC9E  BL	_set_short_address+0
;Init_Routines.c, 63 :: 		set_PAN_ID(PAN_ID_1);                     // Set PAN_ID
0x3618	0x4813    LDR	R0, [PC, #76]
0x361A	0xF7FFFC85  BL	_set_PAN_ID+0
;Init_Routines.c, 65 :: 		init_ZIGBEE_nonbeacon();                  // Initialize ZigBee module
0x361E	0xF7FFFDDD  BL	_init_ZIGBEE_nonbeacon+0
;Init_Routines.c, 66 :: 		nonbeacon_PAN_coordinator_device();
0x3622	0xF7FFFF47  BL	_nonbeacon_PAN_coordinator_device+0
;Init_Routines.c, 67 :: 		set_TX_power(31);                         // Set max TX power
0x3626	0x201F    MOVS	R0, #31
0x3628	0xF7FFFEE0  BL	_set_TX_power+0
;Init_Routines.c, 68 :: 		set_frame_format_filter(1);               // 1 all frames, 3 data frame only
0x362C	0x2001    MOVS	R0, #1
0x362E	0xB240    SXTB	R0, R0
0x3630	0xF7FFFEFA  BL	_set_frame_format_filter+0
;Init_Routines.c, 69 :: 		set_reception_mode(1);                    // 1 normal mode
0x3634	0x2001    MOVS	R0, #1
0x3636	0xB240    SXTB	R0, R0
0x3638	0xF7FFFDFE  BL	_set_reception_mode+0
;Init_Routines.c, 71 :: 		pin_wake();                               // Wake from pin
0x363C	0xF7FFFDE8  BL	_pin_wake+0
;Init_Routines.c, 72 :: 		}
L_end_Initialize:
0x3640	0xF8DDE000  LDR	LR, [SP, #0]
0x3644	0xB001    ADD	SP, SP, #4
0x3646	0x4770    BX	LR
0x3648	0x003A2000  	_LQI+0
0x364C	0x003B2000  	_RSSI2+0
0x3650	0x003C2000  	_SEQ_NUMBER+0
0x3654	0x003D2000  	_lost_data+0
0x3658	0x003E2000  	_address_RX_FIFO+0
0x365C	0x00402000  	_address_TX_normal_FIFO+0
0x3660	0x00422000  	_ADDRESS_short_1+0
0x3664	0x00442000  	_ADDRESS_short_2+0
0x3668	0x00462000  	_PAN_ID_1+0
0x366C	0x00482000  	_PAN_ID_2+0
0x3670	0x004A2000  	_ADDRESS_long_1+0
0x3674	0x00522000  	_ADDRESS_long_2+0
0x3678	0x14004001  	GPIOD_BASE+0
0x367C	0x10004001  	GPIOC_BASE+0
0x3680	0x005A2000  	_DATA_TX+0
0x3684	0x441C0000  	__GPIO_MODULE_SPI3_PC10_11_12+0
0x3688	0x01A44223  	TFT_BLED+0
; end of _Initialize
_GPIO_Digital_Output:
;__Lib_GPIO_32F10x.c, 365 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x302C	0xB081    SUB	SP, SP, #4
0x302E	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 366 :: 		
0x3032	0x4A04    LDR	R2, [PC, #16]
0x3034	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x3036	0xF7FFF915  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 367 :: 		
L_end_GPIO_Digital_Output:
0x303A	0xF8DDE000  LDR	LR, [SP, #0]
0x303E	0xB001    ADD	SP, SP, #4
0x3040	0x4770    BX	LR
0x3042	0xBF00    NOP
0x3044	0x00140008  	#524308
; end of _GPIO_Digital_Output
_GPIO_Config:
;__Lib_GPIO_32F10x.c, 124 :: 		
; config start address is: 8 (R2)
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x2264	0xB081    SUB	SP, SP, #4
0x2266	0xF8CDE000  STR	LR, [SP, #0]
0x226A	0xB28C    UXTH	R4, R1
0x226C	0x4615    MOV	R5, R2
; config end address is: 8 (R2)
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 16 (R4)
; config start address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 129 :: 		
0x226E	0x4B77    LDR	R3, [PC, #476]
0x2270	0xEA000303  AND	R3, R0, R3, LSL #0
; port end address is: 0 (R0)
; port start address is: 24 (R6)
0x2274	0x461E    MOV	R6, R3
;__Lib_GPIO_32F10x.c, 131 :: 		
0x2276	0x4618    MOV	R0, R3
0x2278	0xF7FEF912  BL	_GPIO_Clk_Enable+0
;__Lib_GPIO_32F10x.c, 134 :: 		
0x227C	0xF1B40FFF  CMP	R4, #255
0x2280	0xD10C    BNE	L_GPIO_Config18
;__Lib_GPIO_32F10x.c, 135 :: 		
0x2282	0x4B73    LDR	R3, [PC, #460]
0x2284	0x429D    CMP	R5, R3
0x2286	0xD103    BNE	L_GPIO_Config19
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 136 :: 		
0x2288	0xF04F3333  MOV	R3, #858993459
0x228C	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 137 :: 		
0x228E	0xE0D9    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 138 :: 		
L_GPIO_Config19:
;__Lib_GPIO_32F10x.c, 139 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x2290	0x2D42    CMP	R5, #66
0x2292	0xD103    BNE	L_GPIO_Config20
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 140 :: 		
0x2294	0xF04F3344  MOV	R3, #1145324612
0x2298	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 141 :: 		
0x229A	0xE0D3    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 142 :: 		
L_GPIO_Config20:
;__Lib_GPIO_32F10x.c, 143 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config18:
;__Lib_GPIO_32F10x.c, 145 :: 		
0x229C	0xF64F73FF  MOVW	R3, #65535
0x22A0	0x429C    CMP	R4, R3
0x22A2	0xD114    BNE	L_GPIO_Config21
;__Lib_GPIO_32F10x.c, 146 :: 		
0x22A4	0x4B6A    LDR	R3, [PC, #424]
0x22A6	0x429D    CMP	R5, R3
0x22A8	0xD107    BNE	L_GPIO_Config22
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 147 :: 		
0x22AA	0xF04F3333  MOV	R3, #858993459
0x22AE	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 148 :: 		
0x22B0	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x22B2	0xF04F3333  MOV	R3, #858993459
0x22B6	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 149 :: 		
0x22B8	0xE0C4    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 150 :: 		
L_GPIO_Config22:
;__Lib_GPIO_32F10x.c, 151 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x22BA	0x2D42    CMP	R5, #66
0x22BC	0xD107    BNE	L_GPIO_Config23
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 152 :: 		
0x22BE	0xF04F3344  MOV	R3, #1145324612
0x22C2	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 153 :: 		
0x22C4	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x22C6	0xF04F3344  MOV	R3, #1145324612
0x22CA	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 154 :: 		
0x22CC	0xE0BA    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 155 :: 		
L_GPIO_Config23:
;__Lib_GPIO_32F10x.c, 156 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config21:
;__Lib_GPIO_32F10x.c, 158 :: 		
; currentmode start address is: 4 (R1)
0x22CE	0x2100    MOVS	R1, #0
;__Lib_GPIO_32F10x.c, 159 :: 		
; speed start address is: 0 (R0)
0x22D0	0x2000    MOVS	R0, #0
;__Lib_GPIO_32F10x.c, 161 :: 		
0x22D2	0xF0050301  AND	R3, R5, #1
0x22D6	0xB10B    CBZ	R3, L_GPIO_Config24
;__Lib_GPIO_32F10x.c, 162 :: 		
0x22D8	0x2100    MOVS	R1, #0
0x22DA	0xE01D    B	L_GPIO_Config25
L_GPIO_Config24:
;__Lib_GPIO_32F10x.c, 163 :: 		
0x22DC	0xF0050302  AND	R3, R5, #2
0x22E0	0xB133    CBZ	R3, L_GPIO_Config26
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 164 :: 		
0x22E2	0xF40573C0  AND	R3, R5, #384
0x22E6	0xB10B    CBZ	R3, L_GPIO_Config27
;__Lib_GPIO_32F10x.c, 165 :: 		
; currentmode start address is: 4 (R1)
0x22E8	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
0x22EA	0xE000    B	L_GPIO_Config28
L_GPIO_Config27:
;__Lib_GPIO_32F10x.c, 167 :: 		
; currentmode start address is: 4 (R1)
0x22EC	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
L_GPIO_Config28:
;__Lib_GPIO_32F10x.c, 168 :: 		
; currentmode start address is: 4 (R1)
0x22EE	0xE013    B	L_GPIO_Config29
L_GPIO_Config26:
;__Lib_GPIO_32F10x.c, 169 :: 		
0x22F0	0xF0050304  AND	R3, R5, #4
0x22F4	0xB133    CBZ	R3, L_GPIO_Config30
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 170 :: 		
0x22F6	0xF0050320  AND	R3, R5, #32
0x22FA	0xB10B    CBZ	R3, L_GPIO_Config31
;__Lib_GPIO_32F10x.c, 171 :: 		
; currentmode start address is: 4 (R1)
0x22FC	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
0x22FE	0xE000    B	L_GPIO_Config32
L_GPIO_Config31:
;__Lib_GPIO_32F10x.c, 173 :: 		
; currentmode start address is: 4 (R1)
0x2300	0x2100    MOVS	R1, #0
; currentmode end address is: 4 (R1)
L_GPIO_Config32:
;__Lib_GPIO_32F10x.c, 174 :: 		
; currentmode start address is: 4 (R1)
0x2302	0xE009    B	L_GPIO_Config33
L_GPIO_Config30:
;__Lib_GPIO_32F10x.c, 175 :: 		
0x2304	0xF0050308  AND	R3, R5, #8
0x2308	0xB133    CBZ	R3, L__GPIO_Config100
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 176 :: 		
0x230A	0xF0050320  AND	R3, R5, #32
0x230E	0xB10B    CBZ	R3, L_GPIO_Config35
;__Lib_GPIO_32F10x.c, 177 :: 		
; currentmode start address is: 4 (R1)
0x2310	0x210C    MOVS	R1, #12
; currentmode end address is: 4 (R1)
0x2312	0xE000    B	L_GPIO_Config36
L_GPIO_Config35:
;__Lib_GPIO_32F10x.c, 179 :: 		
; currentmode start address is: 4 (R1)
0x2314	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
L_GPIO_Config36:
;__Lib_GPIO_32F10x.c, 180 :: 		
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
0x2316	0xE7FF    B	L_GPIO_Config34
L__GPIO_Config100:
;__Lib_GPIO_32F10x.c, 175 :: 		
;__Lib_GPIO_32F10x.c, 180 :: 		
L_GPIO_Config34:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config33:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config29:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config25:
;__Lib_GPIO_32F10x.c, 182 :: 		
; currentmode start address is: 4 (R1)
0x2318	0x4B4E    LDR	R3, [PC, #312]
0x231A	0xEA050303  AND	R3, R5, R3, LSL #0
0x231E	0xB10B    CBZ	R3, L_GPIO_Config37
;__Lib_GPIO_32F10x.c, 183 :: 		
0x2320	0x2003    MOVS	R0, #3
0x2322	0xE009    B	L_GPIO_Config38
L_GPIO_Config37:
;__Lib_GPIO_32F10x.c, 184 :: 		
0x2324	0xF4057300  AND	R3, R5, #512
0x2328	0xB10B    CBZ	R3, L_GPIO_Config39
;__Lib_GPIO_32F10x.c, 185 :: 		
0x232A	0x2002    MOVS	R0, #2
0x232C	0xE004    B	L_GPIO_Config40
L_GPIO_Config39:
;__Lib_GPIO_32F10x.c, 186 :: 		
0x232E	0xF4056380  AND	R3, R5, #1024
0x2332	0xB10B    CBZ	R3, L__GPIO_Config101
;__Lib_GPIO_32F10x.c, 187 :: 		
0x2334	0x2001    MOVS	R0, #1
; speed end address is: 0 (R0)
0x2336	0xE7FF    B	L_GPIO_Config41
L__GPIO_Config101:
;__Lib_GPIO_32F10x.c, 186 :: 		
;__Lib_GPIO_32F10x.c, 187 :: 		
L_GPIO_Config41:
; speed start address is: 0 (R0)
; speed end address is: 0 (R0)
L_GPIO_Config40:
; speed start address is: 0 (R0)
; speed end address is: 0 (R0)
L_GPIO_Config38:
;__Lib_GPIO_32F10x.c, 189 :: 		
; speed start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 195 :: 		
0x2338	0xF005030C  AND	R3, R5, #12
0x233C	0xB10B    CBZ	R3, L__GPIO_Config102
;__Lib_GPIO_32F10x.c, 198 :: 		
0x233E	0x4301    ORRS	R1, R0
; speed end address is: 0 (R0)
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 199 :: 		
0x2340	0xE7FF    B	L_GPIO_Config42
L__GPIO_Config102:
;__Lib_GPIO_32F10x.c, 195 :: 		
;__Lib_GPIO_32F10x.c, 199 :: 		
L_GPIO_Config42:
;__Lib_GPIO_32F10x.c, 201 :: 		
; currentmode start address is: 4 (R1)
0x2342	0xF00403FF  AND	R3, R4, #255
0x2346	0xB29B    UXTH	R3, R3
0x2348	0x2B00    CMP	R3, #0
0x234A	0xD03B    BEQ	L__GPIO_Config104
;__Lib_GPIO_32F10x.c, 202 :: 		
0x234C	0x6837    LDR	R7, [R6, #0]
; tmpreg start address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 204 :: 		
; pinpos start address is: 0 (R0)
0x234E	0x2000    MOVS	R0, #0
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
; currentmode end address is: 4 (R1)
; tmpreg end address is: 28 (R7)
; pinpos end address is: 0 (R0)
; port end address is: 24 (R6)
0x2350	0xFA1FF884  UXTH	R8, R4
0x2354	0x4632    MOV	R2, R6
0x2356	0x462E    MOV	R6, R5
L_GPIO_Config44:
; pinpos start address is: 0 (R0)
; tmpreg start address is: 28 (R7)
; currentmode start address is: 4 (R1)
; port start address is: 8 (R2)
; config start address is: 24 (R6)
; pin_mask start address is: 32 (R8)
0x2358	0x2808    CMP	R0, #8
0x235A	0xD22C    BCS	L_GPIO_Config45
;__Lib_GPIO_32F10x.c, 206 :: 		
0x235C	0xF04F0301  MOV	R3, #1
0x2360	0xFA03F400  LSL	R4, R3, R0
;__Lib_GPIO_32F10x.c, 208 :: 		
0x2364	0xEA080304  AND	R3, R8, R4, LSL #0
;__Lib_GPIO_32F10x.c, 210 :: 		
0x2368	0x42A3    CMP	R3, R4
0x236A	0xD122    BNE	L__GPIO_Config103
;__Lib_GPIO_32F10x.c, 212 :: 		
0x236C	0x0085    LSLS	R5, R0, #2
;__Lib_GPIO_32F10x.c, 214 :: 		
0x236E	0xF04F030F  MOV	R3, #15
0x2372	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 215 :: 		
0x2374	0x43DB    MVN	R3, R3
0x2376	0xEA070403  AND	R4, R7, R3, LSL #0
; tmpreg end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 218 :: 		
0x237A	0xFA01F305  LSL	R3, R1, R5
0x237E	0xEA440303  ORR	R3, R4, R3, LSL #0
; tmpreg start address is: 20 (R5)
0x2382	0x461D    MOV	R5, R3
;__Lib_GPIO_32F10x.c, 221 :: 		
0x2384	0xF4067381  AND	R3, R6, #258
0x2388	0xF5B37F81  CMP	R3, #258
0x238C	0xD105    BNE	L_GPIO_Config48
;__Lib_GPIO_32F10x.c, 223 :: 		
0x238E	0xF2020414  ADDW	R4, R2, #20
0x2392	0xF04F0301  MOV	R3, #1
0x2396	0x4083    LSLS	R3, R0
0x2398	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 224 :: 		
L_GPIO_Config48:
;__Lib_GPIO_32F10x.c, 226 :: 		
0x239A	0xF0060382  AND	R3, R6, #130
0x239E	0x2B82    CMP	R3, #130
0x23A0	0xD105    BNE	L_GPIO_Config49
;__Lib_GPIO_32F10x.c, 228 :: 		
0x23A2	0xF2020410  ADDW	R4, R2, #16
0x23A6	0xF04F0301  MOV	R3, #1
0x23AA	0x4083    LSLS	R3, R0
0x23AC	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 229 :: 		
L_GPIO_Config49:
;__Lib_GPIO_32F10x.c, 230 :: 		
0x23AE	0x462F    MOV	R7, R5
0x23B0	0xE7FF    B	L_GPIO_Config47
; tmpreg end address is: 20 (R5)
L__GPIO_Config103:
;__Lib_GPIO_32F10x.c, 210 :: 		
;__Lib_GPIO_32F10x.c, 230 :: 		
L_GPIO_Config47:
;__Lib_GPIO_32F10x.c, 204 :: 		
; tmpreg start address is: 28 (R7)
0x23B2	0x1C40    ADDS	R0, R0, #1
;__Lib_GPIO_32F10x.c, 231 :: 		
; pinpos end address is: 0 (R0)
0x23B4	0xE7D0    B	L_GPIO_Config44
L_GPIO_Config45:
;__Lib_GPIO_32F10x.c, 232 :: 		
0x23B6	0x6017    STR	R7, [R2, #0]
; currentmode end address is: 4 (R1)
; port end address is: 8 (R2)
; config end address is: 24 (R6)
; pin_mask end address is: 32 (R8)
; tmpreg end address is: 28 (R7)
0x23B8	0xFA1FF088  UXTH	R0, R8
0x23BC	0x460F    MOV	R7, R1
0x23BE	0x4631    MOV	R1, R6
0x23C0	0x4616    MOV	R6, R2
;__Lib_GPIO_32F10x.c, 234 :: 		
0x23C2	0xE002    B	L_GPIO_Config43
L__GPIO_Config104:
;__Lib_GPIO_32F10x.c, 201 :: 		
0x23C4	0x460F    MOV	R7, R1
0x23C6	0x4629    MOV	R1, R5
0x23C8	0xB2A0    UXTH	R0, R4
;__Lib_GPIO_32F10x.c, 234 :: 		
L_GPIO_Config43:
;__Lib_GPIO_32F10x.c, 238 :: 		
; currentmode start address is: 28 (R7)
; port start address is: 24 (R6)
; config start address is: 4 (R1)
; pin_mask start address is: 0 (R0)
0x23CA	0xF1B00FFF  CMP	R0, #255
0x23CE	0xD939    BLS	L_GPIO_Config50
;__Lib_GPIO_32F10x.c, 240 :: 		
0x23D0	0x1D33    ADDS	R3, R6, #4
0x23D2	0xF8D38000  LDR	R8, [R3, #0]
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 241 :: 		
; pinpos start address is: 8 (R2)
0x23D6	0x2200    MOVS	R2, #0
; port end address is: 24 (R6)
; tmpreg end address is: 32 (R8)
; pinpos end address is: 8 (R2)
L_GPIO_Config51:
; pinpos start address is: 8 (R2)
; tmpreg start address is: 32 (R8)
; pin_mask start address is: 0 (R0)
; pin_mask end address is: 0 (R0)
; config start address is: 4 (R1)
; config end address is: 4 (R1)
; port start address is: 24 (R6)
; currentmode start address is: 28 (R7)
; currentmode end address is: 28 (R7)
0x23D8	0x2A08    CMP	R2, #8
0x23DA	0xD230    BCS	L_GPIO_Config52
; pin_mask end address is: 0 (R0)
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 243 :: 		
; currentmode start address is: 28 (R7)
; config start address is: 4 (R1)
; pin_mask start address is: 0 (R0)
0x23DC	0xF2020408  ADDW	R4, R2, #8
0x23E0	0xF04F0301  MOV	R3, #1
0x23E4	0xFA03F404  LSL	R4, R3, R4
;__Lib_GPIO_32F10x.c, 245 :: 		
0x23E8	0xEA000304  AND	R3, R0, R4, LSL #0
;__Lib_GPIO_32F10x.c, 246 :: 		
0x23EC	0x42A3    CMP	R3, R4
0x23EE	0xD124    BNE	L__GPIO_Config105
;__Lib_GPIO_32F10x.c, 248 :: 		
0x23F0	0x0095    LSLS	R5, R2, #2
;__Lib_GPIO_32F10x.c, 250 :: 		
0x23F2	0xF04F030F  MOV	R3, #15
0x23F6	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 251 :: 		
0x23F8	0x43DB    MVN	R3, R3
0x23FA	0xEA080803  AND	R8, R8, R3, LSL #0
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 254 :: 		
0x23FE	0xFA07F305  LSL	R3, R7, R5
0x2402	0xEA480803  ORR	R8, R8, R3, LSL #0
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 257 :: 		
0x2406	0xF4017381  AND	R3, R1, #258
0x240A	0xF5B37F81  CMP	R3, #258
0x240E	0xD107    BNE	L_GPIO_Config55
;__Lib_GPIO_32F10x.c, 259 :: 		
0x2410	0xF2060514  ADDW	R5, R6, #20
0x2414	0xF2020408  ADDW	R4, R2, #8
0x2418	0xF04F0301  MOV	R3, #1
0x241C	0x40A3    LSLS	R3, R4
0x241E	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 260 :: 		
L_GPIO_Config55:
;__Lib_GPIO_32F10x.c, 262 :: 		
0x2420	0xF0010382  AND	R3, R1, #130
0x2424	0x2B82    CMP	R3, #130
0x2426	0xD107    BNE	L_GPIO_Config56
;__Lib_GPIO_32F10x.c, 264 :: 		
0x2428	0xF2060510  ADDW	R5, R6, #16
0x242C	0xF2020408  ADDW	R4, R2, #8
0x2430	0xF04F0301  MOV	R3, #1
0x2434	0x40A3    LSLS	R3, R4
0x2436	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 265 :: 		
L_GPIO_Config56:
;__Lib_GPIO_32F10x.c, 266 :: 		
0x2438	0xE7FF    B	L_GPIO_Config54
; tmpreg end address is: 32 (R8)
L__GPIO_Config105:
;__Lib_GPIO_32F10x.c, 246 :: 		
;__Lib_GPIO_32F10x.c, 266 :: 		
L_GPIO_Config54:
;__Lib_GPIO_32F10x.c, 241 :: 		
; tmpreg start address is: 32 (R8)
0x243A	0x1C52    ADDS	R2, R2, #1
;__Lib_GPIO_32F10x.c, 267 :: 		
; pin_mask end address is: 0 (R0)
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
; pinpos end address is: 8 (R2)
0x243C	0xE7CC    B	L_GPIO_Config51
L_GPIO_Config52:
;__Lib_GPIO_32F10x.c, 268 :: 		
0x243E	0x1D33    ADDS	R3, R6, #4
; port end address is: 24 (R6)
0x2440	0xF8C38000  STR	R8, [R3, #0]
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 269 :: 		
L_GPIO_Config50:
;__Lib_GPIO_32F10x.c, 270 :: 		
L_end_GPIO_Config:
0x2444	0xF8DDE000  LDR	LR, [SP, #0]
0x2448	0xB001    ADD	SP, SP, #4
0x244A	0x4770    BX	LR
0x244C	0xFC00FFFF  	#-1024
0x2450	0x00140008  	#524308
0x2454	0x08000008  	#526336
; end of _GPIO_Config
_GPIO_Clk_Enable:
;__Lib_GPIO_32F10x.c, 83 :: 		
; gpio_port start address is: 0 (R0)
0x04A0	0xB081    SUB	SP, SP, #4
; gpio_port end address is: 0 (R0)
; gpio_port start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 85 :: 		
0x04A2	0x4919    LDR	R1, [PC, #100]
0x04A4	0xEA000101  AND	R1, R0, R1, LSL #0
; gpio_port end address is: 0 (R0)
; prt start address is: 0 (R0)
0x04A8	0x4608    MOV	R0, R1
;__Lib_GPIO_32F10x.c, 86 :: 		
; pos start address is: 8 (R2)
0x04AA	0x2200    MOVS	R2, #0
;__Lib_GPIO_32F10x.c, 87 :: 		
0x04AC	0xE00E    B	L_GPIO_Clk_Enable0
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 88 :: 		
L_GPIO_Clk_Enable2:
; pos start address is: 0 (R0)
0x04AE	0x2004    MOVS	R0, #4
; pos end address is: 0 (R0)
0x04B0	0xE022    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 89 :: 		
L_GPIO_Clk_Enable3:
; pos start address is: 0 (R0)
0x04B2	0x2008    MOVS	R0, #8
; pos end address is: 0 (R0)
0x04B4	0xE020    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 90 :: 		
L_GPIO_Clk_Enable4:
; pos start address is: 0 (R0)
0x04B6	0x2010    MOVS	R0, #16
; pos end address is: 0 (R0)
0x04B8	0xE01E    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 91 :: 		
L_GPIO_Clk_Enable5:
; pos start address is: 0 (R0)
0x04BA	0x2020    MOVS	R0, #32
; pos end address is: 0 (R0)
0x04BC	0xE01C    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 92 :: 		
L_GPIO_Clk_Enable6:
; pos start address is: 0 (R0)
0x04BE	0x2040    MOVS	R0, #64
; pos end address is: 0 (R0)
0x04C0	0xE01A    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 93 :: 		
L_GPIO_Clk_Enable7:
; pos start address is: 0 (R0)
0x04C2	0x2080    MOVS	R0, #128
; pos end address is: 0 (R0)
0x04C4	0xE018    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 94 :: 		
L_GPIO_Clk_Enable8:
; pos start address is: 0 (R0)
0x04C6	0xF2401000  MOVW	R0, #256
; pos end address is: 0 (R0)
0x04CA	0xE015    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 95 :: 		
L_GPIO_Clk_Enable0:
; pos start address is: 8 (R2)
; prt start address is: 0 (R0)
0x04CC	0x490F    LDR	R1, [PC, #60]
0x04CE	0x4288    CMP	R0, R1
0x04D0	0xD0ED    BEQ	L_GPIO_Clk_Enable2
0x04D2	0x490F    LDR	R1, [PC, #60]
0x04D4	0x4288    CMP	R0, R1
0x04D6	0xD0EC    BEQ	L_GPIO_Clk_Enable3
0x04D8	0x490E    LDR	R1, [PC, #56]
0x04DA	0x4288    CMP	R0, R1
0x04DC	0xD0EB    BEQ	L_GPIO_Clk_Enable4
0x04DE	0x490E    LDR	R1, [PC, #56]
0x04E0	0x4288    CMP	R0, R1
0x04E2	0xD0EA    BEQ	L_GPIO_Clk_Enable5
0x04E4	0x490D    LDR	R1, [PC, #52]
0x04E6	0x4288    CMP	R0, R1
0x04E8	0xD0E9    BEQ	L_GPIO_Clk_Enable6
0x04EA	0x490D    LDR	R1, [PC, #52]
0x04EC	0x4288    CMP	R0, R1
0x04EE	0xD0E8    BEQ	L_GPIO_Clk_Enable7
0x04F0	0x490C    LDR	R1, [PC, #48]
0x04F2	0x4288    CMP	R0, R1
0x04F4	0xD0E7    BEQ	L_GPIO_Clk_Enable8
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
0x04F6	0x4610    MOV	R0, R2
L_GPIO_Clk_Enable1:
;__Lib_GPIO_32F10x.c, 97 :: 		
; pos start address is: 0 (R0)
0x04F8	0x490B    LDR	R1, [PC, #44]
0x04FA	0x6809    LDR	R1, [R1, #0]
0x04FC	0xEA410200  ORR	R2, R1, R0, LSL #0
; pos end address is: 0 (R0)
0x0500	0x4909    LDR	R1, [PC, #36]
0x0502	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 98 :: 		
L_end_GPIO_Clk_Enable:
0x0504	0xB001    ADD	SP, SP, #4
0x0506	0x4770    BX	LR
0x0508	0xFC00FFFF  	#-1024
0x050C	0x08004001  	#1073809408
0x0510	0x0C004001  	#1073810432
0x0514	0x10004001  	#1073811456
0x0518	0x14004001  	#1073812480
0x051C	0x18004001  	#1073813504
0x0520	0x1C004001  	#1073814528
0x0524	0x20004001  	#1073815552
0x0528	0x10184002  	RCC_APB2ENR+0
; end of _GPIO_Clk_Enable
_GPIO_Digital_Input:
;__Lib_GPIO_32F10x.c, 369 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x3014	0xB081    SUB	SP, SP, #4
0x3016	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 370 :: 		
0x301A	0xF04F0242  MOV	R2, #66
0x301E	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x3020	0xF7FFF920  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 371 :: 		
L_end_GPIO_Digital_Input:
0x3024	0xF8DDE000  LDR	LR, [SP, #0]
0x3028	0xB001    ADD	SP, SP, #4
0x302A	0x4770    BX	LR
; end of _GPIO_Digital_Input
_SPI3_Init_Advanced:
;__Lib_SPI_123.c, 133 :: 		
; module start address is: 8 (R2)
0x2FC0	0xB083    SUB	SP, SP, #12
0x2FC2	0xF8CDE000  STR	LR, [SP, #0]
0x2FC6	0xF88D0004  STRB	R0, [SP, #4]
0x2FCA	0x9102    STR	R1, [SP, #8]
; module end address is: 8 (R2)
; module start address is: 8 (R2)
;__Lib_SPI_123.c, 134 :: 		
0x2FCC	0x4C0B    LDR	R4, [PC, #44]
0x2FCE	0x4B0C    LDR	R3, [PC, #48]
0x2FD0	0x601C    STR	R4, [R3, #0]
;__Lib_SPI_123.c, 135 :: 		
0x2FD2	0x4C0C    LDR	R4, [PC, #48]
0x2FD4	0x4B0C    LDR	R3, [PC, #48]
0x2FD6	0x601C    STR	R4, [R3, #0]
;__Lib_SPI_123.c, 137 :: 		
0x2FD8	0x2401    MOVS	R4, #1
0x2FDA	0xB264    SXTB	R4, R4
0x2FDC	0x4B0B    LDR	R3, [PC, #44]
0x2FDE	0x601C    STR	R4, [R3, #0]
;__Lib_SPI_123.c, 138 :: 		
0x2FE0	0x4610    MOV	R0, R2
; module end address is: 8 (R2)
0x2FE2	0xF7FEFF81  BL	_GPIO_Alternate_Function_Enable+0
;__Lib_SPI_123.c, 140 :: 		
0x2FE6	0x9A02    LDR	R2, [SP, #8]
0x2FE8	0xF89D1004  LDRB	R1, [SP, #4]
0x2FEC	0x4808    LDR	R0, [PC, #32]
0x2FEE	0xF7FFFA33  BL	__Lib_SPI_123_SPIx_Init_Advanced+0
;__Lib_SPI_123.c, 141 :: 		
L_end_SPI3_Init_Advanced:
0x2FF2	0xF8DDE000  LDR	LR, [SP, #0]
0x2FF6	0xB003    ADD	SP, SP, #12
0x2FF8	0x4770    BX	LR
0x2FFA	0xBF00    NOP
0x2FFC	0x07E50000  	_SPI3_Read+0
0x3000	0x00902000  	_SPI_Rd_Ptr+0
0x3004	0x26050000  	_SPI3_Write+0
0x3008	0x00942000  	_SPI_Wr_Ptr+0
0x300C	0x03BC4242  	RCC_APB1ENR+0
0x3010	0x3C004000  	SPI3_CR1+0
; end of _SPI3_Init_Advanced
_GPIO_Alternate_Function_Enable:
;__Lib_GPIO_32F10x.c, 303 :: 		
; module start address is: 0 (R0)
0x1EE8	0xB081    SUB	SP, SP, #4
0x1EEA	0xF8CDE000  STR	LR, [SP, #0]
; module end address is: 0 (R0)
; module start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 304 :: 		
;__Lib_GPIO_32F10x.c, 305 :: 		
;__Lib_GPIO_32F10x.c, 307 :: 		
0x1EEE	0x2201    MOVS	R2, #1
0x1EF0	0xB252    SXTB	R2, R2
0x1EF2	0x493E    LDR	R1, [PC, #248]
0x1EF4	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 309 :: 		
0x1EF6	0xF2000168  ADDW	R1, R0, #104
0x1EFA	0x680B    LDR	R3, [R1, #0]
0x1EFC	0xF06F6100  MVN	R1, #134217728
0x1F00	0xEA030201  AND	R2, R3, R1, LSL #0
; gpio_remap start address is: 16 (R4)
0x1F04	0x4614    MOV	R4, R2
;__Lib_GPIO_32F10x.c, 310 :: 		
0x1F06	0xF0036100  AND	R1, R3, #134217728
0x1F0A	0x0EC9    LSRS	R1, R1, #27
; newstate start address is: 12 (R3)
0x1F0C	0x460B    MOV	R3, R1
;__Lib_GPIO_32F10x.c, 312 :: 		
0x1F0E	0xF0024100  AND	R1, R2, #-2147483648
0x1F12	0xF1B14F00  CMP	R1, #-2147483648
0x1F16	0xD102    BNE	L_GPIO_Alternate_Function_Enable66
;__Lib_GPIO_32F10x.c, 314 :: 		
0x1F18	0x4935    LDR	R1, [PC, #212]
; tmpreg start address is: 8 (R2)
0x1F1A	0x680A    LDR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 315 :: 		
; tmpreg end address is: 8 (R2)
0x1F1C	0xE001    B	L_GPIO_Alternate_Function_Enable67
L_GPIO_Alternate_Function_Enable66:
;__Lib_GPIO_32F10x.c, 318 :: 		
0x1F1E	0x4935    LDR	R1, [PC, #212]
; tmpreg start address is: 8 (R2)
0x1F20	0x680A    LDR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 319 :: 		
L_GPIO_Alternate_Function_Enable67:
;__Lib_GPIO_32F10x.c, 321 :: 		
; tmpreg start address is: 8 (R2)
0x1F22	0xF4042170  AND	R1, R4, #983040
0x1F26	0x0C09    LSRS	R1, R1, #16
; tmpmask start address is: 24 (R6)
0x1F28	0x460E    MOV	R6, R1
;__Lib_GPIO_32F10x.c, 322 :: 		
0x1F2A	0xF64F71FF  MOVW	R1, #65535
0x1F2E	0xEA040101  AND	R1, R4, R1, LSL #0
; tmp start address is: 20 (R5)
0x1F32	0x460D    MOV	R5, R1
;__Lib_GPIO_32F10x.c, 324 :: 		
0x1F34	0xF4041140  AND	R1, R4, #3145728
0x1F38	0xF5B11F40  CMP	R1, #3145728
0x1F3C	0xD10D    BNE	L_GPIO_Alternate_Function_Enable68
; tmpmask end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 326 :: 		
0x1F3E	0xF06F6170  MVN	R1, #251658240
0x1F42	0xEA020101  AND	R1, R2, R1, LSL #0
; tmpreg end address is: 8 (R2)
; tmpreg start address is: 24 (R6)
0x1F46	0x460E    MOV	R6, R1
;__Lib_GPIO_32F10x.c, 327 :: 		
0x1F48	0x492A    LDR	R1, [PC, #168]
0x1F4A	0x680A    LDR	R2, [R1, #0]
0x1F4C	0xF06F6170  MVN	R1, #251658240
0x1F50	0x400A    ANDS	R2, R1
0x1F52	0x4928    LDR	R1, [PC, #160]
0x1F54	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 328 :: 		
0x1F56	0x4632    MOV	R2, R6
; tmpreg end address is: 24 (R6)
0x1F58	0xE016    B	L_GPIO_Alternate_Function_Enable69
L_GPIO_Alternate_Function_Enable68:
;__Lib_GPIO_32F10x.c, 329 :: 		
; tmpreg start address is: 8 (R2)
; tmpmask start address is: 24 (R6)
0x1F5A	0xF4041180  AND	R1, R4, #1048576
0x1F5E	0xF5B11F80  CMP	R1, #1048576
0x1F62	0xD109    BNE	L_GPIO_Alternate_Function_Enable70
;__Lib_GPIO_32F10x.c, 331 :: 		
0x1F64	0xF04F0103  MOV	R1, #3
0x1F68	0x40B1    LSLS	R1, R6
; tmpmask end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 332 :: 		
0x1F6A	0x43C9    MVN	R1, R1
0x1F6C	0xEA020101  AND	R1, R2, R1, LSL #0
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 333 :: 		
0x1F70	0xF0416170  ORR	R1, R1, #251658240
; tmpreg start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 334 :: 		
0x1F74	0x460A    MOV	R2, R1
; tmpreg end address is: 4 (R1)
0x1F76	0xE007    B	L_GPIO_Alternate_Function_Enable71
L_GPIO_Alternate_Function_Enable70:
;__Lib_GPIO_32F10x.c, 337 :: 		
; tmpreg start address is: 8 (R2)
0x1F78	0x0D61    LSRS	R1, R4, #21
0x1F7A	0x0109    LSLS	R1, R1, #4
0x1F7C	0xFA05F101  LSL	R1, R5, R1
0x1F80	0x43C9    MVN	R1, R1
0x1F82	0x400A    ANDS	R2, R1
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 338 :: 		
0x1F84	0xF0426270  ORR	R2, R2, #251658240
; tmpreg start address is: 8 (R2)
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 339 :: 		
L_GPIO_Alternate_Function_Enable71:
; tmpreg start address is: 8 (R2)
; tmpreg end address is: 8 (R2)
L_GPIO_Alternate_Function_Enable69:
;__Lib_GPIO_32F10x.c, 341 :: 		
; tmpreg start address is: 8 (R2)
0x1F88	0xB12B    CBZ	R3, L__GPIO_Alternate_Function_Enable106
; newstate end address is: 12 (R3)
;__Lib_GPIO_32F10x.c, 343 :: 		
0x1F8A	0x0D61    LSRS	R1, R4, #21
0x1F8C	0x0109    LSLS	R1, R1, #4
0x1F8E	0xFA05F101  LSL	R1, R5, R1
; tmp end address is: 20 (R5)
0x1F92	0x430A    ORRS	R2, R1
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 344 :: 		
0x1F94	0xE7FF    B	L_GPIO_Alternate_Function_Enable72
L__GPIO_Alternate_Function_Enable106:
;__Lib_GPIO_32F10x.c, 341 :: 		
;__Lib_GPIO_32F10x.c, 344 :: 		
L_GPIO_Alternate_Function_Enable72:
;__Lib_GPIO_32F10x.c, 346 :: 		
; tmpreg start address is: 8 (R2)
0x1F96	0xF0044100  AND	R1, R4, #-2147483648
; gpio_remap end address is: 16 (R4)
0x1F9A	0xF1B14F00  CMP	R1, #-2147483648
0x1F9E	0xD102    BNE	L_GPIO_Alternate_Function_Enable73
;__Lib_GPIO_32F10x.c, 348 :: 		
0x1FA0	0x4913    LDR	R1, [PC, #76]
0x1FA2	0x600A    STR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 349 :: 		
0x1FA4	0xE001    B	L_GPIO_Alternate_Function_Enable74
L_GPIO_Alternate_Function_Enable73:
;__Lib_GPIO_32F10x.c, 352 :: 		
; tmpreg start address is: 8 (R2)
0x1FA6	0x4913    LDR	R1, [PC, #76]
0x1FA8	0x600A    STR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 353 :: 		
L_GPIO_Alternate_Function_Enable74:
;__Lib_GPIO_32F10x.c, 356 :: 		
; i start address is: 40 (R10)
0x1FAA	0xF2400A00  MOVW	R10, #0
; module end address is: 0 (R0)
; i end address is: 40 (R10)
0x1FAE	0x4681    MOV	R9, R0
;__Lib_GPIO_32F10x.c, 357 :: 		
L_GPIO_Alternate_Function_Enable75:
; i start address is: 40 (R10)
; module start address is: 36 (R9)
0x1FB0	0xEA4F018A  LSL	R1, R10, #2
0x1FB4	0xEB090101  ADD	R1, R9, R1, LSL #0
0x1FB8	0x6809    LDR	R1, [R1, #0]
0x1FBA	0xF1B13FFF  CMP	R1, #-1
0x1FBE	0xD010    BEQ	L_GPIO_Alternate_Function_Enable76
;__Lib_GPIO_32F10x.c, 358 :: 		
0x1FC0	0xF1090134  ADD	R1, R9, #52
0x1FC4	0xEA4F038A  LSL	R3, R10, #2
0x1FC8	0x18C9    ADDS	R1, R1, R3
0x1FCA	0x6809    LDR	R1, [R1, #0]
0x1FCC	0x460A    MOV	R2, R1
0x1FCE	0xEB090103  ADD	R1, R9, R3, LSL #0
0x1FD2	0x6809    LDR	R1, [R1, #0]
0x1FD4	0x4608    MOV	R0, R1
0x1FD6	0x4611    MOV	R1, R2
0x1FD8	0xF7FEFCD0  BL	__Lib_GPIO_32F10x_GPIO_Configure_Pin+0
;__Lib_GPIO_32F10x.c, 359 :: 		
0x1FDC	0xF10A0A01  ADD	R10, R10, #1
;__Lib_GPIO_32F10x.c, 360 :: 		
; module end address is: 36 (R9)
; i end address is: 40 (R10)
0x1FE0	0xE7E6    B	L_GPIO_Alternate_Function_Enable75
L_GPIO_Alternate_Function_Enable76:
;__Lib_GPIO_32F10x.c, 363 :: 		
L_end_GPIO_Alternate_Function_Enable:
0x1FE2	0xF8DDE000  LDR	LR, [SP, #0]
0x1FE6	0xB001    ADD	SP, SP, #4
0x1FE8	0x4770    BX	LR
0x1FEA	0xBF00    NOP
0x1FEC	0x03004242  	RCC_APB2ENRbits+0
0x1FF0	0x001C4001  	AFIO_MAPR2+0
0x1FF4	0x00044001  	AFIO_MAPR+0
; end of _GPIO_Alternate_Function_Enable
__Lib_GPIO_32F10x_GPIO_Configure_Pin:
;__Lib_GPIO_32F10x.c, 282 :: 		
; config start address is: 4 (R1)
; af_pin start address is: 0 (R0)
0x097C	0xB083    SUB	SP, SP, #12
0x097E	0xF8CDE000  STR	LR, [SP, #0]
; config end address is: 4 (R1)
; af_pin end address is: 0 (R0)
; af_pin start address is: 0 (R0)
; config start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 286 :: 		
0x0982	0xF00003FF  AND	R3, R0, #255
; af_pin end address is: 0 (R0)
0x0986	0x091A    LSRS	R2, R3, #4
; port start address is: 0 (R0)
0x0988	0x4610    MOV	R0, R2
;__Lib_GPIO_32F10x.c, 287 :: 		
0x098A	0xF003020F  AND	R2, R3, #15
; pin start address is: 12 (R3)
0x098E	0x4613    MOV	R3, R2
;__Lib_GPIO_32F10x.c, 290 :: 		
0x0990	0xE014    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin57
; port end address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 291 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin59:
0x0992	0x4A19    LDR	R2, [PC, #100]
0x0994	0x9202    STR	R2, [SP, #8]
0x0996	0xE01F    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 292 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin60:
0x0998	0x4A18    LDR	R2, [PC, #96]
0x099A	0x9202    STR	R2, [SP, #8]
0x099C	0xE01C    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 293 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin61:
0x099E	0x4A18    LDR	R2, [PC, #96]
0x09A0	0x9202    STR	R2, [SP, #8]
0x09A2	0xE019    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 294 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin62:
0x09A4	0x4A17    LDR	R2, [PC, #92]
0x09A6	0x9202    STR	R2, [SP, #8]
0x09A8	0xE016    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 295 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin63:
0x09AA	0x4A17    LDR	R2, [PC, #92]
0x09AC	0x9202    STR	R2, [SP, #8]
0x09AE	0xE013    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 296 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin64:
0x09B0	0x4A16    LDR	R2, [PC, #88]
0x09B2	0x9202    STR	R2, [SP, #8]
0x09B4	0xE010    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 297 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin65:
0x09B6	0x4A16    LDR	R2, [PC, #88]
0x09B8	0x9202    STR	R2, [SP, #8]
0x09BA	0xE00D    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 298 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin57:
; port start address is: 0 (R0)
0x09BC	0x2800    CMP	R0, #0
0x09BE	0xD0E8    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin59
0x09C0	0x2801    CMP	R0, #1
0x09C2	0xD0E9    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin60
0x09C4	0x2802    CMP	R0, #2
0x09C6	0xD0EA    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin61
0x09C8	0x2803    CMP	R0, #3
0x09CA	0xD0EB    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin62
0x09CC	0x2804    CMP	R0, #4
0x09CE	0xD0EC    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin63
0x09D0	0x2805    CMP	R0, #5
0x09D2	0xD0ED    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin64
0x09D4	0x2806    CMP	R0, #6
0x09D6	0xD0EE    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin65
; port end address is: 0 (R0)
L___Lib_GPIO_32F10x_GPIO_Configure_Pin58:
;__Lib_GPIO_32F10x.c, 300 :: 		
0x09D8	0x2201    MOVS	R2, #1
0x09DA	0xB212    SXTH	R2, R2
0x09DC	0x409A    LSLS	R2, R3
; pin end address is: 12 (R3)
0x09DE	0xF8AD2004  STRH	R2, [SP, #4]
; config end address is: 4 (R1)
0x09E2	0x9802    LDR	R0, [SP, #8]
0x09E4	0x460A    MOV	R2, R1
0x09E6	0xF8BD1004  LDRH	R1, [SP, #4]
0x09EA	0xF001FC3B  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 301 :: 		
L_end_GPIO_Configure_Pin:
0x09EE	0xF8DDE000  LDR	LR, [SP, #0]
0x09F2	0xB003    ADD	SP, SP, #12
0x09F4	0x4770    BX	LR
0x09F6	0xBF00    NOP
0x09F8	0x08004001  	#1073809408
0x09FC	0x0C004001  	#1073810432
0x0A00	0x10004001  	#1073811456
0x0A04	0x14004001  	#1073812480
0x0A08	0x18004001  	#1073813504
0x0A0C	0x1C004001  	#1073814528
0x0A10	0x20004001  	#1073815552
; end of __Lib_GPIO_32F10x_GPIO_Configure_Pin
__Lib_SPI_123_SPIx_Init_Advanced:
;__Lib_SPI_123.c, 53 :: 		
; config start address is: 8 (R2)
; clock_divider start address is: 4 (R1)
; base start address is: 0 (R0)
0x2458	0xB081    SUB	SP, SP, #4
; config end address is: 8 (R2)
; clock_divider end address is: 4 (R1)
; base end address is: 0 (R0)
; base start address is: 0 (R0)
; clock_divider start address is: 4 (R1)
; config start address is: 8 (R2)
;__Lib_SPI_123.c, 56 :: 		
0x245A	0x2300    MOVS	R3, #0
0x245C	0x6003    STR	R3, [R0, #0]
;__Lib_SPI_123.c, 58 :: 		
0x245E	0x00CB    LSLS	R3, R1, #3
0x2460	0xB29B    UXTH	R3, R3
; clock_divider end address is: 4 (R1)
0x2462	0xEA420303  ORR	R3, R2, R3, LSL #0
;__Lib_SPI_123.c, 60 :: 		
0x2466	0x6804    LDR	R4, [R0, #0]
0x2468	0xB29B    UXTH	R3, R3
0x246A	0xEA440303  ORR	R3, R4, R3, LSL #0
0x246E	0x6003    STR	R3, [R0, #0]
;__Lib_SPI_123.c, 61 :: 		
0x2470	0x1D05    ADDS	R5, R0, #4
0x2472	0x1413    ASRS	R3, R2, #16
; config end address is: 8 (R2)
0x2474	0x461C    MOV	R4, R3
0x2476	0x682B    LDR	R3, [R5, #0]
0x2478	0xF3640382  BFI	R3, R4, #2, #1
0x247C	0x602B    STR	R3, [R5, #0]
;__Lib_SPI_123.c, 63 :: 		
0x247E	0xF200051C  ADDW	R5, R0, #28
0x2482	0x2400    MOVS	R4, #0
0x2484	0x682B    LDR	R3, [R5, #0]
0x2486	0xF36423CB  BFI	R3, R4, #11, #1
0x248A	0x602B    STR	R3, [R5, #0]
;__Lib_SPI_123.c, 64 :: 		
0x248C	0x2401    MOVS	R4, #1
0x248E	0x6803    LDR	R3, [R0, #0]
0x2490	0xF3641386  BFI	R3, R4, #6, #1
0x2494	0x6003    STR	R3, [R0, #0]
; base end address is: 0 (R0)
;__Lib_SPI_123.c, 65 :: 		
L_end_SPIx_Init_Advanced:
0x2496	0xB001    ADD	SP, SP, #4
0x2498	0x4770    BX	LR
; end of __Lib_SPI_123_SPIx_Init_Advanced
_TFT_Init:
;__Lib_TFT_Defs.c, 320 :: 		void TFT_Init(unsigned int display_width, unsigned int display_height) {
; display_height start address is: 4 (R1)
; display_width start address is: 0 (R0)
0x311C	0xB081    SUB	SP, SP, #4
0x311E	0xF8CDE000  STR	LR, [SP, #0]
0x3122	0xB28C    UXTH	R4, R1
0x3124	0xB281    UXTH	R1, R0
; display_height end address is: 4 (R1)
; display_width end address is: 0 (R0)
; display_width start address is: 4 (R1)
; display_height start address is: 16 (R4)
;__Lib_TFT_Defs.c, 321 :: 		__controller = _8BIT_CONTROLLER;
0x3126	0xF24003FF  MOVW	R3, #255
0x312A	0x4A1F    LDR	R2, [PC, #124]
0x312C	0x8013    STRH	R3, [R2, #0]
;__Lib_TFT_Defs.c, 322 :: 		if (Is_TFT_Set() != 1) {
0x312E	0xF7FFF9C1  BL	_Is_TFT_Set+0
0x3132	0x2801    CMP	R0, #1
0x3134	0xD008    BEQ	L_TFT_Init8
;__Lib_TFT_Defs.c, 323 :: 		TFT_Set_Index_Ptr = TFT_Set_Index;
0x3136	0x4B1D    LDR	R3, [PC, #116]
0x3138	0x4A1D    LDR	R2, [PC, #116]
0x313A	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 324 :: 		TFT_Write_Command_Ptr = TFT_Write_Command;
0x313C	0x4B1D    LDR	R3, [PC, #116]
0x313E	0x4A1E    LDR	R2, [PC, #120]
0x3140	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 325 :: 		TFT_Write_Data_Ptr = TFT_Write_Data;
0x3142	0x4B1E    LDR	R3, [PC, #120]
0x3144	0x4A1E    LDR	R2, [PC, #120]
0x3146	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 326 :: 		}
L_TFT_Init8:
;__Lib_TFT_Defs.c, 328 :: 		TFT_DISP_WIDTH = display_width;
0x3148	0x4A1E    LDR	R2, [PC, #120]
0x314A	0x8011    STRH	R1, [R2, #0]
;__Lib_TFT_Defs.c, 329 :: 		TFT_DISP_HEIGHT = display_height;
0x314C	0x4A1E    LDR	R2, [PC, #120]
0x314E	0x8014    STRH	R4, [R2, #0]
;__Lib_TFT_Defs.c, 330 :: 		if (display_width >= display_height)
0x3150	0x42A1    CMP	R1, R4
0x3152	0xD303    BCC	L_TFT_Init9
; display_width end address is: 4 (R1)
; display_height end address is: 16 (R4)
;__Lib_TFT_Defs.c, 331 :: 		TFT_Disp_Rotation = 0;
0x3154	0x2300    MOVS	R3, #0
0x3156	0x4A1D    LDR	R2, [PC, #116]
0x3158	0x7013    STRB	R3, [R2, #0]
0x315A	0xE002    B	L_TFT_Init10
L_TFT_Init9:
;__Lib_TFT_Defs.c, 333 :: 		TFT_Disp_Rotation = 90;
0x315C	0x235A    MOVS	R3, #90
0x315E	0x4A1B    LDR	R2, [PC, #108]
0x3160	0x7013    STRB	R3, [R2, #0]
L_TFT_Init10:
;__Lib_TFT_Defs.c, 335 :: 		TFT_Set_Pen(CL_BLACK, 1);
0x3162	0x2101    MOVS	R1, #1
0x3164	0xF2400000  MOVW	R0, #0
0x3168	0xF7FFF998  BL	_TFT_Set_Pen+0
;__Lib_TFT_Defs.c, 336 :: 		TFT_Set_Brush(0, 0, 0, 0, 0, 0);
0x316C	0x2300    MOVS	R3, #0
0x316E	0x2200    MOVS	R2, #0
0x3170	0xB408    PUSH	(R3)
0x3172	0xB404    PUSH	(R2)
0x3174	0x2300    MOVS	R3, #0
0x3176	0x2200    MOVS	R2, #0
0x3178	0x2100    MOVS	R1, #0
0x317A	0x2000    MOVS	R0, #0
0x317C	0xF7FEFC52  BL	_TFT_Set_Brush+0
0x3180	0xB002    ADD	SP, SP, #8
;__Lib_TFT_Defs.c, 338 :: 		TFT_Move_Cursor(0, 0);
0x3182	0x2100    MOVS	R1, #0
0x3184	0x2000    MOVS	R0, #0
0x3186	0xF7FEFC41  BL	_TFT_Move_Cursor+0
;__Lib_TFT_Defs.c, 339 :: 		ExternalFontSet = 0;
0x318A	0x2300    MOVS	R3, #0
0x318C	0x4A10    LDR	R2, [PC, #64]
0x318E	0x7013    STRB	R3, [R2, #0]
;__Lib_TFT_Defs.c, 341 :: 		TFT_Set_DataPort_Direction();
0x3190	0xF7FEFC24  BL	__Lib_TFT_Defs_TFT_Set_DataPort_Direction+0
;__Lib_TFT_Defs.c, 343 :: 		TFT_Reset_Device();
0x3194	0xF7FEFC66  BL	__Lib_TFT_Defs_TFT_Reset_Device+0
;__Lib_TFT_Defs.c, 344 :: 		TFT_Set_Address_Ptr = TFT_Set_Address;
0x3198	0x4B0E    LDR	R3, [PC, #56]
0x319A	0x4A0F    LDR	R2, [PC, #60]
0x319C	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 345 :: 		}
L_end_TFT_Init:
0x319E	0xF8DDE000  LDR	LR, [SP, #0]
0x31A2	0xB001    ADD	SP, SP, #4
0x31A4	0x4770    BX	LR
0x31A6	0xBF00    NOP
0x31A8	0x00382000  	__Lib_TFT_Defs___controller+0
0x31AC	0x01DD0000  	_TFT_Set_Index+0
0x31B0	0x00DC2000  	_TFT_Set_Index_Ptr+0
0x31B4	0x018D0000  	_TFT_Write_Command+0
0x31B8	0x00E02000  	_TFT_Write_Command_Ptr+0
0x31BC	0x26210000  	_TFT_Write_Data+0
0x31C0	0x00BC2000  	_TFT_Write_Data_Ptr+0
0x31C4	0x00AE2000  	_TFT_DISP_WIDTH+0
0x31C8	0x00B02000  	_TFT_DISP_HEIGHT+0
0x31CC	0x00372000  	__Lib_TFT_Defs_TFT_Disp_Rotation+0
0x31D0	0x00A92000  	_ExternalFontSet+0
0x31D4	0x1CD90000  	_TFT_Set_Address+0
0x31D8	0x00B82000  	_TFT_Set_Address_Ptr+0
; end of _TFT_Init
_Is_TFT_Set:
;__Lib_TFT.c, 132 :: 		
0x24B4	0xB081    SUB	SP, SP, #4
;__Lib_TFT.c, 133 :: 		
0x24B6	0x4802    LDR	R0, [PC, #8]
0x24B8	0x8800    LDRH	R0, [R0, #0]
;__Lib_TFT.c, 134 :: 		
L_end_Is_TFT_Set:
0x24BA	0xB001    ADD	SP, SP, #4
0x24BC	0x4770    BX	LR
0x24BE	0xBF00    NOP
0x24C0	0x00342000  	__Lib_TFT_Ptr_Set+0
; end of _Is_TFT_Set
_TFT_Set_Pen:
;__Lib_TFT.c, 160 :: 		
; pen_width start address is: 4 (R1)
; pen_color start address is: 0 (R0)
0x249C	0xB081    SUB	SP, SP, #4
; pen_width end address is: 4 (R1)
; pen_color end address is: 0 (R0)
; pen_color start address is: 0 (R0)
; pen_width start address is: 4 (R1)
;__Lib_TFT.c, 161 :: 		
0x249E	0x4A03    LDR	R2, [PC, #12]
0x24A0	0x8010    STRH	R0, [R2, #0]
; pen_color end address is: 0 (R0)
;__Lib_TFT.c, 166 :: 		
0x24A2	0x4A03    LDR	R2, [PC, #12]
0x24A4	0x7011    STRB	R1, [R2, #0]
; pen_width end address is: 4 (R1)
;__Lib_TFT.c, 167 :: 		
L_end_TFT_Set_Pen:
0x24A6	0xB001    ADD	SP, SP, #4
0x24A8	0x4770    BX	LR
0x24AA	0xBF00    NOP
0x24AC	0x00C02000  	__Lib_TFT_PenColor+0
0x24B0	0x00B22000  	__Lib_TFT_PenWidth+0
; end of _TFT_Set_Pen
_TFT_Set_Brush:
;__Lib_TFT.c, 183 :: 		
; gradient_orientation start address is: 12 (R3)
; gradient_enabled start address is: 8 (R2)
; brush_color start address is: 4 (R1)
; brush_enabled start address is: 0 (R0)
0x1A24	0xB081    SUB	SP, SP, #4
; gradient_orientation end address is: 12 (R3)
; gradient_enabled end address is: 8 (R2)
; brush_color end address is: 4 (R1)
; brush_enabled end address is: 0 (R0)
; brush_enabled start address is: 0 (R0)
; brush_color start address is: 4 (R1)
; gradient_enabled start address is: 8 (R2)
; gradient_orientation start address is: 12 (R3)
; gradient_color_from start address is: 20 (R5)
0x1A26	0xF8BD5004  LDRH	R5, [SP, #4]
; gradient_color_to start address is: 24 (R6)
0x1A2A	0xF8BD6008  LDRH	R6, [SP, #8]
;__Lib_TFT.c, 184 :: 		
0x1A2E	0x4C07    LDR	R4, [PC, #28]
0x1A30	0x7020    STRB	R0, [R4, #0]
; brush_enabled end address is: 0 (R0)
;__Lib_TFT.c, 185 :: 		
0x1A32	0x4C07    LDR	R4, [PC, #28]
0x1A34	0x8021    STRH	R1, [R4, #0]
; brush_color end address is: 4 (R1)
;__Lib_TFT.c, 186 :: 		
0x1A36	0x4C07    LDR	R4, [PC, #28]
0x1A38	0x7022    STRB	R2, [R4, #0]
; gradient_enabled end address is: 8 (R2)
;__Lib_TFT.c, 187 :: 		
0x1A3A	0x4C07    LDR	R4, [PC, #28]
0x1A3C	0x7023    STRB	R3, [R4, #0]
; gradient_orientation end address is: 12 (R3)
;__Lib_TFT.c, 188 :: 		
0x1A3E	0x4C07    LDR	R4, [PC, #28]
0x1A40	0x8025    STRH	R5, [R4, #0]
; gradient_color_from end address is: 20 (R5)
;__Lib_TFT.c, 189 :: 		
0x1A42	0x4C07    LDR	R4, [PC, #28]
0x1A44	0x8026    STRH	R6, [R4, #0]
; gradient_color_to end address is: 24 (R6)
;__Lib_TFT.c, 190 :: 		
L_end_TFT_Set_Brush:
0x1A46	0xB001    ADD	SP, SP, #4
0x1A48	0x4770    BX	LR
0x1A4A	0xBF00    NOP
0x1A4C	0x00B32000  	__Lib_TFT_BrushEnabled+0
0x1A50	0x00C82000  	__Lib_TFT_BrushColor+0
0x1A54	0x00C22000  	__Lib_TFT_GradientEnabled+0
0x1A58	0x00C32000  	__Lib_TFT_GradientOrientation+0
0x1A5C	0x00C42000  	__Lib_TFT_GradColorFrom+0
0x1A60	0x00C62000  	__Lib_TFT_GradColorTo+0
; end of _TFT_Set_Brush
_TFT_Move_Cursor:
;__Lib_TFT.c, 243 :: 		
; _y start address is: 4 (R1)
; _x start address is: 0 (R0)
0x1A0C	0xB081    SUB	SP, SP, #4
; _y end address is: 4 (R1)
; _x end address is: 0 (R0)
; _x start address is: 0 (R0)
; _y start address is: 4 (R1)
;__Lib_TFT.c, 244 :: 		
0x1A0E	0x4A03    LDR	R2, [PC, #12]
0x1A10	0x8010    STRH	R0, [R2, #0]
; _x end address is: 0 (R0)
;__Lib_TFT.c, 245 :: 		
0x1A12	0x4A03    LDR	R2, [PC, #12]
0x1A14	0x8011    STRH	R1, [R2, #0]
; _y end address is: 4 (R1)
;__Lib_TFT.c, 246 :: 		
L_end_TFT_Move_Cursor:
0x1A16	0xB001    ADD	SP, SP, #4
0x1A18	0x4770    BX	LR
0x1A1A	0xBF00    NOP
0x1A1C	0x00AC2000  	__Lib_TFT_x_cord+0
0x1A20	0x00AA2000  	__Lib_TFT_y_cord+0
; end of _TFT_Move_Cursor
__Lib_TFT_Defs_TFT_Set_DataPort_Direction:
;__Lib_TFT_Defs.c, 149 :: 		static void TFT_Set_DataPort_Direction() {
0x19DC	0xB082    SUB	SP, SP, #8
0x19DE	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_TFT_Defs.c, 151 :: 		MOVW  R1, #lo_addr(TFT_DataPort)
0x19E2	0xF641010C  MOVW	R1, #lo_addr(TFT_DataPort+0)
;__Lib_TFT_Defs.c, 152 :: 		MOVT  R1, #hi_addr(TFT_DataPort)
0x19E6	0xF2C40101  MOVT	R1, #hi_addr(TFT_DataPort+0)
;__Lib_TFT_Defs.c, 156 :: 		GPIO_Config(R1, __controller, _GPIO_CFG_DIGITAL_OUTPUT);    // za  digitalni output
0x19EA	0x4806    LDR	R0, [PC, #24]
0x19EC	0x8800    LDRH	R0, [R0, #0]
0x19EE	0x9101    STR	R1, [SP, #4]
0x19F0	0x4A05    LDR	R2, [PC, #20]
0x19F2	0xB281    UXTH	R1, R0
0x19F4	0x9801    LDR	R0, [SP, #4]
0x19F6	0xF000FC35  BL	_GPIO_Config+0
;__Lib_TFT_Defs.c, 157 :: 		}
L_end_TFT_Set_DataPort_Direction:
0x19FA	0xF8DDE000  LDR	LR, [SP, #0]
0x19FE	0xB002    ADD	SP, SP, #8
0x1A00	0x4770    BX	LR
0x1A02	0xBF00    NOP
0x1A04	0x00382000  	__Lib_TFT_Defs___controller+0
0x1A08	0x00140008  	#524308
; end of __Lib_TFT_Defs_TFT_Set_DataPort_Direction
__Lib_TFT_Defs_TFT_Reset_Device:
;__Lib_TFT_Defs.c, 163 :: 		static void TFT_Reset_Device() {
0x1A64	0xB081    SUB	SP, SP, #4
0x1A66	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_TFT_Defs.c, 164 :: 		TFT_Set_Pin_Directions();
0x1A6A	0xF7FFF84F  BL	__Lib_TFT_Defs_TFT_Set_Pin_Directions+0
;__Lib_TFT_Defs.c, 167 :: 		Delay_100ms();
0x1A6E	0xF7FFF83F  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 168 :: 		TFT_RST = 1;
0x1A72	0x2101    MOVS	R1, #1
0x1A74	0xB249    SXTB	R1, R1
0x1A76	0x4896    LDR	R0, [PC, #600]
0x1A78	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 169 :: 		Delay_100ms();
0x1A7A	0xF7FFF839  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 170 :: 		Delay_100ms();
0x1A7E	0xF7FFF837  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 173 :: 		TFT_Set_Reg(0xEA, 0x00); // PTBA[15:8]
0x1A82	0x2100    MOVS	R1, #0
0x1A84	0x20EA    MOVS	R0, #234
0x1A86	0xF7FEFF17  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 174 :: 		TFT_Set_Reg(0xEB, 0x20); // PTBA[7:0]
0x1A8A	0x2120    MOVS	R1, #32
0x1A8C	0x20EB    MOVS	R0, #235
0x1A8E	0xF7FEFF13  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 175 :: 		TFT_Set_Reg(0xEC, 0x0C); // STBA[15:8]
0x1A92	0x210C    MOVS	R1, #12
0x1A94	0x20EC    MOVS	R0, #236
0x1A96	0xF7FEFF0F  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 176 :: 		TFT_Set_Reg(0xED, 0xC4); // STBA[7:0]
0x1A9A	0x21C4    MOVS	R1, #196
0x1A9C	0x20ED    MOVS	R0, #237
0x1A9E	0xF7FEFF0B  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 177 :: 		TFT_Set_Reg(0xE8, 0x40); // OPON[7:0]
0x1AA2	0x2140    MOVS	R1, #64
0x1AA4	0x20E8    MOVS	R0, #232
0x1AA6	0xF7FEFF07  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 178 :: 		TFT_Set_Reg(0xE9, 0x38); // OPON1[7:0]
0x1AAA	0x2138    MOVS	R1, #56
0x1AAC	0x20E9    MOVS	R0, #233
0x1AAE	0xF7FEFF03  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 179 :: 		TFT_Set_Reg(0xF1, 0x01); // OTPS1B
0x1AB2	0x2101    MOVS	R1, #1
0x1AB4	0x20F1    MOVS	R0, #241
0x1AB6	0xF7FEFEFF  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 180 :: 		TFT_Set_Reg(0xF2, 0x10); // GEN
0x1ABA	0x2110    MOVS	R1, #16
0x1ABC	0x20F2    MOVS	R0, #242
0x1ABE	0xF7FEFEFB  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 181 :: 		TFT_Set_Reg(0x27, 0xA3);
0x1AC2	0x21A3    MOVS	R1, #163
0x1AC4	0x2027    MOVS	R0, #39
0x1AC6	0xF7FEFEF7  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 184 :: 		TFT_Set_Reg(0x40, 0x00); //
0x1ACA	0x2100    MOVS	R1, #0
0x1ACC	0x2040    MOVS	R0, #64
0x1ACE	0xF7FEFEF3  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 185 :: 		TFT_Set_Reg(0x41, 0x00); //
0x1AD2	0x2100    MOVS	R1, #0
0x1AD4	0x2041    MOVS	R0, #65
0x1AD6	0xF7FEFEEF  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 186 :: 		TFT_Set_Reg(0x42, 0x01); //
0x1ADA	0x2101    MOVS	R1, #1
0x1ADC	0x2042    MOVS	R0, #66
0x1ADE	0xF7FEFEEB  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 187 :: 		TFT_Set_Reg(0x43, 0x13); //
0x1AE2	0x2113    MOVS	R1, #19
0x1AE4	0x2043    MOVS	R0, #67
0x1AE6	0xF7FEFEE7  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 188 :: 		TFT_Set_Reg(0x44, 0x10); //
0x1AEA	0x2110    MOVS	R1, #16
0x1AEC	0x2044    MOVS	R0, #68
0x1AEE	0xF7FEFEE3  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 189 :: 		TFT_Set_Reg(0x45, 0x26); //
0x1AF2	0x2126    MOVS	R1, #38
0x1AF4	0x2045    MOVS	R0, #69
0x1AF6	0xF7FEFEDF  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 190 :: 		TFT_Set_Reg(0x46, 0x08); //
0x1AFA	0x2108    MOVS	R1, #8
0x1AFC	0x2046    MOVS	R0, #70
0x1AFE	0xF7FEFEDB  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 191 :: 		TFT_Set_Reg(0x47, 0x51); //
0x1B02	0x2151    MOVS	R1, #81
0x1B04	0x2047    MOVS	R0, #71
0x1B06	0xF7FEFED7  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 192 :: 		TFT_Set_Reg(0x48, 0x02); //
0x1B0A	0x2102    MOVS	R1, #2
0x1B0C	0x2048    MOVS	R0, #72
0x1B0E	0xF7FEFED3  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 193 :: 		TFT_Set_Reg(0x49, 0x12); //
0x1B12	0x2112    MOVS	R1, #18
0x1B14	0x2049    MOVS	R0, #73
0x1B16	0xF7FEFECF  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 194 :: 		TFT_Set_Reg(0x4A, 0x18); //
0x1B1A	0x2118    MOVS	R1, #24
0x1B1C	0x204A    MOVS	R0, #74
0x1B1E	0xF7FEFECB  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 195 :: 		TFT_Set_Reg(0x4B, 0x19); //
0x1B22	0x2119    MOVS	R1, #25
0x1B24	0x204B    MOVS	R0, #75
0x1B26	0xF7FEFEC7  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 196 :: 		TFT_Set_Reg(0x4C, 0x14); //
0x1B2A	0x2114    MOVS	R1, #20
0x1B2C	0x204C    MOVS	R0, #76
0x1B2E	0xF7FEFEC3  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 198 :: 		TFT_Set_Reg(0x50, 0x19); //
0x1B32	0x2119    MOVS	R1, #25
0x1B34	0x2050    MOVS	R0, #80
0x1B36	0xF7FEFEBF  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 199 :: 		TFT_Set_Reg(0x51, 0x2F); //
0x1B3A	0x212F    MOVS	R1, #47
0x1B3C	0x2051    MOVS	R0, #81
0x1B3E	0xF7FEFEBB  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 200 :: 		TFT_Set_Reg(0x52, 0x2C); //
0x1B42	0x212C    MOVS	R1, #44
0x1B44	0x2052    MOVS	R0, #82
0x1B46	0xF7FEFEB7  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 201 :: 		TFT_Set_Reg(0x53, 0x3E); //
0x1B4A	0x213E    MOVS	R1, #62
0x1B4C	0x2053    MOVS	R0, #83
0x1B4E	0xF7FEFEB3  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 202 :: 		TFT_Set_Reg(0x54, 0x3F); //
0x1B52	0x213F    MOVS	R1, #63
0x1B54	0x2054    MOVS	R0, #84
0x1B56	0xF7FEFEAF  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 203 :: 		TFT_Set_Reg(0x55, 0x3F); //
0x1B5A	0x213F    MOVS	R1, #63
0x1B5C	0x2055    MOVS	R0, #85
0x1B5E	0xF7FEFEAB  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 204 :: 		TFT_Set_Reg(0x56, 0x2E); //
0x1B62	0x212E    MOVS	R1, #46
0x1B64	0x2056    MOVS	R0, #86
0x1B66	0xF7FEFEA7  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 205 :: 		TFT_Set_Reg(0x57, 0x77); //
0x1B6A	0x2177    MOVS	R1, #119
0x1B6C	0x2057    MOVS	R0, #87
0x1B6E	0xF7FEFEA3  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 206 :: 		TFT_Set_Reg(0x58, 0x0B); //
0x1B72	0x210B    MOVS	R1, #11
0x1B74	0x2058    MOVS	R0, #88
0x1B76	0xF7FEFE9F  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 207 :: 		TFT_Set_Reg(0x59, 0x06); //
0x1B7A	0x2106    MOVS	R1, #6
0x1B7C	0x2059    MOVS	R0, #89
0x1B7E	0xF7FEFE9B  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 208 :: 		TFT_Set_Reg(0x5A, 0x07); //
0x1B82	0x2107    MOVS	R1, #7
0x1B84	0x205A    MOVS	R0, #90
0x1B86	0xF7FEFE97  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 209 :: 		TFT_Set_Reg(0x5B, 0x0D); //
0x1B8A	0x210D    MOVS	R1, #13
0x1B8C	0x205B    MOVS	R0, #91
0x1B8E	0xF7FEFE93  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 210 :: 		TFT_Set_Reg(0x5C, 0x1D); //
0x1B92	0x211D    MOVS	R1, #29
0x1B94	0x205C    MOVS	R0, #92
0x1B96	0xF7FEFE8F  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 211 :: 		TFT_Set_Reg(0x5D, 0xCC); //
0x1B9A	0x21CC    MOVS	R1, #204
0x1B9C	0x205D    MOVS	R0, #93
0x1B9E	0xF7FEFE8B  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 214 :: 		if (TFT_Disp_Rotation == 90) {
0x1BA2	0x484C    LDR	R0, [PC, #304]
0x1BA4	0x7800    LDRB	R0, [R0, #0]
0x1BA6	0x285A    CMP	R0, #90
0x1BA8	0xD110    BNE	L___Lib_TFT_Defs_TFT_Reset_Device0
;__Lib_TFT_Defs.c, 215 :: 		TFT_Set_Reg(0x04, 0x00);
0x1BAA	0x2100    MOVS	R1, #0
0x1BAC	0x2004    MOVS	R0, #4
0x1BAE	0xF7FEFE83  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 216 :: 		TFT_Set_Reg(0x05, 0xEF);
0x1BB2	0x21EF    MOVS	R1, #239
0x1BB4	0x2005    MOVS	R0, #5
0x1BB6	0xF7FEFE7F  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 217 :: 		TFT_Set_Reg(0x08, 0x01);
0x1BBA	0x2101    MOVS	R1, #1
0x1BBC	0x2008    MOVS	R0, #8
0x1BBE	0xF7FEFE7B  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 218 :: 		TFT_Set_Reg(0x09, 0x3F);
0x1BC2	0x213F    MOVS	R1, #63
0x1BC4	0x2009    MOVS	R0, #9
0x1BC6	0xF7FEFE77  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 219 :: 		} else {
0x1BCA	0xE00F    B	L___Lib_TFT_Defs_TFT_Reset_Device1
L___Lib_TFT_Defs_TFT_Reset_Device0:
;__Lib_TFT_Defs.c, 220 :: 		TFT_Set_Reg(0x04, 0x01);
0x1BCC	0x2101    MOVS	R1, #1
0x1BCE	0x2004    MOVS	R0, #4
0x1BD0	0xF7FEFE72  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 221 :: 		TFT_Set_Reg(0x05, 0x3F);
0x1BD4	0x213F    MOVS	R1, #63
0x1BD6	0x2005    MOVS	R0, #5
0x1BD8	0xF7FEFE6E  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 222 :: 		TFT_Set_Reg(0x08, 0x00);
0x1BDC	0x2100    MOVS	R1, #0
0x1BDE	0x2008    MOVS	R0, #8
0x1BE0	0xF7FEFE6A  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 223 :: 		TFT_Set_Reg(0x09, 0xEF);
0x1BE4	0x21EF    MOVS	R1, #239
0x1BE6	0x2009    MOVS	R0, #9
0x1BE8	0xF7FEFE66  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 224 :: 		}
L___Lib_TFT_Defs_TFT_Reset_Device1:
;__Lib_TFT_Defs.c, 226 :: 		if (TFT_Disp_Rotation == 90) {
0x1BEC	0x4839    LDR	R0, [PC, #228]
0x1BEE	0x7800    LDRB	R0, [R0, #0]
0x1BF0	0x285A    CMP	R0, #90
0x1BF2	0xD10C    BNE	L___Lib_TFT_Defs_TFT_Reset_Device2
;__Lib_TFT_Defs.c, 227 :: 		if (Is_TFT_Rotated_180())
0x1BF4	0xF7FEFC4C  BL	_Is_TFT_Rotated_180+0
0x1BF8	0xB120    CBZ	R0, L___Lib_TFT_Defs_TFT_Reset_Device3
;__Lib_TFT_Defs.c, 228 :: 		TFT_Set_Reg(0x16, 0xC8); // MY=1, MX=1, MV=0, BGR=1
0x1BFA	0x21C8    MOVS	R1, #200
0x1BFC	0x2016    MOVS	R0, #22
0x1BFE	0xF7FEFE5B  BL	_TFT_Set_Reg+0
0x1C02	0xE003    B	L___Lib_TFT_Defs_TFT_Reset_Device4
L___Lib_TFT_Defs_TFT_Reset_Device3:
;__Lib_TFT_Defs.c, 230 :: 		TFT_Set_Reg(0x16, 0x08); // MY=0, MX=0, MV=0, BGR=1
0x1C04	0x2108    MOVS	R1, #8
0x1C06	0x2016    MOVS	R0, #22
0x1C08	0xF7FEFE56  BL	_TFT_Set_Reg+0
L___Lib_TFT_Defs_TFT_Reset_Device4:
;__Lib_TFT_Defs.c, 231 :: 		} else {
0x1C0C	0xE00B    B	L___Lib_TFT_Defs_TFT_Reset_Device5
L___Lib_TFT_Defs_TFT_Reset_Device2:
;__Lib_TFT_Defs.c, 232 :: 		if (Is_TFT_Rotated_180())
0x1C0E	0xF7FEFC3F  BL	_Is_TFT_Rotated_180+0
0x1C12	0xB120    CBZ	R0, L___Lib_TFT_Defs_TFT_Reset_Device6
;__Lib_TFT_Defs.c, 233 :: 		TFT_Set_Reg(0x16, 0xA8); // MY=0, MX=1, MV=1, BGR=1
0x1C14	0x21A8    MOVS	R1, #168
0x1C16	0x2016    MOVS	R0, #22
0x1C18	0xF7FEFE4E  BL	_TFT_Set_Reg+0
0x1C1C	0xE003    B	L___Lib_TFT_Defs_TFT_Reset_Device7
L___Lib_TFT_Defs_TFT_Reset_Device6:
;__Lib_TFT_Defs.c, 235 :: 		TFT_Set_Reg(0x16, 0x68); // MY=1, MX=0, MV=1, BGR=1
0x1C1E	0x2168    MOVS	R1, #104
0x1C20	0x2016    MOVS	R0, #22
0x1C22	0xF7FEFE49  BL	_TFT_Set_Reg+0
L___Lib_TFT_Defs_TFT_Reset_Device7:
;__Lib_TFT_Defs.c, 236 :: 		}
L___Lib_TFT_Defs_TFT_Reset_Device5:
;__Lib_TFT_Defs.c, 239 :: 		TFT_Set_Reg(0x1B, 0x1B); // VRH = 4.65
0x1C26	0x211B    MOVS	R1, #27
0x1C28	0x201B    MOVS	R0, #27
0x1C2A	0xF7FEFE45  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 240 :: 		TFT_Set_Reg(0x1A, 0x01); // BT
0x1C2E	0x2101    MOVS	R1, #1
0x1C30	0x201A    MOVS	R0, #26
0x1C32	0xF7FEFE41  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 241 :: 		TFT_Set_Reg(0x24, 0x2F); // VMH
0x1C36	0x212F    MOVS	R1, #47
0x1C38	0x2024    MOVS	R0, #36
0x1C3A	0xF7FEFE3D  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 242 :: 		TFT_Set_Reg(0x25, 0x57); // VML
0x1C3E	0x2157    MOVS	R1, #87
0x1C40	0x2025    MOVS	R0, #37
0x1C42	0xF7FEFE39  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 245 :: 		TFT_Set_Reg(0x23, 0x8D); // FLICKER ADJUST
0x1C46	0x218D    MOVS	R1, #141
0x1C48	0x2023    MOVS	R0, #35
0x1C4A	0xF7FEFE35  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 248 :: 		TFT_Set_Reg(0x18, 0x36);
0x1C4E	0x2136    MOVS	R1, #54
0x1C50	0x2018    MOVS	R0, #24
0x1C52	0xF7FEFE31  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 249 :: 		TFT_Set_Reg(0x19, 0x01);
0x1C56	0x2101    MOVS	R1, #1
0x1C58	0x2019    MOVS	R0, #25
0x1C5A	0xF7FEFE2D  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 250 :: 		TFT_Set_Reg(0x01, 0x00);
0x1C5E	0x2100    MOVS	R1, #0
0x1C60	0x2001    MOVS	R0, #1
0x1C62	0xF7FEFE29  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 251 :: 		TFT_Set_Reg(0x1F, 0x88);
0x1C66	0x2188    MOVS	R1, #136
0x1C68	0x201F    MOVS	R0, #31
0x1C6A	0xF7FEFE25  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 252 :: 		Delay_5ms();
0x1C6E	0xF7FEFD5F  BL	_Delay_5ms+0
;__Lib_TFT_Defs.c, 253 :: 		TFT_Set_Reg(0x1F, 0x80);
0x1C72	0x2180    MOVS	R1, #128
0x1C74	0x201F    MOVS	R0, #31
0x1C76	0xF7FEFE1F  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 254 :: 		Delay_5ms();
0x1C7A	0xF7FEFD59  BL	_Delay_5ms+0
;__Lib_TFT_Defs.c, 255 :: 		TFT_Set_Reg(0x1F, 0x90);
0x1C7E	0x2190    MOVS	R1, #144
0x1C80	0x201F    MOVS	R0, #31
0x1C82	0xF7FEFE19  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 256 :: 		Delay_5ms();
0x1C86	0xF7FEFD53  BL	_Delay_5ms+0
;__Lib_TFT_Defs.c, 257 :: 		TFT_Set_Reg(0x1F, 0xD0);
0x1C8A	0x21D0    MOVS	R1, #208
0x1C8C	0x201F    MOVS	R0, #31
0x1C8E	0xF7FEFE13  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 258 :: 		Delay_5ms();
0x1C92	0xF7FEFD4D  BL	_Delay_5ms+0
;__Lib_TFT_Defs.c, 260 :: 		TFT_Set_Reg(0x17, 0x05);
0x1C96	0x2105    MOVS	R1, #5
0x1C98	0x2017    MOVS	R0, #23
0x1C9A	0xF7FEFE0D  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 262 :: 		TFT_Set_Reg(0x36, 0x00); // Panel characteristic control register
0x1C9E	0x2100    MOVS	R1, #0
0x1CA0	0x2036    MOVS	R0, #54
0x1CA2	0xF7FEFE09  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 264 :: 		TFT_Set_Reg(0x28, 0x38);
0x1CA6	0x2138    MOVS	R1, #56
0x1CA8	0x2028    MOVS	R0, #40
0x1CAA	0xF7FEFE05  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 265 :: 		Delay_10ms();
0x1CAE	0xF7FEFDBB  BL	_Delay_10ms+0
;__Lib_TFT_Defs.c, 266 :: 		Delay_10ms();
0x1CB2	0xF7FEFDB9  BL	_Delay_10ms+0
;__Lib_TFT_Defs.c, 267 :: 		Delay_10ms();
0x1CB6	0xF7FEFDB7  BL	_Delay_10ms+0
;__Lib_TFT_Defs.c, 268 :: 		Delay_10ms();
0x1CBA	0xF7FEFDB5  BL	_Delay_10ms+0
;__Lib_TFT_Defs.c, 269 :: 		TFT_Set_Reg(0x28, 0x3C);
0x1CBE	0x213C    MOVS	R1, #60
0x1CC0	0x2028    MOVS	R0, #40
0x1CC2	0xF7FEFDF9  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 270 :: 		}
L_end_TFT_Reset_Device:
0x1CC6	0xF8DDE000  LDR	LR, [SP, #0]
0x1CCA	0xB001    ADD	SP, SP, #4
0x1CCC	0x4770    BX	LR
0x1CCE	0xBF00    NOP
0x1CD0	0x01A04223  	TFT_RST+0
0x1CD4	0x00372000  	__Lib_TFT_Defs_TFT_Disp_Rotation+0
; end of __Lib_TFT_Defs_TFT_Reset_Device
__Lib_TFT_Defs_TFT_Set_Pin_Directions:
;__Lib_TFT_Defs.c, 86 :: 		static void TFT_Set_Pin_Directions() {
0x0B0C	0xB081    SUB	SP, SP, #4
0x0B0E	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_TFT_Defs.c, 89 :: 		MOVW  R0, #lo_addr(TFT_RST)
0x0B12	0xF641000C  MOVW	R0, #lo_addr(TFT_RST+0)
;__Lib_TFT_Defs.c, 90 :: 		MOVT  R0, #hi_addr(TFT_RST)
0x0B16	0xF2C40001  MOVT	R0, #hi_addr(TFT_RST+0)
;__Lib_TFT_Defs.c, 91 :: 		MOV   R1, #1
0x0B1A	0xF04F0101  MOV	R1, #1
;__Lib_TFT_Defs.c, 92 :: 		LSL   R1, R1, #bitPos(TFT_RST)
0x0B1E	0xEA4F2101  LSL	R1, R1, BitPos(TFT_RST+0)
;__Lib_TFT_Defs.c, 94 :: 		GPIO_Config(R0, R1, _GPIO_CFG_DIGITAL_OUTPUT);
0x0B22	0x4A25    LDR	R2, [PC, #148]
0x0B24	0xB289    UXTH	R1, R1
0x0B26	0xF001FB9D  BL	_GPIO_Config+0
;__Lib_TFT_Defs.c, 97 :: 		TFT_RST = 0;
0x0B2A	0x2100    MOVS	R1, #0
0x0B2C	0xB249    SXTB	R1, R1
0x0B2E	0x4823    LDR	R0, [PC, #140]
0x0B30	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 101 :: 		MOVW  R0, #lo_addr(TFT_RS)
0x0B32	0xF641000C  MOVW	R0, #lo_addr(TFT_RS+0)
;__Lib_TFT_Defs.c, 102 :: 		MOVT  R0, #hi_addr(TFT_RS)
0x0B36	0xF2C40001  MOVT	R0, #hi_addr(TFT_RS+0)
;__Lib_TFT_Defs.c, 103 :: 		MOV   R1, #1
0x0B3A	0xF04F0101  MOV	R1, #1
;__Lib_TFT_Defs.c, 104 :: 		LSL   R1, R1, #bitPos(TFT_RS)
0x0B3E	0xEA4F3101  LSL	R1, R1, BitPos(TFT_RS+0)
;__Lib_TFT_Defs.c, 106 :: 		GPIO_Config(R0, R1, _GPIO_CFG_DIGITAL_OUTPUT);
0x0B42	0x4A1D    LDR	R2, [PC, #116]
0x0B44	0xB289    UXTH	R1, R1
0x0B46	0xF001FB8D  BL	_GPIO_Config+0
;__Lib_TFT_Defs.c, 109 :: 		TFT_RS = 1;
0x0B4A	0x2101    MOVS	R1, #1
0x0B4C	0xB249    SXTB	R1, R1
0x0B4E	0x481C    LDR	R0, [PC, #112]
0x0B50	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 113 :: 		MOVW  R0, #lo_addr(TFT_CS)
0x0B52	0xF641000C  MOVW	R0, #lo_addr(TFT_CS+0)
;__Lib_TFT_Defs.c, 114 :: 		MOVT  R0, #hi_addr(TFT_CS)
0x0B56	0xF2C40001  MOVT	R0, #hi_addr(TFT_CS+0)
;__Lib_TFT_Defs.c, 115 :: 		MOV   R1, #1
0x0B5A	0xF04F0101  MOV	R1, #1
;__Lib_TFT_Defs.c, 116 :: 		LSL   R1, R1, #bitPos(TFT_CS)
0x0B5E	0xEA4F31C1  LSL	R1, R1, BitPos(TFT_CS+0)
;__Lib_TFT_Defs.c, 118 :: 		GPIO_Config(R0, R1, _GPIO_CFG_DIGITAL_OUTPUT);
0x0B62	0x4A15    LDR	R2, [PC, #84]
0x0B64	0xB289    UXTH	R1, R1
0x0B66	0xF001FB7D  BL	_GPIO_Config+0
;__Lib_TFT_Defs.c, 121 :: 		TFT_CS = 1;
0x0B6A	0x2101    MOVS	R1, #1
0x0B6C	0xB249    SXTB	R1, R1
0x0B6E	0x4815    LDR	R0, [PC, #84]
0x0B70	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 125 :: 		MOVW  R0, #lo_addr(TFT_RD)
0x0B72	0xF641000C  MOVW	R0, #lo_addr(TFT_RD+0)
;__Lib_TFT_Defs.c, 126 :: 		MOVT  R0, #hi_addr(TFT_RD)
0x0B76	0xF2C40001  MOVT	R0, #hi_addr(TFT_RD+0)
;__Lib_TFT_Defs.c, 127 :: 		MOV   R1, #1
0x0B7A	0xF04F0101  MOV	R1, #1
;__Lib_TFT_Defs.c, 128 :: 		LSL   R1, R1, #bitPos(TFT_RD)
0x0B7E	0xEA4F2181  LSL	R1, R1, BitPos(TFT_RD+0)
;__Lib_TFT_Defs.c, 130 :: 		GPIO_Config(R0, R1, _GPIO_CFG_DIGITAL_OUTPUT);
0x0B82	0x4A0D    LDR	R2, [PC, #52]
0x0B84	0xB289    UXTH	R1, R1
0x0B86	0xF001FB6D  BL	_GPIO_Config+0
;__Lib_TFT_Defs.c, 134 :: 		MOVW  R0, #lo_addr(TFT_WR)
0x0B8A	0xF641000C  MOVW	R0, #lo_addr(TFT_WR+0)
;__Lib_TFT_Defs.c, 135 :: 		MOVT  R0, #hi_addr(TFT_WR)
0x0B8E	0xF2C40001  MOVT	R0, #hi_addr(TFT_WR+0)
;__Lib_TFT_Defs.c, 136 :: 		MOV   R1, #1
0x0B92	0xF04F0101  MOV	R1, #1
;__Lib_TFT_Defs.c, 137 :: 		LSL   R1, R1, #bitPos(TFT_WR)
0x0B96	0xEA4F21C1  LSL	R1, R1, BitPos(TFT_WR+0)
;__Lib_TFT_Defs.c, 139 :: 		GPIO_Config(R0, R1, _GPIO_CFG_DIGITAL_OUTPUT);
0x0B9A	0x4A07    LDR	R2, [PC, #28]
0x0B9C	0xB289    UXTH	R1, R1
0x0B9E	0xF001FB61  BL	_GPIO_Config+0
;__Lib_TFT_Defs.c, 141 :: 		TFT_RD = 1;
0x0BA2	0x2101    MOVS	R1, #1
0x0BA4	0xB249    SXTB	R1, R1
0x0BA6	0x4808    LDR	R0, [PC, #32]
0x0BA8	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 142 :: 		TFT_WR = 1;
0x0BAA	0x4808    LDR	R0, [PC, #32]
0x0BAC	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 143 :: 		}
L_end_TFT_Set_Pin_Directions:
0x0BAE	0xF8DDE000  LDR	LR, [SP, #0]
0x0BB2	0xB001    ADD	SP, SP, #4
0x0BB4	0x4770    BX	LR
0x0BB6	0xBF00    NOP
0x0BB8	0x00140008  	#524308
0x0BBC	0x01A04223  	TFT_RST+0
0x0BC0	0x01B04223  	TFT_RS+0
0x0BC4	0x01BC4223  	TFT_CS+0
0x0BC8	0x01A84223  	TFT_RD+0
0x0BCC	0x01AC4223  	TFT_WR+0
; end of __Lib_TFT_Defs_TFT_Set_Pin_Directions
_Delay_100ms:
;__Lib_Delays.c, 53 :: 		void Delay_100ms() {
0x0AF0	0xB081    SUB	SP, SP, #4
;__Lib_Delays.c, 54 :: 		Delay_ms(100);
0x0AF2	0xF644777F  MOVW	R7, #20351
0x0AF6	0xF2C00712  MOVT	R7, #18
L_Delay_100ms20:
0x0AFA	0x1E7F    SUBS	R7, R7, #1
0x0AFC	0xD1FD    BNE	L_Delay_100ms20
0x0AFE	0xBF00    NOP
0x0B00	0xBF00    NOP
0x0B02	0xBF00    NOP
0x0B04	0xBF00    NOP
0x0B06	0xBF00    NOP
;__Lib_Delays.c, 55 :: 		}
L_end_Delay_100ms:
0x0B08	0xB001    ADD	SP, SP, #4
0x0B0A	0x4770    BX	LR
; end of _Delay_100ms
_TFT_Set_Reg:
;__Lib_TFT_Defs.c, 75 :: 		void TFT_Set_Reg(unsigned short index, unsigned short value) {
; index start address is: 0 (R0)
0x08B8	0xB082    SUB	SP, SP, #8
0x08BA	0xF8CDE000  STR	LR, [SP, #0]
0x08BE	0xF88D1004  STRB	R1, [SP, #4]
; index end address is: 0 (R0)
; index start address is: 0 (R0)
;__Lib_TFT_Defs.c, 76 :: 		TFT_CS = 0;
0x08C2	0x2300    MOVS	R3, #0
0x08C4	0xB25B    SXTB	R3, R3
0x08C6	0x4A09    LDR	R2, [PC, #36]
0x08C8	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 77 :: 		TFT_Set_Index_Ptr(index);
; index end address is: 0 (R0)
0x08CA	0x4C09    LDR	R4, [PC, #36]
0x08CC	0x6824    LDR	R4, [R4, #0]
0x08CE	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 78 :: 		TFT_Write_Command_Ptr(value);
0x08D0	0xF89D0004  LDRB	R0, [SP, #4]
0x08D4	0x4C07    LDR	R4, [PC, #28]
0x08D6	0x6824    LDR	R4, [R4, #0]
0x08D8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 79 :: 		TFT_CS = 1;
0x08DA	0x2301    MOVS	R3, #1
0x08DC	0xB25B    SXTB	R3, R3
0x08DE	0x4A03    LDR	R2, [PC, #12]
0x08E0	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 80 :: 		}
L_end_TFT_Set_Reg:
0x08E2	0xF8DDE000  LDR	LR, [SP, #0]
0x08E6	0xB002    ADD	SP, SP, #8
0x08E8	0x4770    BX	LR
0x08EA	0xBF00    NOP
0x08EC	0x01BC4223  	TFT_CS+0
0x08F0	0x00DC2000  	_TFT_Set_Index_Ptr+0
0x08F4	0x00E02000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Reg
_TFT_Set_Index:
;__Lib_TFT_Defs.c, 54 :: 		void TFT_Set_Index(unsigned short index) {
; index start address is: 0 (R0)
0x01DC	0xB081    SUB	SP, SP, #4
0x01DE	0xF8CDE000  STR	LR, [SP, #0]
; index end address is: 0 (R0)
; index start address is: 0 (R0)
;__Lib_TFT_Defs.c, 55 :: 		TFT_RS = 0;
0x01E2	0x2200    MOVS	R2, #0
0x01E4	0xB252    SXTB	R2, R2
0x01E6	0x4908    LDR	R1, [PC, #32]
0x01E8	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 56 :: 		Write_to_Port(index);
; index end address is: 0 (R0)
0x01EA	0xF7FFFFB1  BL	__Lib_TFT_Defs_Write_to_Port+0
;__Lib_TFT_Defs.c, 57 :: 		TFT_Write_Strobe();
0x01EE	0x2200    MOVS	R2, #0
0x01F0	0xB252    SXTB	R2, R2
0x01F2	0x4906    LDR	R1, [PC, #24]
0x01F4	0x600A    STR	R2, [R1, #0]
0x01F6	0xBF00    NOP
0x01F8	0x2201    MOVS	R2, #1
0x01FA	0xB252    SXTB	R2, R2
0x01FC	0x4903    LDR	R1, [PC, #12]
0x01FE	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 58 :: 		}
L_end_TFT_Set_Index:
0x0200	0xF8DDE000  LDR	LR, [SP, #0]
0x0204	0xB001    ADD	SP, SP, #4
0x0206	0x4770    BX	LR
0x0208	0x01B04223  	TFT_RS+0
0x020C	0x01AC4223  	TFT_WR+0
; end of _TFT_Set_Index
__Lib_TFT_Defs_Write_to_Port:
;__Lib_TFT_Defs.c, 43 :: 		static void Write_to_Port(char value) {
; value start address is: 0 (R0)
0x0150	0xB081    SUB	SP, SP, #4
; value end address is: 0 (R0)
; value start address is: 0 (R0)
;__Lib_TFT_Defs.c, 46 :: 		temp &= 0xFF00;
0x0152	0x4A05    LDR	R2, [PC, #20]
0x0154	0x8811    LDRH	R1, [R2, #0]
0x0156	0xF401417F  AND	R1, R1, #65280
0x015A	0xB289    UXTH	R1, R1
;__Lib_TFT_Defs.c, 47 :: 		TFT_DataPort = value | temp;
0x015C	0xEA400101  ORR	R1, R0, R1, LSL #0
; value end address is: 0 (R0)
0x0160	0x8011    STRH	R1, [R2, #0]
;__Lib_TFT_Defs.c, 48 :: 		}
L_end_Write_to_Port:
0x0162	0xB001    ADD	SP, SP, #4
0x0164	0x4770    BX	LR
0x0166	0xBF00    NOP
0x0168	0x180C4001  	TFT_DataPort+0
; end of __Lib_TFT_Defs_Write_to_Port
_TFT_Write_Command:
;__Lib_TFT_Defs.c, 64 :: 		void TFT_Write_Command(unsigned short cmd) {
; cmd start address is: 0 (R0)
0x018C	0xB081    SUB	SP, SP, #4
0x018E	0xF8CDE000  STR	LR, [SP, #0]
; cmd end address is: 0 (R0)
; cmd start address is: 0 (R0)
;__Lib_TFT_Defs.c, 65 :: 		TFT_RS = 1;
0x0192	0x2201    MOVS	R2, #1
0x0194	0xB252    SXTB	R2, R2
0x0196	0x4908    LDR	R1, [PC, #32]
0x0198	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 66 :: 		Write_to_Port(cmd);
; cmd end address is: 0 (R0)
0x019A	0xF7FFFFD9  BL	__Lib_TFT_Defs_Write_to_Port+0
;__Lib_TFT_Defs.c, 67 :: 		TFT_Write_Strobe();
0x019E	0x2200    MOVS	R2, #0
0x01A0	0xB252    SXTB	R2, R2
0x01A2	0x4906    LDR	R1, [PC, #24]
0x01A4	0x600A    STR	R2, [R1, #0]
0x01A6	0xBF00    NOP
0x01A8	0x2201    MOVS	R2, #1
0x01AA	0xB252    SXTB	R2, R2
0x01AC	0x4903    LDR	R1, [PC, #12]
0x01AE	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 68 :: 		}
L_end_TFT_Write_Command:
0x01B0	0xF8DDE000  LDR	LR, [SP, #0]
0x01B4	0xB001    ADD	SP, SP, #4
0x01B6	0x4770    BX	LR
0x01B8	0x01B04223  	TFT_RS+0
0x01BC	0x01AC4223  	TFT_WR+0
; end of _TFT_Write_Command
_TFT_SSD1963_8bit_Set_Index:
;__Lib_TFT_Defs.c, 2883 :: 		void TFT_SSD1963_8bit_Set_Index(unsigned short index) {
; index start address is: 0 (R0)
0x0288	0xB082    SUB	SP, SP, #8
0x028A	0xF8CDE000  STR	LR, [SP, #0]
; index end address is: 0 (R0)
; index start address is: 0 (R0)
;__Lib_TFT_Defs.c, 2884 :: 		Delay_1us(); Delay_1us();
0x028E	0xF7FFFF6F  BL	_Delay_1us+0
0x0292	0xF7FFFF6D  BL	_Delay_1us+0
;__Lib_TFT_Defs.c, 2885 :: 		TFT_CS = 0;
0x0296	0x2300    MOVS	R3, #0
0x0298	0xB25B    SXTB	R3, R3
0x029A	0x490C    LDR	R1, [PC, #48]
0x029C	0x9101    STR	R1, [SP, #4]
0x029E	0x600B    STR	R3, [R1, #0]
;__Lib_TFT_Defs.c, 2886 :: 		TFT_RD = 1;
0x02A0	0x2201    MOVS	R2, #1
0x02A2	0xB252    SXTB	R2, R2
0x02A4	0x490A    LDR	R1, [PC, #40]
0x02A6	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2887 :: 		TFT_RS = 0;
0x02A8	0x490A    LDR	R1, [PC, #40]
0x02AA	0x600B    STR	R3, [R1, #0]
;__Lib_TFT_Defs.c, 2888 :: 		Write_to_Port(index);
; index end address is: 0 (R0)
0x02AC	0xF7FFFF50  BL	__Lib_TFT_Defs_Write_to_Port+0
;__Lib_TFT_Defs.c, 2889 :: 		TFT_WR = 0;
0x02B0	0x2200    MOVS	R2, #0
0x02B2	0xB252    SXTB	R2, R2
0x02B4	0x4908    LDR	R1, [PC, #32]
0x02B6	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2890 :: 		TFT_WR = 1;
0x02B8	0x2201    MOVS	R2, #1
0x02BA	0xB252    SXTB	R2, R2
0x02BC	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2891 :: 		TFT_CS = 1;
0x02BE	0x9901    LDR	R1, [SP, #4]
0x02C0	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2892 :: 		}
L_end_TFT_SSD1963_8bit_Set_Index:
0x02C2	0xF8DDE000  LDR	LR, [SP, #0]
0x02C6	0xB002    ADD	SP, SP, #8
0x02C8	0x4770    BX	LR
0x02CA	0xBF00    NOP
0x02CC	0x01BC4223  	TFT_CS+0
0x02D0	0x01A84223  	TFT_RD+0
0x02D4	0x01B04223  	TFT_RS+0
0x02D8	0x01AC4223  	TFT_WR+0
; end of _TFT_SSD1963_8bit_Set_Index
_Delay_1us:
;__Lib_Delays.c, 13 :: 		void Delay_1us() {
0x0170	0xB081    SUB	SP, SP, #4
;__Lib_Delays.c, 14 :: 		Delay_us(1);
0x0172	0xF240070B  MOVW	R7, #11
0x0176	0xF2C00700  MOVT	R7, #0
L_Delay_1us0:
0x017A	0x1E7F    SUBS	R7, R7, #1
0x017C	0xD1FD    BNE	L_Delay_1us0
0x017E	0xBF00    NOP
0x0180	0xBF00    NOP
0x0182	0xBF00    NOP
0x0184	0xBF00    NOP
0x0186	0xBF00    NOP
;__Lib_Delays.c, 15 :: 		}
L_end_Delay_1us:
0x0188	0xB001    ADD	SP, SP, #4
0x018A	0x4770    BX	LR
; end of _Delay_1us
_TFT_SSD1963YT_8bit_Write_Command:
;__Lib_TFT_Defs.c, 2898 :: 		void TFT_SSD1963YT_8bit_Write_Command(unsigned char command) {
; command start address is: 0 (R0)
0x0210	0xB082    SUB	SP, SP, #8
0x0212	0xF8CDE000  STR	LR, [SP, #0]
; command end address is: 0 (R0)
; command start address is: 0 (R0)
;__Lib_TFT_Defs.c, 2899 :: 		TFT_CS = 0;
0x0216	0x2200    MOVS	R2, #0
0x0218	0xB252    SXTB	R2, R2
0x021A	0x490E    LDR	R1, [PC, #56]
0x021C	0x9101    STR	R1, [SP, #4]
0x021E	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2900 :: 		TFT_RD = 1;
0x0220	0x2201    MOVS	R2, #1
0x0222	0xB252    SXTB	R2, R2
0x0224	0x490C    LDR	R1, [PC, #48]
0x0226	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2901 :: 		TFT_RS = 1;
0x0228	0x490C    LDR	R1, [PC, #48]
0x022A	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2902 :: 		Write_to_Port(command);
; command end address is: 0 (R0)
0x022C	0xF7FFFF90  BL	__Lib_TFT_Defs_Write_to_Port+0
;__Lib_TFT_Defs.c, 2903 :: 		TFT_WR = 0;
0x0230	0x2200    MOVS	R2, #0
0x0232	0xB252    SXTB	R2, R2
0x0234	0x490A    LDR	R1, [PC, #40]
0x0236	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2904 :: 		TFT_WR = 1;
0x0238	0x2201    MOVS	R2, #1
0x023A	0xB252    SXTB	R2, R2
0x023C	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2905 :: 		TFT_CS = 1;
0x023E	0x9901    LDR	R1, [SP, #4]
0x0240	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2906 :: 		Delay_1us(); Delay_1us();
0x0242	0xF7FFFF95  BL	_Delay_1us+0
0x0246	0xF7FFFF93  BL	_Delay_1us+0
;__Lib_TFT_Defs.c, 2907 :: 		}
L_end_TFT_SSD1963YT_8bit_Write_Command:
0x024A	0xF8DDE000  LDR	LR, [SP, #0]
0x024E	0xB002    ADD	SP, SP, #8
0x0250	0x4770    BX	LR
0x0252	0xBF00    NOP
0x0254	0x01BC4223  	TFT_CS+0
0x0258	0x01A84223  	TFT_RD+0
0x025C	0x01B04223  	TFT_RS+0
0x0260	0x01AC4223  	TFT_WR+0
; end of _TFT_SSD1963YT_8bit_Write_Command
_Is_TFT_Rotated_180:
;__Lib_TFT_Defs.c, 25 :: 		char Is_TFT_Rotated_180() {
0x0490	0xB081    SUB	SP, SP, #4
;__Lib_TFT_Defs.c, 26 :: 		return TFT_Rotated_180;
0x0492	0x4802    LDR	R0, [PC, #8]
0x0494	0x7800    LDRB	R0, [R0, #0]
;__Lib_TFT_Defs.c, 27 :: 		}
L_end_Is_TFT_Rotated_180:
0x0496	0xB001    ADD	SP, SP, #4
0x0498	0x4770    BX	LR
0x049A	0xBF00    NOP
0x049C	0x00362000  	__Lib_TFT_Defs_TFT_Rotated_180+0
; end of _Is_TFT_Rotated_180
_Delay_5ms:
;__Lib_Delays.c, 45 :: 		void Delay_5ms() {
0x0730	0xB081    SUB	SP, SP, #4
;__Lib_Delays.c, 46 :: 		Delay_ms(5);
0x0732	0xF64E275F  MOVW	R7, #59999
0x0736	0xF2C00700  MOVT	R7, #0
L_Delay_5ms16:
0x073A	0x1E7F    SUBS	R7, R7, #1
0x073C	0xD1FD    BNE	L_Delay_5ms16
0x073E	0xBF00    NOP
0x0740	0xBF00    NOP
0x0742	0xBF00    NOP
0x0744	0xBF00    NOP
0x0746	0xBF00    NOP
;__Lib_Delays.c, 47 :: 		}
L_end_Delay_5ms:
0x0748	0xB001    ADD	SP, SP, #4
0x074A	0x4770    BX	LR
; end of _Delay_5ms
_Delay_10ms:
;__Lib_Delays.c, 57 :: 		void Delay_10ms() {
0x0828	0xB081    SUB	SP, SP, #4
;__Lib_Delays.c, 58 :: 		Delay_ms(10);
0x082A	0xF24D47BF  MOVW	R7, #54463
0x082E	0xF2C00701  MOVT	R7, #1
L_Delay_10ms22:
0x0832	0x1E7F    SUBS	R7, R7, #1
0x0834	0xD1FD    BNE	L_Delay_10ms22
0x0836	0xBF00    NOP
0x0838	0xBF00    NOP
0x083A	0xBF00    NOP
0x083C	0xBF00    NOP
0x083E	0xBF00    NOP
;__Lib_Delays.c, 59 :: 		}
L_end_Delay_10ms:
0x0840	0xB001    ADD	SP, SP, #4
0x0842	0x4770    BX	LR
; end of _Delay_10ms
_TFT_Fill_Screen:
;__Lib_TFT.c, 756 :: 		
0x308C	0xB084    SUB	SP, SP, #16
0x308E	0xF8CDE000  STR	LR, [SP, #0]
0x3092	0xF8AD000C  STRH	R0, [SP, #12]
;__Lib_TFT.c, 758 :: 		
0x3096	0x2200    MOVS	R2, #0
0x3098	0xB252    SXTB	R2, R2
0x309A	0x491A    LDR	R1, [PC, #104]
0x309C	0x600A    STR	R2, [R1, #0]
;__Lib_TFT.c, 759 :: 		
0x309E	0xF7FDFEE9  BL	__Lib_TFT_Is_SSD1963_Set+0
0x30A2	0xB168    CBZ	R0, L_TFT_Fill_Screen78
;__Lib_TFT.c, 760 :: 		
0x30A4	0x4918    LDR	R1, [PC, #96]
0x30A6	0x8809    LDRH	R1, [R1, #0]
0x30A8	0x1E4C    SUBS	R4, R1, #1
0x30AA	0x4918    LDR	R1, [PC, #96]
0x30AC	0x8809    LDRH	R1, [R1, #0]
0x30AE	0x1E49    SUBS	R1, R1, #1
0x30B0	0xB2A3    UXTH	R3, R4
0x30B2	0xB28A    UXTH	R2, R1
0x30B4	0x2100    MOVS	R1, #0
0x30B6	0x2000    MOVS	R0, #0
0x30B8	0x4C15    LDR	R4, [PC, #84]
0x30BA	0x6824    LDR	R4, [R4, #0]
0x30BC	0x47A0    BLX	R4
0x30BE	0xE004    B	L_TFT_Fill_Screen79
L_TFT_Fill_Screen78:
;__Lib_TFT.c, 762 :: 		
0x30C0	0x2100    MOVS	R1, #0
0x30C2	0x2000    MOVS	R0, #0
0x30C4	0x4C13    LDR	R4, [PC, #76]
0x30C6	0x6824    LDR	R4, [R4, #0]
0x30C8	0x47A0    BLX	R4
L_TFT_Fill_Screen79:
;__Lib_TFT.c, 764 :: 		
0x30CA	0x4910    LDR	R1, [PC, #64]
0x30CC	0x880A    LDRH	R2, [R1, #0]
0x30CE	0x490E    LDR	R1, [PC, #56]
0x30D0	0x8809    LDRH	R1, [R1, #0]
0x30D2	0x4351    MULS	R1, R2, R1
0x30D4	0x9102    STR	R1, [SP, #8]
;__Lib_TFT.c, 765 :: 		
0x30D6	0x2100    MOVS	R1, #0
0x30D8	0x9101    STR	R1, [SP, #4]
L_TFT_Fill_Screen80:
0x30DA	0x9A02    LDR	R2, [SP, #8]
0x30DC	0x9901    LDR	R1, [SP, #4]
0x30DE	0x4291    CMP	R1, R2
0x30E0	0xD208    BCS	L_TFT_Fill_Screen81
;__Lib_TFT.c, 766 :: 		
0x30E2	0xF8BD000C  LDRH	R0, [SP, #12]
0x30E6	0x4C0C    LDR	R4, [PC, #48]
0x30E8	0x6824    LDR	R4, [R4, #0]
0x30EA	0x47A0    BLX	R4
;__Lib_TFT.c, 765 :: 		
0x30EC	0x9901    LDR	R1, [SP, #4]
0x30EE	0x1C49    ADDS	R1, R1, #1
0x30F0	0x9101    STR	R1, [SP, #4]
;__Lib_TFT.c, 766 :: 		
0x30F2	0xE7F2    B	L_TFT_Fill_Screen80
L_TFT_Fill_Screen81:
;__Lib_TFT.c, 767 :: 		
0x30F4	0x2201    MOVS	R2, #1
0x30F6	0xB252    SXTB	R2, R2
0x30F8	0x4902    LDR	R1, [PC, #8]
0x30FA	0x600A    STR	R2, [R1, #0]
;__Lib_TFT.c, 768 :: 		
L_end_TFT_Fill_Screen:
0x30FC	0xF8DDE000  LDR	LR, [SP, #0]
0x3100	0xB004    ADD	SP, SP, #16
0x3102	0x4770    BX	LR
0x3104	0x01BC4223  	TFT_CS+0
0x3108	0x00B02000  	_TFT_DISP_HEIGHT+0
0x310C	0x00AE2000  	_TFT_DISP_WIDTH+0
0x3110	0x00B42000  	_TFT_SSD1963_Set_Address_Ptr+0
0x3114	0x00B82000  	_TFT_Set_Address_Ptr+0
0x3118	0x00BC2000  	_TFT_Write_Data_Ptr+0
; end of _TFT_Fill_Screen
_TFT_Set_Address_SSD1963II:
;__Lib_TFT_Defs.c, 2374 :: 		void TFT_Set_Address_SSD1963II(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
; y2 start address is: 12 (R3)
; x2 start address is: 8 (R2)
; y1 start address is: 4 (R1)
; x1 start address is: 0 (R0)
0x1D50	0xB083    SUB	SP, SP, #12
0x1D52	0xF8CDE000  STR	LR, [SP, #0]
0x1D56	0xB29E    UXTH	R6, R3
0x1D58	0xB293    UXTH	R3, R2
0x1D5A	0xB28A    UXTH	R2, R1
0x1D5C	0xB281    UXTH	R1, R0
; y2 end address is: 12 (R3)
; x2 end address is: 8 (R2)
; y1 end address is: 4 (R1)
; x1 end address is: 0 (R0)
; x1 start address is: 4 (R1)
; y1 start address is: 8 (R2)
; x2 start address is: 12 (R3)
; y2 start address is: 24 (R6)
;__Lib_TFT_Defs.c, 2379 :: 		if ((TFT_DISP_WIDTH > 480) || (TFT_DISP_HEIGHT > 480)) {
0x1D5E	0x4C49    LDR	R4, [PC, #292]
0x1D60	0x8824    LDRH	R4, [R4, #0]
0x1D62	0xF5B47FF0  CMP	R4, #480
0x1D66	0xD805    BHI	L__TFT_Set_Address_SSD1963II194
0x1D68	0x4C47    LDR	R4, [PC, #284]
0x1D6A	0x8824    LDRH	R4, [R4, #0]
0x1D6C	0xF5B47FF0  CMP	R4, #480
0x1D70	0xD800    BHI	L__TFT_Set_Address_SSD1963II193
0x1D72	0xE004    B	L_TFT_Set_Address_SSD1963II135
L__TFT_Set_Address_SSD1963II194:
L__TFT_Set_Address_SSD1963II193:
;__Lib_TFT_Defs.c, 2380 :: 		_width = 800;
; _width start address is: 32 (R8)
0x1D74	0xF2403820  MOVW	R8, #800
;__Lib_TFT_Defs.c, 2381 :: 		_height = 480;
; _height start address is: 28 (R7)
0x1D78	0xF24017E0  MOVW	R7, #480
;__Lib_TFT_Defs.c, 2382 :: 		}
; _height end address is: 28 (R7)
; _width end address is: 32 (R8)
0x1D7C	0xE003    B	L_TFT_Set_Address_SSD1963II136
L_TFT_Set_Address_SSD1963II135:
;__Lib_TFT_Defs.c, 2384 :: 		_width = 480;
; _width start address is: 32 (R8)
0x1D7E	0xF24018E0  MOVW	R8, #480
;__Lib_TFT_Defs.c, 2385 :: 		_height = 272;
; _height start address is: 28 (R7)
0x1D82	0xF2401710  MOVW	R7, #272
; _height end address is: 28 (R7)
; _width end address is: 32 (R8)
;__Lib_TFT_Defs.c, 2386 :: 		}
L_TFT_Set_Address_SSD1963II136:
;__Lib_TFT_Defs.c, 2387 :: 		if (TFT_Disp_Rotation == 90) {
; _height start address is: 28 (R7)
; _width start address is: 32 (R8)
0x1D86	0x4C41    LDR	R4, [PC, #260]
0x1D88	0x7824    LDRB	R4, [R4, #0]
0x1D8A	0x2C5A    CMP	R4, #90
0x1D8C	0xD11D    BNE	L_TFT_Set_Address_SSD1963II137
;__Lib_TFT_Defs.c, 2388 :: 		if (Is_TFT_Rotated_180()) {
0x1D8E	0xF7FEFB7F  BL	_Is_TFT_Rotated_180+0
0x1D92	0xB168    CBZ	R0, L_TFT_Set_Address_SSD1963II138
; _height end address is: 28 (R7)
;__Lib_TFT_Defs.c, 2389 :: 		s_col = (_width - 1) - y2;
0x1D94	0xF1A80501  SUB	R5, R8, #1
0x1D98	0xB2AD    UXTH	R5, R5
; _width end address is: 32 (R8)
0x1D9A	0x1BAC    SUB	R4, R5, R6
; y2 end address is: 24 (R6)
0x1D9C	0xF8AD4004  STRH	R4, [SP, #4]
;__Lib_TFT_Defs.c, 2390 :: 		e_col = (_width - 1) - y1;
0x1DA0	0x1AAC    SUB	R4, R5, R2
; y1 end address is: 8 (R2)
0x1DA2	0xF8AD4006  STRH	R4, [SP, #6]
;__Lib_TFT_Defs.c, 2391 :: 		s_page = x1;
0x1DA6	0xF8AD1008  STRH	R1, [SP, #8]
; x1 end address is: 4 (R1)
;__Lib_TFT_Defs.c, 2392 :: 		e_page = x2;
0x1DAA	0xF8AD300A  STRH	R3, [SP, #10]
; x2 end address is: 12 (R3)
;__Lib_TFT_Defs.c, 2393 :: 		} else {
0x1DAE	0xE00B    B	L_TFT_Set_Address_SSD1963II139
L_TFT_Set_Address_SSD1963II138:
;__Lib_TFT_Defs.c, 2394 :: 		s_col = y1;
; _height start address is: 28 (R7)
; y2 start address is: 24 (R6)
; x2 start address is: 12 (R3)
; y1 start address is: 8 (R2)
; x1 start address is: 4 (R1)
0x1DB0	0xF8AD2004  STRH	R2, [SP, #4]
; y1 end address is: 8 (R2)
;__Lib_TFT_Defs.c, 2395 :: 		e_col = y2;
0x1DB4	0xF8AD6006  STRH	R6, [SP, #6]
; y2 end address is: 24 (R6)
;__Lib_TFT_Defs.c, 2396 :: 		s_page = (_height - 1) - x2;
0x1DB8	0x1E7D    SUBS	R5, R7, #1
0x1DBA	0xB2AD    UXTH	R5, R5
; _height end address is: 28 (R7)
0x1DBC	0x1AEC    SUB	R4, R5, R3
; x2 end address is: 12 (R3)
0x1DBE	0xF8AD4008  STRH	R4, [SP, #8]
;__Lib_TFT_Defs.c, 2397 :: 		e_page = (_height - 1) - x1;
0x1DC2	0x1A6C    SUB	R4, R5, R1
; x1 end address is: 4 (R1)
0x1DC4	0xF8AD400A  STRH	R4, [SP, #10]
;__Lib_TFT_Defs.c, 2398 :: 		}
L_TFT_Set_Address_SSD1963II139:
;__Lib_TFT_Defs.c, 2399 :: 		} else {
0x1DC8	0xE01C    B	L_TFT_Set_Address_SSD1963II140
L_TFT_Set_Address_SSD1963II137:
;__Lib_TFT_Defs.c, 2400 :: 		if (Is_TFT_Rotated_180()) {
; _width start address is: 32 (R8)
; _height start address is: 28 (R7)
; y2 start address is: 24 (R6)
; x2 start address is: 12 (R3)
; y1 start address is: 8 (R2)
; x1 start address is: 4 (R1)
0x1DCA	0xF7FEFB61  BL	_Is_TFT_Rotated_180+0
0x1DCE	0xB188    CBZ	R0, L_TFT_Set_Address_SSD1963II141
;__Lib_TFT_Defs.c, 2401 :: 		s_col = (_width - 1) - x2;
0x1DD0	0xF1A80501  SUB	R5, R8, #1
0x1DD4	0xB2AD    UXTH	R5, R5
; _width end address is: 32 (R8)
0x1DD6	0x1AEC    SUB	R4, R5, R3
; x2 end address is: 12 (R3)
0x1DD8	0xF8AD4004  STRH	R4, [SP, #4]
;__Lib_TFT_Defs.c, 2402 :: 		e_col = (_width - 1) - x1;
0x1DDC	0x1A6C    SUB	R4, R5, R1
; x1 end address is: 4 (R1)
0x1DDE	0xF8AD4006  STRH	R4, [SP, #6]
;__Lib_TFT_Defs.c, 2403 :: 		s_page = (_height - 1) - y2;
0x1DE2	0x1E7D    SUBS	R5, R7, #1
0x1DE4	0xB2AD    UXTH	R5, R5
; _height end address is: 28 (R7)
0x1DE6	0x1BAC    SUB	R4, R5, R6
; y2 end address is: 24 (R6)
0x1DE8	0xF8AD4008  STRH	R4, [SP, #8]
;__Lib_TFT_Defs.c, 2404 :: 		e_page = (_height - 1) - y1;
0x1DEC	0x1AAC    SUB	R4, R5, R2
; y1 end address is: 8 (R2)
0x1DEE	0xF8AD400A  STRH	R4, [SP, #10]
;__Lib_TFT_Defs.c, 2405 :: 		} else {
0x1DF2	0xE007    B	L_TFT_Set_Address_SSD1963II142
L_TFT_Set_Address_SSD1963II141:
;__Lib_TFT_Defs.c, 2406 :: 		s_col = x1;
; y2 start address is: 24 (R6)
; x2 start address is: 12 (R3)
; y1 start address is: 8 (R2)
; x1 start address is: 4 (R1)
0x1DF4	0xF8AD1004  STRH	R1, [SP, #4]
; x1 end address is: 4 (R1)
;__Lib_TFT_Defs.c, 2407 :: 		e_col = x2;
0x1DF8	0xF8AD3006  STRH	R3, [SP, #6]
; x2 end address is: 12 (R3)
;__Lib_TFT_Defs.c, 2408 :: 		s_page = y1;
0x1DFC	0xF8AD2008  STRH	R2, [SP, #8]
; y1 end address is: 8 (R2)
;__Lib_TFT_Defs.c, 2409 :: 		e_page = y2;
0x1E00	0xF8AD600A  STRH	R6, [SP, #10]
; y2 end address is: 24 (R6)
;__Lib_TFT_Defs.c, 2410 :: 		}
L_TFT_Set_Address_SSD1963II142:
;__Lib_TFT_Defs.c, 2411 :: 		}
L_TFT_Set_Address_SSD1963II140:
;__Lib_TFT_Defs.c, 2412 :: 		TFT_Set_Index_Ptr(0x2a);             // SET column address
0x1E04	0x202A    MOVS	R0, #42
0x1E06	0x4C22    LDR	R4, [PC, #136]
0x1E08	0x6824    LDR	R4, [R4, #0]
0x1E0A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2413 :: 		TFT_Write_Command_Ptr((char)(s_col >> 8));
0x1E0C	0xF8BD4004  LDRH	R4, [SP, #4]
0x1E10	0x0A24    LSRS	R4, R4, #8
0x1E12	0xB2E0    UXTB	R0, R4
0x1E14	0x4C1F    LDR	R4, [PC, #124]
0x1E16	0x6824    LDR	R4, [R4, #0]
0x1E18	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2414 :: 		TFT_Write_Command_Ptr(s_col);
0x1E1A	0xF8BD0004  LDRH	R0, [SP, #4]
0x1E1E	0x4C1D    LDR	R4, [PC, #116]
0x1E20	0x6824    LDR	R4, [R4, #0]
0x1E22	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2415 :: 		TFT_Write_Command_Ptr((char)(e_col >> 8));
0x1E24	0xF8BD4006  LDRH	R4, [SP, #6]
0x1E28	0x0A24    LSRS	R4, R4, #8
0x1E2A	0xB2E0    UXTB	R0, R4
0x1E2C	0x4C19    LDR	R4, [PC, #100]
0x1E2E	0x6824    LDR	R4, [R4, #0]
0x1E30	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2416 :: 		TFT_Write_Command_Ptr(e_col);
0x1E32	0xF8BD0006  LDRH	R0, [SP, #6]
0x1E36	0x4C17    LDR	R4, [PC, #92]
0x1E38	0x6824    LDR	R4, [R4, #0]
0x1E3A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2418 :: 		TFT_Set_Index_Ptr(0x2b);             // SET page address
0x1E3C	0x202B    MOVS	R0, #43
0x1E3E	0x4C14    LDR	R4, [PC, #80]
0x1E40	0x6824    LDR	R4, [R4, #0]
0x1E42	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2419 :: 		TFT_Write_Command_Ptr((char)(s_page >> 8));
0x1E44	0xF8BD4008  LDRH	R4, [SP, #8]
0x1E48	0x0A24    LSRS	R4, R4, #8
0x1E4A	0xB2E0    UXTB	R0, R4
0x1E4C	0x4C11    LDR	R4, [PC, #68]
0x1E4E	0x6824    LDR	R4, [R4, #0]
0x1E50	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2420 :: 		TFT_Write_Command_Ptr(s_page);
0x1E52	0xF8BD0008  LDRH	R0, [SP, #8]
0x1E56	0x4C0F    LDR	R4, [PC, #60]
0x1E58	0x6824    LDR	R4, [R4, #0]
0x1E5A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2421 :: 		TFT_Write_Command_Ptr((char)(e_page >> 8));
0x1E5C	0xF8BD400A  LDRH	R4, [SP, #10]
0x1E60	0x0A24    LSRS	R4, R4, #8
0x1E62	0xB2E0    UXTB	R0, R4
0x1E64	0x4C0B    LDR	R4, [PC, #44]
0x1E66	0x6824    LDR	R4, [R4, #0]
0x1E68	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2422 :: 		TFT_Write_Command_Ptr(e_page);
0x1E6A	0xF8BD000A  LDRH	R0, [SP, #10]
0x1E6E	0x4C09    LDR	R4, [PC, #36]
0x1E70	0x6824    LDR	R4, [R4, #0]
0x1E72	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2423 :: 		TFT_Set_Index_Ptr(0x2C);
0x1E74	0x202C    MOVS	R0, #44
0x1E76	0x4C06    LDR	R4, [PC, #24]
0x1E78	0x6824    LDR	R4, [R4, #0]
0x1E7A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2424 :: 		}
L_end_TFT_Set_Address_SSD1963II:
0x1E7C	0xF8DDE000  LDR	LR, [SP, #0]
0x1E80	0xB003    ADD	SP, SP, #12
0x1E82	0x4770    BX	LR
0x1E84	0x00AE2000  	_TFT_DISP_WIDTH+0
0x1E88	0x00B02000  	_TFT_DISP_HEIGHT+0
0x1E8C	0x00372000  	__Lib_TFT_Defs_TFT_Disp_Rotation+0
0x1E90	0x00DC2000  	_TFT_Set_Index_Ptr+0
0x1E94	0x00E02000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_SSD1963II
_TFT_Set_Address:
;__Lib_TFT_Defs.c, 277 :: 		void TFT_Set_Address(unsigned int x, unsigned int y) {
0x1CD8	0xB083    SUB	SP, SP, #12
0x1CDA	0xF8CDE000  STR	LR, [SP, #0]
0x1CDE	0xF8AD0004  STRH	R0, [SP, #4]
0x1CE2	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 278 :: 		TFT_Set_Index_Ptr(0x02);
0x1CE6	0x2002    MOVS	R0, #2
0x1CE8	0x4C17    LDR	R4, [PC, #92]
0x1CEA	0x6824    LDR	R4, [R4, #0]
0x1CEC	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 279 :: 		TFT_Write_Command_Ptr(x>>8);
0x1CEE	0xF8BD2004  LDRH	R2, [SP, #4]
0x1CF2	0x0A14    LSRS	R4, R2, #8
0x1CF4	0xB2E0    UXTB	R0, R4
0x1CF6	0x4C15    LDR	R4, [PC, #84]
0x1CF8	0x6824    LDR	R4, [R4, #0]
0x1CFA	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 280 :: 		TFT_Set_Index_Ptr(0x03);
0x1CFC	0x2003    MOVS	R0, #3
0x1CFE	0x4C12    LDR	R4, [PC, #72]
0x1D00	0x6824    LDR	R4, [R4, #0]
0x1D02	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 281 :: 		TFT_Write_Command_Ptr(x);
0x1D04	0xF8BD0004  LDRH	R0, [SP, #4]
0x1D08	0x4C10    LDR	R4, [PC, #64]
0x1D0A	0x6824    LDR	R4, [R4, #0]
0x1D0C	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 282 :: 		TFT_Set_Index_Ptr(0x06);
0x1D0E	0x2006    MOVS	R0, #6
0x1D10	0x4C0D    LDR	R4, [PC, #52]
0x1D12	0x6824    LDR	R4, [R4, #0]
0x1D14	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 283 :: 		TFT_Write_Command_Ptr(y>>8);
0x1D16	0xF8BD2008  LDRH	R2, [SP, #8]
0x1D1A	0x0A14    LSRS	R4, R2, #8
0x1D1C	0xB2E0    UXTB	R0, R4
0x1D1E	0x4C0B    LDR	R4, [PC, #44]
0x1D20	0x6824    LDR	R4, [R4, #0]
0x1D22	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 284 :: 		TFT_Set_Index_Ptr(0x07);
0x1D24	0x2007    MOVS	R0, #7
0x1D26	0x4C08    LDR	R4, [PC, #32]
0x1D28	0x6824    LDR	R4, [R4, #0]
0x1D2A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 285 :: 		TFT_Write_Command_Ptr(y);
0x1D2C	0xF8BD0008  LDRH	R0, [SP, #8]
0x1D30	0x4C06    LDR	R4, [PC, #24]
0x1D32	0x6824    LDR	R4, [R4, #0]
0x1D34	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 286 :: 		TFT_Set_Index_Ptr(0x22);
0x1D36	0x2022    MOVS	R0, #34
0x1D38	0x4C03    LDR	R4, [PC, #12]
0x1D3A	0x6824    LDR	R4, [R4, #0]
0x1D3C	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 287 :: 		}
L_end_TFT_Set_Address:
0x1D3E	0xF8DDE000  LDR	LR, [SP, #0]
0x1D42	0xB003    ADD	SP, SP, #12
0x1D44	0x4770    BX	LR
0x1D46	0xBF00    NOP
0x1D48	0x00DC2000  	_TFT_Set_Index_Ptr+0
0x1D4C	0x00E02000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address
_TFT_Set_Address_SST7715R:
;__Lib_TFT_Defs.c, 386 :: 		void TFT_Set_Address_SST7715R(unsigned int x, unsigned int y) {
0x27BC	0xB083    SUB	SP, SP, #12
0x27BE	0xF8CDE000  STR	LR, [SP, #0]
0x27C2	0xF8AD0004  STRH	R0, [SP, #4]
0x27C6	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 387 :: 		TFT_Set_Index_Ptr(0x2A);
0x27CA	0x202A    MOVS	R0, #42
0x27CC	0x4C13    LDR	R4, [PC, #76]
0x27CE	0x6824    LDR	R4, [R4, #0]
0x27D0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 388 :: 		TFT_Write_Command_Ptr(x>>8);
0x27D2	0xF8BD2004  LDRH	R2, [SP, #4]
0x27D6	0x0A14    LSRS	R4, R2, #8
0x27D8	0xB2E0    UXTB	R0, R4
0x27DA	0x4C11    LDR	R4, [PC, #68]
0x27DC	0x6824    LDR	R4, [R4, #0]
0x27DE	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 389 :: 		TFT_Write_Command_Ptr(x);
0x27E0	0xF8BD0004  LDRH	R0, [SP, #4]
0x27E4	0x4C0E    LDR	R4, [PC, #56]
0x27E6	0x6824    LDR	R4, [R4, #0]
0x27E8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 390 :: 		TFT_Set_Index_Ptr(0x2B);
0x27EA	0x202B    MOVS	R0, #43
0x27EC	0x4C0B    LDR	R4, [PC, #44]
0x27EE	0x6824    LDR	R4, [R4, #0]
0x27F0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 391 :: 		TFT_Write_Command_Ptr(y>>8);
0x27F2	0xF8BD2008  LDRH	R2, [SP, #8]
0x27F6	0x0A14    LSRS	R4, R2, #8
0x27F8	0xB2E0    UXTB	R0, R4
0x27FA	0x4C09    LDR	R4, [PC, #36]
0x27FC	0x6824    LDR	R4, [R4, #0]
0x27FE	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 392 :: 		TFT_Write_Command_Ptr(y);
0x2800	0xF8BD0008  LDRH	R0, [SP, #8]
0x2804	0x4C06    LDR	R4, [PC, #24]
0x2806	0x6824    LDR	R4, [R4, #0]
0x2808	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 393 :: 		TFT_Set_Index_Ptr(0x2C);
0x280A	0x202C    MOVS	R0, #44
0x280C	0x4C03    LDR	R4, [PC, #12]
0x280E	0x6824    LDR	R4, [R4, #0]
0x2810	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 394 :: 		}
L_end_TFT_Set_Address_SST7715R:
0x2812	0xF8DDE000  LDR	LR, [SP, #0]
0x2816	0xB003    ADD	SP, SP, #12
0x2818	0x4770    BX	LR
0x281A	0xBF00    NOP
0x281C	0x00DC2000  	_TFT_Set_Index_Ptr+0
0x2820	0x00E02000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_SST7715R
_TFT_Set_Address_HX8352A:
;__Lib_TFT_Defs.c, 611 :: 		void TFT_Set_Address_HX8352A(unsigned int x, unsigned int y) {
0x26E8	0xB083    SUB	SP, SP, #12
0x26EA	0xF8CDE000  STR	LR, [SP, #0]
0x26EE	0xF8AD0004  STRH	R0, [SP, #4]
0x26F2	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 612 :: 		if (TFT_Disp_Rotation == 90) {
0x26F6	0x4A2E    LDR	R2, [PC, #184]
0x26F8	0x7812    LDRB	R2, [R2, #0]
0x26FA	0x2A5A    CMP	R2, #90
0x26FC	0xD128    BNE	L_TFT_Set_Address_HX8352A26
;__Lib_TFT_Defs.c, 613 :: 		TFT_Set_Index_Ptr(0x02);
0x26FE	0x2002    MOVS	R0, #2
0x2700	0x4C2C    LDR	R4, [PC, #176]
0x2702	0x6824    LDR	R4, [R4, #0]
0x2704	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 614 :: 		TFT_Write_Command_Ptr(x>>8);
0x2706	0xF8BD2004  LDRH	R2, [SP, #4]
0x270A	0x0A14    LSRS	R4, R2, #8
0x270C	0xB2E0    UXTB	R0, R4
0x270E	0x4C2A    LDR	R4, [PC, #168]
0x2710	0x6824    LDR	R4, [R4, #0]
0x2712	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 615 :: 		TFT_Set_Index_Ptr(0x03);
0x2714	0x2003    MOVS	R0, #3
0x2716	0x4C27    LDR	R4, [PC, #156]
0x2718	0x6824    LDR	R4, [R4, #0]
0x271A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 616 :: 		TFT_Write_Command_Ptr(x);
0x271C	0xF8BD0004  LDRH	R0, [SP, #4]
0x2720	0x4C25    LDR	R4, [PC, #148]
0x2722	0x6824    LDR	R4, [R4, #0]
0x2724	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 617 :: 		TFT_Set_Index_Ptr(0x06);
0x2726	0x2006    MOVS	R0, #6
0x2728	0x4C22    LDR	R4, [PC, #136]
0x272A	0x6824    LDR	R4, [R4, #0]
0x272C	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 618 :: 		TFT_Write_Command_Ptr(y>>8);
0x272E	0xF8BD2008  LDRH	R2, [SP, #8]
0x2732	0x0A14    LSRS	R4, R2, #8
0x2734	0xB2E0    UXTB	R0, R4
0x2736	0x4C20    LDR	R4, [PC, #128]
0x2738	0x6824    LDR	R4, [R4, #0]
0x273A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 619 :: 		TFT_Set_Index_Ptr(0x07);
0x273C	0x2007    MOVS	R0, #7
0x273E	0x4C1D    LDR	R4, [PC, #116]
0x2740	0x6824    LDR	R4, [R4, #0]
0x2742	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 620 :: 		TFT_Write_Command_Ptr(y);
0x2744	0xF8BD0008  LDRH	R0, [SP, #8]
0x2748	0x4C1B    LDR	R4, [PC, #108]
0x274A	0x6824    LDR	R4, [R4, #0]
0x274C	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 621 :: 		}
0x274E	0xE027    B	L_TFT_Set_Address_HX8352A27
L_TFT_Set_Address_HX8352A26:
;__Lib_TFT_Defs.c, 623 :: 		TFT_Set_Index_Ptr(0x02);
0x2750	0x2002    MOVS	R0, #2
0x2752	0x4C18    LDR	R4, [PC, #96]
0x2754	0x6824    LDR	R4, [R4, #0]
0x2756	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 624 :: 		TFT_Write_Command_Ptr(y>>8);
0x2758	0xF8BD2008  LDRH	R2, [SP, #8]
0x275C	0x0A14    LSRS	R4, R2, #8
0x275E	0xB2E0    UXTB	R0, R4
0x2760	0x4C15    LDR	R4, [PC, #84]
0x2762	0x6824    LDR	R4, [R4, #0]
0x2764	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 625 :: 		TFT_Set_Index_Ptr(0x03);
0x2766	0x2003    MOVS	R0, #3
0x2768	0x4C12    LDR	R4, [PC, #72]
0x276A	0x6824    LDR	R4, [R4, #0]
0x276C	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 626 :: 		TFT_Write_Command_Ptr(y);
0x276E	0xF8BD0008  LDRH	R0, [SP, #8]
0x2772	0x4C11    LDR	R4, [PC, #68]
0x2774	0x6824    LDR	R4, [R4, #0]
0x2776	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 627 :: 		TFT_Set_Index_Ptr(0x06);
0x2778	0x2006    MOVS	R0, #6
0x277A	0x4C0E    LDR	R4, [PC, #56]
0x277C	0x6824    LDR	R4, [R4, #0]
0x277E	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 628 :: 		TFT_Write_Command_Ptr(x>>8);
0x2780	0xF8BD2004  LDRH	R2, [SP, #4]
0x2784	0x0A14    LSRS	R4, R2, #8
0x2786	0xB2E0    UXTB	R0, R4
0x2788	0x4C0B    LDR	R4, [PC, #44]
0x278A	0x6824    LDR	R4, [R4, #0]
0x278C	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 629 :: 		TFT_Set_Index_Ptr(0x07);
0x278E	0x2007    MOVS	R0, #7
0x2790	0x4C08    LDR	R4, [PC, #32]
0x2792	0x6824    LDR	R4, [R4, #0]
0x2794	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 630 :: 		TFT_Write_Command_Ptr(x);
0x2796	0xF8BD0004  LDRH	R0, [SP, #4]
0x279A	0x4C07    LDR	R4, [PC, #28]
0x279C	0x6824    LDR	R4, [R4, #0]
0x279E	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 631 :: 		}
L_TFT_Set_Address_HX8352A27:
;__Lib_TFT_Defs.c, 632 :: 		TFT_Set_Index_Ptr(0x22);
0x27A0	0x2022    MOVS	R0, #34
0x27A2	0x4C04    LDR	R4, [PC, #16]
0x27A4	0x6824    LDR	R4, [R4, #0]
0x27A6	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 633 :: 		}
L_end_TFT_Set_Address_HX8352A:
0x27A8	0xF8DDE000  LDR	LR, [SP, #0]
0x27AC	0xB003    ADD	SP, SP, #12
0x27AE	0x4770    BX	LR
0x27B0	0x00372000  	__Lib_TFT_Defs_TFT_Disp_Rotation+0
0x27B4	0x00DC2000  	_TFT_Set_Index_Ptr+0
0x27B8	0x00E02000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_HX8352A
_TFT_Set_Address_R61526:
;__Lib_TFT_Defs.c, 877 :: 		void TFT_Set_Address_R61526(unsigned int x, unsigned int y) {
0x2680	0xB083    SUB	SP, SP, #12
0x2682	0xF8CDE000  STR	LR, [SP, #0]
0x2686	0xF8AD0004  STRH	R0, [SP, #4]
0x268A	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 878 :: 		TFT_Set_Index_Ptr(0x2A);
0x268E	0x202A    MOVS	R0, #42
0x2690	0x4C13    LDR	R4, [PC, #76]
0x2692	0x6824    LDR	R4, [R4, #0]
0x2694	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 879 :: 		TFT_Write_Command_Ptr(x>>8);
0x2696	0xF8BD2004  LDRH	R2, [SP, #4]
0x269A	0x0A14    LSRS	R4, R2, #8
0x269C	0xB2E0    UXTB	R0, R4
0x269E	0x4C11    LDR	R4, [PC, #68]
0x26A0	0x6824    LDR	R4, [R4, #0]
0x26A2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 880 :: 		TFT_Write_Command_Ptr(x);
0x26A4	0xF8BD0004  LDRH	R0, [SP, #4]
0x26A8	0x4C0E    LDR	R4, [PC, #56]
0x26AA	0x6824    LDR	R4, [R4, #0]
0x26AC	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 881 :: 		TFT_Set_Index_Ptr(0x2B);
0x26AE	0x202B    MOVS	R0, #43
0x26B0	0x4C0B    LDR	R4, [PC, #44]
0x26B2	0x6824    LDR	R4, [R4, #0]
0x26B4	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 882 :: 		TFT_Write_Command_Ptr(y>>8);
0x26B6	0xF8BD2008  LDRH	R2, [SP, #8]
0x26BA	0x0A14    LSRS	R4, R2, #8
0x26BC	0xB2E0    UXTB	R0, R4
0x26BE	0x4C09    LDR	R4, [PC, #36]
0x26C0	0x6824    LDR	R4, [R4, #0]
0x26C2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 883 :: 		TFT_Write_Command_Ptr(y);
0x26C4	0xF8BD0008  LDRH	R0, [SP, #8]
0x26C8	0x4C06    LDR	R4, [PC, #24]
0x26CA	0x6824    LDR	R4, [R4, #0]
0x26CC	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 884 :: 		TFT_Set_Index_Ptr(0x2C);
0x26CE	0x202C    MOVS	R0, #44
0x26D0	0x4C03    LDR	R4, [PC, #12]
0x26D2	0x6824    LDR	R4, [R4, #0]
0x26D4	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 885 :: 		}
L_end_TFT_Set_Address_R61526:
0x26D6	0xF8DDE000  LDR	LR, [SP, #0]
0x26DA	0xB003    ADD	SP, SP, #12
0x26DC	0x4770    BX	LR
0x26DE	0xBF00    NOP
0x26E0	0x00DC2000  	_TFT_Set_Index_Ptr+0
0x26E4	0x00E02000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_R61526
_TFT_Set_Address_ILI9481:
;__Lib_TFT_Defs.c, 1377 :: 		void TFT_Set_Address_ILI9481(unsigned int x, unsigned int y) {
0x2824	0xB083    SUB	SP, SP, #12
0x2826	0xF8CDE000  STR	LR, [SP, #0]
0x282A	0xF8AD0004  STRH	R0, [SP, #4]
0x282E	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 1378 :: 		TFT_Set_Index_Ptr(0x2A);
0x2832	0x202A    MOVS	R0, #42
0x2834	0x4C13    LDR	R4, [PC, #76]
0x2836	0x6824    LDR	R4, [R4, #0]
0x2838	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1379 :: 		TFT_Write_Command_Ptr(x>>8);
0x283A	0xF8BD2004  LDRH	R2, [SP, #4]
0x283E	0x0A14    LSRS	R4, R2, #8
0x2840	0xB2E0    UXTB	R0, R4
0x2842	0x4C11    LDR	R4, [PC, #68]
0x2844	0x6824    LDR	R4, [R4, #0]
0x2846	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1380 :: 		TFT_Write_Command_Ptr(x);
0x2848	0xF8BD0004  LDRH	R0, [SP, #4]
0x284C	0x4C0E    LDR	R4, [PC, #56]
0x284E	0x6824    LDR	R4, [R4, #0]
0x2850	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1381 :: 		TFT_Set_Index_Ptr(0x2B);
0x2852	0x202B    MOVS	R0, #43
0x2854	0x4C0B    LDR	R4, [PC, #44]
0x2856	0x6824    LDR	R4, [R4, #0]
0x2858	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1382 :: 		TFT_Write_Command_Ptr(y>>8);
0x285A	0xF8BD2008  LDRH	R2, [SP, #8]
0x285E	0x0A14    LSRS	R4, R2, #8
0x2860	0xB2E0    UXTB	R0, R4
0x2862	0x4C09    LDR	R4, [PC, #36]
0x2864	0x6824    LDR	R4, [R4, #0]
0x2866	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1383 :: 		TFT_Write_Command_Ptr(y);
0x2868	0xF8BD0008  LDRH	R0, [SP, #8]
0x286C	0x4C06    LDR	R4, [PC, #24]
0x286E	0x6824    LDR	R4, [R4, #0]
0x2870	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1384 :: 		TFT_Set_Index_Ptr(0x2C);
0x2872	0x202C    MOVS	R0, #44
0x2874	0x4C03    LDR	R4, [PC, #12]
0x2876	0x6824    LDR	R4, [R4, #0]
0x2878	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1385 :: 		}
L_end_TFT_Set_Address_ILI9481:
0x287A	0xF8DDE000  LDR	LR, [SP, #0]
0x287E	0xB003    ADD	SP, SP, #12
0x2880	0x4770    BX	LR
0x2882	0xBF00    NOP
0x2884	0x00DC2000  	_TFT_Set_Index_Ptr+0
0x2888	0x00E02000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_ILI9481
_TFT_Set_Address_ILI9342:
;__Lib_TFT_Defs.c, 1634 :: 		void TFT_Set_Address_ILI9342(unsigned int x, unsigned int y) {
0x28EC	0xB083    SUB	SP, SP, #12
0x28EE	0xF8CDE000  STR	LR, [SP, #0]
0x28F2	0xF8AD0004  STRH	R0, [SP, #4]
0x28F6	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 1635 :: 		TFT_Set_Index_Ptr(0x2A);
0x28FA	0x202A    MOVS	R0, #42
0x28FC	0x4C13    LDR	R4, [PC, #76]
0x28FE	0x6824    LDR	R4, [R4, #0]
0x2900	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1636 :: 		TFT_Write_Command_Ptr(x>>8);
0x2902	0xF8BD2004  LDRH	R2, [SP, #4]
0x2906	0x0A14    LSRS	R4, R2, #8
0x2908	0xB2E0    UXTB	R0, R4
0x290A	0x4C11    LDR	R4, [PC, #68]
0x290C	0x6824    LDR	R4, [R4, #0]
0x290E	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1637 :: 		TFT_Write_Command_Ptr(x);
0x2910	0xF8BD0004  LDRH	R0, [SP, #4]
0x2914	0x4C0E    LDR	R4, [PC, #56]
0x2916	0x6824    LDR	R4, [R4, #0]
0x2918	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1638 :: 		TFT_Set_Index_Ptr(0x2B);
0x291A	0x202B    MOVS	R0, #43
0x291C	0x4C0B    LDR	R4, [PC, #44]
0x291E	0x6824    LDR	R4, [R4, #0]
0x2920	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1639 :: 		TFT_Write_Command_Ptr(y>>8);
0x2922	0xF8BD2008  LDRH	R2, [SP, #8]
0x2926	0x0A14    LSRS	R4, R2, #8
0x2928	0xB2E0    UXTB	R0, R4
0x292A	0x4C09    LDR	R4, [PC, #36]
0x292C	0x6824    LDR	R4, [R4, #0]
0x292E	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1640 :: 		TFT_Write_Command_Ptr(y);
0x2930	0xF8BD0008  LDRH	R0, [SP, #8]
0x2934	0x4C06    LDR	R4, [PC, #24]
0x2936	0x6824    LDR	R4, [R4, #0]
0x2938	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1641 :: 		TFT_Set_Index_Ptr(0x2C);
0x293A	0x202C    MOVS	R0, #44
0x293C	0x4C03    LDR	R4, [PC, #12]
0x293E	0x6824    LDR	R4, [R4, #0]
0x2940	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1642 :: 		}
L_end_TFT_Set_Address_ILI9342:
0x2942	0xF8DDE000  LDR	LR, [SP, #0]
0x2946	0xB003    ADD	SP, SP, #12
0x2948	0x4770    BX	LR
0x294A	0xBF00    NOP
0x294C	0x00DC2000  	_TFT_Set_Index_Ptr+0
0x2950	0x00E02000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_ILI9342
_TFT_Set_Address_ILI9340:
;__Lib_TFT_Defs.c, 2112 :: 		void TFT_Set_Address_ILI9340(unsigned int x, unsigned int y) {
0x2580	0xB083    SUB	SP, SP, #12
0x2582	0xF8CDE000  STR	LR, [SP, #0]
0x2586	0xF8AD0004  STRH	R0, [SP, #4]
0x258A	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 2113 :: 		TFT_Set_Index_Ptr(0x2A);
0x258E	0x202A    MOVS	R0, #42
0x2590	0x4C13    LDR	R4, [PC, #76]
0x2592	0x6824    LDR	R4, [R4, #0]
0x2594	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2114 :: 		TFT_Write_Command_Ptr(x>>8);
0x2596	0xF8BD2004  LDRH	R2, [SP, #4]
0x259A	0x0A14    LSRS	R4, R2, #8
0x259C	0xB2E0    UXTB	R0, R4
0x259E	0x4C11    LDR	R4, [PC, #68]
0x25A0	0x6824    LDR	R4, [R4, #0]
0x25A2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2115 :: 		TFT_Write_Command_Ptr(x);
0x25A4	0xF8BD0004  LDRH	R0, [SP, #4]
0x25A8	0x4C0E    LDR	R4, [PC, #56]
0x25AA	0x6824    LDR	R4, [R4, #0]
0x25AC	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2116 :: 		TFT_Set_Index_Ptr(0x2B);
0x25AE	0x202B    MOVS	R0, #43
0x25B0	0x4C0B    LDR	R4, [PC, #44]
0x25B2	0x6824    LDR	R4, [R4, #0]
0x25B4	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2117 :: 		TFT_Write_Command_Ptr(y>>8);
0x25B6	0xF8BD2008  LDRH	R2, [SP, #8]
0x25BA	0x0A14    LSRS	R4, R2, #8
0x25BC	0xB2E0    UXTB	R0, R4
0x25BE	0x4C09    LDR	R4, [PC, #36]
0x25C0	0x6824    LDR	R4, [R4, #0]
0x25C2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2118 :: 		TFT_Write_Command_Ptr(y);
0x25C4	0xF8BD0008  LDRH	R0, [SP, #8]
0x25C8	0x4C06    LDR	R4, [PC, #24]
0x25CA	0x6824    LDR	R4, [R4, #0]
0x25CC	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2119 :: 		TFT_Set_Index_Ptr(0x2C);
0x25CE	0x202C    MOVS	R0, #44
0x25D0	0x4C03    LDR	R4, [PC, #12]
0x25D2	0x6824    LDR	R4, [R4, #0]
0x25D4	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2120 :: 		}
L_end_TFT_Set_Address_ILI9340:
0x25D6	0xF8DDE000  LDR	LR, [SP, #0]
0x25DA	0xB003    ADD	SP, SP, #12
0x25DC	0x4770    BX	LR
0x25DE	0xBF00    NOP
0x25E0	0x00DC2000  	_TFT_Set_Index_Ptr+0
0x25E4	0x00E02000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_ILI9340
_SPI1_Write:
;__Lib_SPI_123.c, 78 :: 		
; data_out start address is: 0 (R0)
0x2564	0xB081    SUB	SP, SP, #4
0x2566	0xF8CDE000  STR	LR, [SP, #0]
; data_out end address is: 0 (R0)
; data_out start address is: 0 (R0)
;__Lib_SPI_123.c, 79 :: 		
0x256A	0xB281    UXTH	R1, R0
; data_out end address is: 0 (R0)
0x256C	0x4803    LDR	R0, [PC, #12]
0x256E	0xF7FEF947  BL	__Lib_SPI_123_SPIx_Read+0
;__Lib_SPI_123.c, 80 :: 		
L_end_SPI1_Write:
0x2572	0xF8DDE000  LDR	LR, [SP, #0]
0x2576	0xB001    ADD	SP, SP, #4
0x2578	0x4770    BX	LR
0x257A	0xBF00    NOP
0x257C	0x30004001  	SPI1_CR1+0
; end of _SPI1_Write
__Lib_SPI_123_SPIx_Read:
;__Lib_SPI_123.c, 67 :: 		
; data_out start address is: 4 (R1)
; base start address is: 0 (R0)
0x0800	0xB081    SUB	SP, SP, #4
; data_out end address is: 4 (R1)
; base end address is: 0 (R0)
; base start address is: 0 (R0)
; data_out start address is: 4 (R1)
;__Lib_SPI_123.c, 68 :: 		
0x0802	0xF200020C  ADDW	R2, R0, #12
0x0806	0x6011    STR	R1, [R2, #0]
; data_out end address is: 4 (R1)
; base end address is: 0 (R0)
;__Lib_SPI_123.c, 69 :: 		
L___Lib_SPI_123_SPIx_Read0:
; base start address is: 0 (R0)
0x0808	0xF2000208  ADDW	R2, R0, #8
0x080C	0x6813    LDR	R3, [R2, #0]
0x080E	0xF3C30200  UBFX	R2, R3, #0, #1
0x0812	0xB902    CBNZ	R2, L___Lib_SPI_123_SPIx_Read1
;__Lib_SPI_123.c, 70 :: 		
0x0814	0xE7F8    B	L___Lib_SPI_123_SPIx_Read0
L___Lib_SPI_123_SPIx_Read1:
;__Lib_SPI_123.c, 71 :: 		
0x0816	0xF200020C  ADDW	R2, R0, #12
; base end address is: 0 (R0)
0x081A	0x6812    LDR	R2, [R2, #0]
0x081C	0xB290    UXTH	R0, R2
;__Lib_SPI_123.c, 72 :: 		
L_end_SPIx_Read:
0x081E	0xB001    ADD	SP, SP, #4
0x0820	0x4770    BX	LR
; end of __Lib_SPI_123_SPIx_Read
_SPI2_Write:
;__Lib_SPI_123.c, 103 :: 		
; data_out start address is: 0 (R0)
0x25E8	0xB081    SUB	SP, SP, #4
0x25EA	0xF8CDE000  STR	LR, [SP, #0]
; data_out end address is: 0 (R0)
; data_out start address is: 0 (R0)
;__Lib_SPI_123.c, 104 :: 		
0x25EE	0xB281    UXTH	R1, R0
; data_out end address is: 0 (R0)
0x25F0	0x4803    LDR	R0, [PC, #12]
0x25F2	0xF7FEF905  BL	__Lib_SPI_123_SPIx_Read+0
;__Lib_SPI_123.c, 105 :: 		
L_end_SPI2_Write:
0x25F6	0xF8DDE000  LDR	LR, [SP, #0]
0x25FA	0xB001    ADD	SP, SP, #4
0x25FC	0x4770    BX	LR
0x25FE	0xBF00    NOP
0x2600	0x38004000  	SPI2_CR1+0
; end of _SPI2_Write
_SPI3_Write:
;__Lib_SPI_123.c, 129 :: 		
; data_out start address is: 0 (R0)
0x2604	0xB081    SUB	SP, SP, #4
0x2606	0xF8CDE000  STR	LR, [SP, #0]
; data_out end address is: 0 (R0)
; data_out start address is: 0 (R0)
;__Lib_SPI_123.c, 130 :: 		
0x260A	0xB281    UXTH	R1, R0
; data_out end address is: 0 (R0)
0x260C	0x4803    LDR	R0, [PC, #12]
0x260E	0xF7FEF8F7  BL	__Lib_SPI_123_SPIx_Read+0
;__Lib_SPI_123.c, 131 :: 		
L_end_SPI3_Write:
0x2612	0xF8DDE000  LDR	LR, [SP, #0]
0x2616	0xB001    ADD	SP, SP, #4
0x2618	0x4770    BX	LR
0x261A	0xBF00    NOP
0x261C	0x3C004000  	SPI3_CR1+0
; end of _SPI3_Write
_TFT_Write_Data:
;__Lib_TFT_Defs.c, 295 :: 		void TFT_Write_Data(unsigned int _data) {
0x2620	0xB083    SUB	SP, SP, #12
0x2622	0xF8CDE000  STR	LR, [SP, #0]
0x2626	0xF8AD0004  STRH	R0, [SP, #4]
;__Lib_TFT_Defs.c, 296 :: 		TFT_RS = 1;
0x262A	0x2201    MOVS	R2, #1
0x262C	0xB252    SXTB	R2, R2
0x262E	0x4912    LDR	R1, [PC, #72]
0x2630	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 297 :: 		Write_to_Port(Hi(_data));
0x2632	0xA901    ADD	R1, SP, #4
0x2634	0x9102    STR	R1, [SP, #8]
0x2636	0x1C49    ADDS	R1, R1, #1
0x2638	0x7809    LDRB	R1, [R1, #0]
0x263A	0xB2C8    UXTB	R0, R1
0x263C	0xF7FDFD88  BL	__Lib_TFT_Defs_Write_to_Port+0
;__Lib_TFT_Defs.c, 298 :: 		TFT_Write_Strobe();
0x2640	0x2200    MOVS	R2, #0
0x2642	0xB252    SXTB	R2, R2
0x2644	0x490D    LDR	R1, [PC, #52]
0x2646	0x600A    STR	R2, [R1, #0]
0x2648	0xBF00    NOP
0x264A	0x2201    MOVS	R2, #1
0x264C	0xB252    SXTB	R2, R2
0x264E	0x490B    LDR	R1, [PC, #44]
0x2650	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 299 :: 		Write_to_Port(Lo(_data));
0x2652	0x9902    LDR	R1, [SP, #8]
0x2654	0x7809    LDRB	R1, [R1, #0]
0x2656	0xB2C8    UXTB	R0, R1
0x2658	0xF7FDFD7A  BL	__Lib_TFT_Defs_Write_to_Port+0
;__Lib_TFT_Defs.c, 300 :: 		TFT_Write_Strobe();
0x265C	0x2200    MOVS	R2, #0
0x265E	0xB252    SXTB	R2, R2
0x2660	0x4906    LDR	R1, [PC, #24]
0x2662	0x600A    STR	R2, [R1, #0]
0x2664	0xBF00    NOP
0x2666	0x2201    MOVS	R2, #1
0x2668	0xB252    SXTB	R2, R2
0x266A	0x4904    LDR	R1, [PC, #16]
0x266C	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 301 :: 		}
L_end_TFT_Write_Data:
0x266E	0xF8DDE000  LDR	LR, [SP, #0]
0x2672	0xB003    ADD	SP, SP, #12
0x2674	0x4770    BX	LR
0x2676	0xBF00    NOP
0x2678	0x01B04223  	TFT_RS+0
0x267C	0x01AC4223  	TFT_WR+0
; end of _TFT_Write_Data
_TFT_16bit_Write_Data:
;__Lib_TFT_Defs.c, 309 :: 		void TFT_16bit_Write_Data(unsigned int _data) {
; _data start address is: 0 (R0)
0x2534	0xB081    SUB	SP, SP, #4
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_TFT_Defs.c, 310 :: 		TFT_RS = 1;
0x2536	0x2201    MOVS	R2, #1
0x2538	0xB252    SXTB	R2, R2
0x253A	0x4907    LDR	R1, [PC, #28]
0x253C	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 311 :: 		TFT_DataPort = _data;
0x253E	0x4907    LDR	R1, [PC, #28]
0x2540	0x8008    STRH	R0, [R1, #0]
; _data end address is: 0 (R0)
;__Lib_TFT_Defs.c, 312 :: 		TFT_Write_Strobe();
0x2542	0x2200    MOVS	R2, #0
0x2544	0xB252    SXTB	R2, R2
0x2546	0x4906    LDR	R1, [PC, #24]
0x2548	0x600A    STR	R2, [R1, #0]
0x254A	0xBF00    NOP
0x254C	0x2201    MOVS	R2, #1
0x254E	0xB252    SXTB	R2, R2
0x2550	0x4903    LDR	R1, [PC, #12]
0x2552	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 313 :: 		}
L_end_TFT_16bit_Write_Data:
0x2554	0xB001    ADD	SP, SP, #4
0x2556	0x4770    BX	LR
0x2558	0x01B04223  	TFT_RS+0
0x255C	0x180C4001  	TFT_DataPort+0
0x2560	0x01AC4223  	TFT_WR+0
; end of _TFT_16bit_Write_Data
_TFT_SSD1963_8bit_Write_Data:
;__Lib_TFT_Defs.c, 2909 :: 		void TFT_SSD1963_8bit_Write_Data(unsigned int color) {
; color start address is: 0 (R0)
0x288C	0xB081    SUB	SP, SP, #4
0x288E	0xF8CDE000  STR	LR, [SP, #0]
0x2892	0xB283    UXTH	R3, R0
; color end address is: 0 (R0)
; color start address is: 12 (R3)
;__Lib_TFT_Defs.c, 2911 :: 		temp = (color>>11);
0x2894	0x0AD9    LSRS	R1, R3, #11
; temp start address is: 0 (R0)
0x2896	0xB2C8    UXTB	R0, R1
;__Lib_TFT_Defs.c, 2912 :: 		temp = (temp<<3);
0x2898	0x00C1    LSLS	R1, R0, #3
; temp end address is: 0 (R0)
; temp start address is: 16 (R4)
0x289A	0xB2CC    UXTB	R4, R1
;__Lib_TFT_Defs.c, 2913 :: 		if ((temp>>7) == 1) {
0x289C	0x09E1    LSRS	R1, R4, #7
0x289E	0xB2C9    UXTB	R1, R1
0x28A0	0x2901    CMP	R1, #1
0x28A2	0xD102    BNE	L__TFT_SSD1963_8bit_Write_Data195
;__Lib_TFT_Defs.c, 2914 :: 		temp += 7;
0x28A4	0x1DE1    ADDS	R1, R4, #7
; temp end address is: 16 (R4)
; temp start address is: 0 (R0)
0x28A6	0xB2C8    UXTB	R0, R1
; temp end address is: 0 (R0)
;__Lib_TFT_Defs.c, 2915 :: 		}
0x28A8	0xE000    B	L_TFT_SSD1963_8bit_Write_Data171
L__TFT_SSD1963_8bit_Write_Data195:
;__Lib_TFT_Defs.c, 2913 :: 		if ((temp>>7) == 1) {
0x28AA	0xB2E0    UXTB	R0, R4
;__Lib_TFT_Defs.c, 2915 :: 		}
L_TFT_SSD1963_8bit_Write_Data171:
;__Lib_TFT_Defs.c, 2916 :: 		TFT_SSD1963YT_8bit_Write_Command(temp);
; temp start address is: 0 (R0)
; temp end address is: 0 (R0)
0x28AC	0xF7FDFCB0  BL	_TFT_SSD1963YT_8bit_Write_Command+0
;__Lib_TFT_Defs.c, 2917 :: 		temp = (color>>5);
0x28B0	0x0959    LSRS	R1, R3, #5
; temp start address is: 0 (R0)
0x28B2	0xB2C8    UXTB	R0, R1
;__Lib_TFT_Defs.c, 2918 :: 		temp = (temp<<2);
0x28B4	0x0081    LSLS	R1, R0, #2
; temp end address is: 0 (R0)
; temp start address is: 16 (R4)
0x28B6	0xB2CC    UXTB	R4, R1
;__Lib_TFT_Defs.c, 2919 :: 		if ((temp>>7) == 1) {
0x28B8	0x09E1    LSRS	R1, R4, #7
0x28BA	0xB2C9    UXTB	R1, R1
0x28BC	0x2901    CMP	R1, #1
0x28BE	0xD102    BNE	L__TFT_SSD1963_8bit_Write_Data196
;__Lib_TFT_Defs.c, 2920 :: 		temp += 3;
0x28C0	0x1CE1    ADDS	R1, R4, #3
; temp end address is: 16 (R4)
; temp start address is: 0 (R0)
0x28C2	0xB2C8    UXTB	R0, R1
; temp end address is: 0 (R0)
;__Lib_TFT_Defs.c, 2921 :: 		}
0x28C4	0xE000    B	L_TFT_SSD1963_8bit_Write_Data172
L__TFT_SSD1963_8bit_Write_Data196:
;__Lib_TFT_Defs.c, 2919 :: 		if ((temp>>7) == 1) {
0x28C6	0xB2E0    UXTB	R0, R4
;__Lib_TFT_Defs.c, 2921 :: 		}
L_TFT_SSD1963_8bit_Write_Data172:
;__Lib_TFT_Defs.c, 2922 :: 		TFT_SSD1963YT_8bit_Write_Command(temp);
; temp start address is: 0 (R0)
; temp end address is: 0 (R0)
0x28C8	0xF7FDFCA2  BL	_TFT_SSD1963YT_8bit_Write_Command+0
;__Lib_TFT_Defs.c, 2923 :: 		temp = (color<<3);
0x28CC	0x00D9    LSLS	R1, R3, #3
; color end address is: 12 (R3)
; temp start address is: 12 (R3)
0x28CE	0xB2CB    UXTB	R3, R1
;__Lib_TFT_Defs.c, 2924 :: 		if ((temp>>7) == 1) {
0x28D0	0x09D9    LSRS	R1, R3, #7
0x28D2	0xB2C9    UXTB	R1, R1
0x28D4	0x2901    CMP	R1, #1
0x28D6	0xD102    BNE	L__TFT_SSD1963_8bit_Write_Data197
;__Lib_TFT_Defs.c, 2925 :: 		temp += 7;
0x28D8	0x1DD9    ADDS	R1, R3, #7
; temp end address is: 12 (R3)
; temp start address is: 0 (R0)
0x28DA	0xB2C8    UXTB	R0, R1
; temp end address is: 0 (R0)
;__Lib_TFT_Defs.c, 2926 :: 		}
0x28DC	0xE000    B	L_TFT_SSD1963_8bit_Write_Data173
L__TFT_SSD1963_8bit_Write_Data197:
;__Lib_TFT_Defs.c, 2924 :: 		if ((temp>>7) == 1) {
0x28DE	0xB2D8    UXTB	R0, R3
;__Lib_TFT_Defs.c, 2926 :: 		}
L_TFT_SSD1963_8bit_Write_Data173:
;__Lib_TFT_Defs.c, 2927 :: 		TFT_SSD1963YT_8bit_Write_Command(temp);
; temp start address is: 0 (R0)
; temp end address is: 0 (R0)
0x28E0	0xF7FDFC96  BL	_TFT_SSD1963YT_8bit_Write_Command+0
;__Lib_TFT_Defs.c, 2928 :: 		}
L_end_TFT_SSD1963_8bit_Write_Data:
0x28E4	0xF8DDE000  LDR	LR, [SP, #0]
0x28E8	0xB001    ADD	SP, SP, #4
0x28EA	0x4770    BX	LR
; end of _TFT_SSD1963_8bit_Write_Data
__Lib_TFT_Is_SSD1963_Set:
;__Lib_TFT.c, 140 :: 		
0x0E74	0xB081    SUB	SP, SP, #4
;__Lib_TFT.c, 141 :: 		
0x0E76	0x4802    LDR	R0, [PC, #8]
0x0E78	0x7800    LDRB	R0, [R0, #0]
;__Lib_TFT.c, 142 :: 		
L_end_Is_SSD1963_Set:
0x0E7A	0xB001    ADD	SP, SP, #4
0x0E7C	0x4770    BX	LR
0x0E7E	0xBF00    NOP
0x0E80	0x00332000  	__Lib_TFT___SSD1963_controller+0
; end of __Lib_TFT_Is_SSD1963_Set
_pin_reset:
;Reset_Routines.c, 12 :: 		void pin_reset() {
0x3048	0xB081    SUB	SP, SP, #4
;Reset_Routines.c, 13 :: 		RST = 0;  // activate reset
0x304A	0x2100    MOVS	R1, #0
0x304C	0x480E    LDR	R0, [PC, #56]
0x304E	0x6001    STR	R1, [R0, #0]
;Reset_Routines.c, 14 :: 		Delay_ms(5);
0x3050	0xF64E275F  MOVW	R7, #59999
0x3054	0xF2C00700  MOVT	R7, #0
L_pin_reset0:
0x3058	0x1E7F    SUBS	R7, R7, #1
0x305A	0xD1FD    BNE	L_pin_reset0
0x305C	0xBF00    NOP
0x305E	0xBF00    NOP
0x3060	0xBF00    NOP
0x3062	0xBF00    NOP
0x3064	0xBF00    NOP
;Reset_Routines.c, 15 :: 		RST = 1;  // deactivate reset
0x3066	0x2101    MOVS	R1, #1
0x3068	0xB249    SXTB	R1, R1
0x306A	0x4807    LDR	R0, [PC, #28]
0x306C	0x6001    STR	R1, [R0, #0]
;Reset_Routines.c, 16 :: 		Delay_ms(5);
0x306E	0xF64E275F  MOVW	R7, #59999
0x3072	0xF2C00700  MOVT	R7, #0
0x3076	0xBF00    NOP
0x3078	0xBF00    NOP
L_pin_reset2:
0x307A	0x1E7F    SUBS	R7, R7, #1
0x307C	0xD1FD    BNE	L_pin_reset2
0x307E	0xBF00    NOP
0x3080	0xBF00    NOP
0x3082	0xBF00    NOP
;Reset_Routines.c, 17 :: 		}
L_end_pin_reset:
0x3084	0xB001    ADD	SP, SP, #4
0x3086	0x4770    BX	LR
0x3088	0x01884222  	RST+0
; end of _pin_reset
_software_reset:
;Reset_Routines.c, 31 :: 		void software_reset() {                // PWR_reset,BB_reset and MAC_reset at once
0x2F0C	0xB081    SUB	SP, SP, #4
0x2F0E	0xF8CDE000  STR	LR, [SP, #0]
;Reset_Routines.c, 32 :: 		write_ZIGBEE_short(SOFTRST, 0x07);
0x2F12	0x2107    MOVS	R1, #7
0x2F14	0xB249    SXTB	R1, R1
0x2F16	0x202A    MOVS	R0, #42
0x2F18	0xB240    SXTB	R0, R0
0x2F1A	0xF7FDFFB3  BL	_write_ZIGBEE_short+0
;Reset_Routines.c, 33 :: 		}
L_end_software_reset:
0x2F1E	0xF8DDE000  LDR	LR, [SP, #0]
0x2F22	0xB001    ADD	SP, SP, #4
0x2F24	0x4770    BX	LR
; end of _software_reset
_write_ZIGBEE_short:
;ReadWrite_Routines.c, 25 :: 		void write_ZIGBEE_short(short int address, short int data_r) {
; data_r start address is: 4 (R1)
; address start address is: 0 (R0)
0x0E84	0xB081    SUB	SP, SP, #4
0x0E86	0xF8CDE000  STR	LR, [SP, #0]
0x0E8A	0xB24C    SXTB	R4, R1
; data_r end address is: 4 (R1)
; address end address is: 0 (R0)
; address start address is: 0 (R0)
; data_r start address is: 16 (R4)
;ReadWrite_Routines.c, 26 :: 		CS = 0;
0x0E8C	0x2300    MOVS	R3, #0
0x0E8E	0x4A0C    LDR	R2, [PC, #48]
0x0E90	0x6013    STR	R3, [R2, #0]
;ReadWrite_Routines.c, 28 :: 		address = ((address << 1) & 0b01111111) | 0x01; // calculating addressing mode
0x0E92	0x0042    LSLS	R2, R0, #1
0x0E94	0xB212    SXTH	R2, R2
; address end address is: 0 (R0)
0x0E96	0xF002027F  AND	R2, R2, #127
0x0E9A	0xB212    SXTH	R2, R2
0x0E9C	0xF0420201  ORR	R2, R2, #1
;ReadWrite_Routines.c, 29 :: 		SPI3_Write(address);       // addressing register
0x0EA0	0xB250    SXTB	R0, R2
0x0EA2	0xB280    UXTH	R0, R0
0x0EA4	0xF001FBAE  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 30 :: 		SPI3_Write(data_r);        // write data in register
0x0EA8	0xB260    SXTB	R0, R4
0x0EAA	0xB280    UXTH	R0, R0
; data_r end address is: 16 (R4)
0x0EAC	0xF001FBAA  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 32 :: 		CS = 1;
0x0EB0	0x2301    MOVS	R3, #1
0x0EB2	0xB25B    SXTB	R3, R3
0x0EB4	0x4A02    LDR	R2, [PC, #8]
0x0EB6	0x6013    STR	R3, [R2, #0]
;ReadWrite_Routines.c, 33 :: 		}
L_end_write_ZIGBEE_short:
0x0EB8	0xF8DDE000  LDR	LR, [SP, #0]
0x0EBC	0xB001    ADD	SP, SP, #4
0x0EBE	0x4770    BX	LR
0x0EC0	0x81B44222  	CS+0
; end of _write_ZIGBEE_short
_RF_reset:
;Reset_Routines.c, 35 :: 		void RF_reset() {
0x2EB8	0xB082    SUB	SP, SP, #8
0x2EBA	0xF8CDE000  STR	LR, [SP, #0]
;Reset_Routines.c, 36 :: 		short int temp = 0;
;Reset_Routines.c, 37 :: 		temp = read_ZIGBEE_short(RFCTL);
0x2EBE	0x2036    MOVS	R0, #54
0x2EC0	0xB240    SXTB	R0, R0
0x2EC2	0xF7FDFFFF  BL	_read_ZIGBEE_short+0
;Reset_Routines.c, 38 :: 		temp = temp | 0x04;                  // mask for RFRST bit
0x2EC6	0xF0400004  ORR	R0, R0, #4
; temp start address is: 4 (R1)
0x2ECA	0xB241    SXTB	R1, R0
;Reset_Routines.c, 39 :: 		write_ZIGBEE_short(RFCTL, temp);
0x2ECC	0xF88D1004  STRB	R1, [SP, #4]
0x2ED0	0xB241    SXTB	R1, R0
0x2ED2	0x2036    MOVS	R0, #54
0x2ED4	0xB240    SXTB	R0, R0
0x2ED6	0xF7FDFFD5  BL	_write_ZIGBEE_short+0
0x2EDA	0xF99D1004  LDRSB	R1, [SP, #4]
;Reset_Routines.c, 40 :: 		temp = temp & (!0x04);               // mask for RFRST bit
0x2EDE	0xF0010000  AND	R0, R1, #0
; temp end address is: 4 (R1)
;Reset_Routines.c, 41 :: 		write_ZIGBEE_short(RFCTL, temp);
0x2EE2	0xB241    SXTB	R1, R0
0x2EE4	0x2036    MOVS	R0, #54
0x2EE6	0xB240    SXTB	R0, R0
0x2EE8	0xF7FDFFCC  BL	_write_ZIGBEE_short+0
;Reset_Routines.c, 42 :: 		Delay_ms(1);
0x2EEC	0xF64267DF  MOVW	R7, #11999
0x2EF0	0xF2C00700  MOVT	R7, #0
0x2EF4	0xBF00    NOP
0x2EF6	0xBF00    NOP
L_RF_reset4:
0x2EF8	0x1E7F    SUBS	R7, R7, #1
0x2EFA	0xD1FD    BNE	L_RF_reset4
0x2EFC	0xBF00    NOP
0x2EFE	0xBF00    NOP
0x2F00	0xBF00    NOP
;Reset_Routines.c, 43 :: 		}
L_end_RF_reset:
0x2F02	0xF8DDE000  LDR	LR, [SP, #0]
0x2F06	0xB002    ADD	SP, SP, #8
0x2F08	0x4770    BX	LR
; end of _RF_reset
_read_ZIGBEE_short:
;ReadWrite_Routines.c, 36 :: 		short int read_ZIGBEE_short(short int address) {
; address start address is: 0 (R0)
0x0EC4	0xB081    SUB	SP, SP, #4
0x0EC6	0xF8CDE000  STR	LR, [SP, #0]
; address end address is: 0 (R0)
; address start address is: 0 (R0)
;ReadWrite_Routines.c, 37 :: 		short int data_r = 0, dummy_data_r = 0;
; dummy_data_r start address is: 16 (R4)
0x0ECA	0x2400    MOVS	R4, #0
0x0ECC	0xB264    SXTB	R4, R4
;ReadWrite_Routines.c, 39 :: 		CS = 0;
0x0ECE	0x2200    MOVS	R2, #0
0x0ED0	0x490B    LDR	R1, [PC, #44]
0x0ED2	0x600A    STR	R2, [R1, #0]
;ReadWrite_Routines.c, 41 :: 		address = (address << 1) & 0b01111110;      // calculating addressing mode
0x0ED4	0x0041    LSLS	R1, R0, #1
0x0ED6	0xB209    SXTH	R1, R1
; address end address is: 0 (R0)
0x0ED8	0xF001017E  AND	R1, R1, #126
;ReadWrite_Routines.c, 42 :: 		SPI3_Write(address);                        // addressing register
0x0EDC	0xB248    SXTB	R0, R1
0x0EDE	0xB280    UXTH	R0, R0
0x0EE0	0xF001FB90  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 43 :: 		data_r = SPI3_Read(dummy_data_r);           // read data from register
0x0EE4	0xB260    SXTB	R0, R4
0x0EE6	0xB280    UXTH	R0, R0
; dummy_data_r end address is: 16 (R4)
0x0EE8	0xF7FFFC7C  BL	_SPI3_Read+0
;ReadWrite_Routines.c, 44 :: 		CS = 1;
0x0EEC	0x2201    MOVS	R2, #1
0x0EEE	0xB252    SXTB	R2, R2
0x0EF0	0x4903    LDR	R1, [PC, #12]
0x0EF2	0x600A    STR	R2, [R1, #0]
;ReadWrite_Routines.c, 45 :: 		return data_r;
0x0EF4	0xB240    SXTB	R0, R0
;ReadWrite_Routines.c, 46 :: 		}
L_end_read_ZIGBEE_short:
0x0EF6	0xF8DDE000  LDR	LR, [SP, #0]
0x0EFA	0xB001    ADD	SP, SP, #4
0x0EFC	0x4770    BX	LR
0x0EFE	0xBF00    NOP
0x0F00	0x81B44222  	CS+0
; end of _read_ZIGBEE_short
_SPI3_Read:
;__Lib_SPI_123.c, 125 :: 		
; data_out start address is: 0 (R0)
0x07E4	0xB081    SUB	SP, SP, #4
0x07E6	0xF8CDE000  STR	LR, [SP, #0]
; data_out end address is: 0 (R0)
; data_out start address is: 0 (R0)
;__Lib_SPI_123.c, 126 :: 		
0x07EA	0xB281    UXTH	R1, R0
; data_out end address is: 0 (R0)
0x07EC	0x4803    LDR	R0, [PC, #12]
0x07EE	0xF000F807  BL	__Lib_SPI_123_SPIx_Read+0
;__Lib_SPI_123.c, 127 :: 		
L_end_SPI3_Read:
0x07F2	0xF8DDE000  LDR	LR, [SP, #0]
0x07F6	0xB001    ADD	SP, SP, #4
0x07F8	0x4770    BX	LR
0x07FA	0xBF00    NOP
0x07FC	0x3C004000  	SPI3_CR1+0
; end of _SPI3_Read
_set_wake_from_pin:
;Misc_Routines.c, 364 :: 		void set_wake_from_pin() {
0x2E70	0xB081    SUB	SP, SP, #4
0x2E72	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 365 :: 		short int temp = 0;
;Misc_Routines.c, 367 :: 		WAKE_ = 0;
0x2E76	0x2100    MOVS	R1, #0
0x2E78	0x480D    LDR	R0, [PC, #52]
0x2E7A	0x6001    STR	R1, [R0, #0]
;Misc_Routines.c, 368 :: 		temp = read_ZIGBEE_short(RXFLUSH);
0x2E7C	0x200D    MOVS	R0, #13
0x2E7E	0xB240    SXTB	R0, R0
0x2E80	0xF7FEF820  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 369 :: 		temp = temp | 0x60;                     // mask
0x2E84	0xF0400060  ORR	R0, R0, #96
;Misc_Routines.c, 370 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x2E88	0xB241    SXTB	R1, R0
0x2E8A	0x200D    MOVS	R0, #13
0x2E8C	0xB240    SXTB	R0, R0
0x2E8E	0xF7FDFFF9  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 372 :: 		temp = read_ZIGBEE_short(WAKECON);
0x2E92	0x2022    MOVS	R0, #34
0x2E94	0xB240    SXTB	R0, R0
0x2E96	0xF7FEF815  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 373 :: 		temp = temp | 0x80;
0x2E9A	0xF0400080  ORR	R0, R0, #128
;Misc_Routines.c, 374 :: 		write_ZIGBEE_short(WAKECON, temp);
0x2E9E	0xB241    SXTB	R1, R0
0x2EA0	0x2022    MOVS	R0, #34
0x2EA2	0xB240    SXTB	R0, R0
0x2EA4	0xF7FDFFEE  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 375 :: 		}
L_end_set_wake_from_pin:
0x2EA8	0xF8DDE000  LDR	LR, [SP, #0]
0x2EAC	0xB001    ADD	SP, SP, #4
0x2EAE	0x4770    BX	LR
0x2EB0	0x01904221  	WAKE_+0
; end of _set_wake_from_pin
_set_long_address:
;Misc_Routines.c, 348 :: 		void set_long_address(short int * address) {
; i start address is: 12 (R3)
0x2F80	0xB083    SUB	SP, SP, #12
0x2F82	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 351 :: 		for(i = 0; i < 8; i++) {
;Misc_Routines.c, 348 :: 		void set_long_address(short int * address) {
;Misc_Routines.c, 351 :: 		for(i = 0; i < 8; i++) {
;Misc_Routines.c, 348 :: 		void set_long_address(short int * address) {
0x2F86	0x9002    STR	R0, [SP, #8]
; i end address is: 12 (R3)
;Misc_Routines.c, 349 :: 		short int i = 0;
;Misc_Routines.c, 351 :: 		for(i = 0; i < 8; i++) {
; i start address is: 12 (R3)
0x2F88	0x2300    MOVS	R3, #0
0x2F8A	0xB25B    SXTB	R3, R3
; i end address is: 12 (R3)
0x2F8C	0xB258    SXTB	R0, R3
L_set_long_address41:
; i start address is: 0 (R0)
0x2F8E	0x2808    CMP	R0, #8
0x2F90	0xDA11    BGE	L_set_long_address42
;Misc_Routines.c, 352 :: 		write_ZIGBEE_short(EADR0 + i, address[i]);   // 0x05 address of EADR0
0x2F92	0x9902    LDR	R1, [SP, #8]
0x2F94	0x1809    ADDS	R1, R1, R0
0x2F96	0xF9911000  LDRSB	R1, [R1, #0]
0x2F9A	0xB24A    SXTB	R2, R1
0x2F9C	0x1D41    ADDS	R1, R0, #5
0x2F9E	0xF88D0004  STRB	R0, [SP, #4]
0x2FA2	0xB248    SXTB	R0, R1
0x2FA4	0xB251    SXTB	R1, R2
0x2FA6	0xF7FDFF6D  BL	_write_ZIGBEE_short+0
0x2FAA	0xF99D0004  LDRSB	R0, [SP, #4]
;Misc_Routines.c, 351 :: 		for(i = 0; i < 8; i++) {
0x2FAE	0x1C41    ADDS	R1, R0, #1
; i end address is: 0 (R0)
; i start address is: 12 (R3)
0x2FB0	0xB24B    SXTB	R3, R1
;Misc_Routines.c, 353 :: 		}
0x2FB2	0xB258    SXTB	R0, R3
; i end address is: 12 (R3)
0x2FB4	0xE7EB    B	L_set_long_address41
L_set_long_address42:
;Misc_Routines.c, 354 :: 		}
L_end_set_long_address:
0x2FB6	0xF8DDE000  LDR	LR, [SP, #0]
0x2FBA	0xB003    ADD	SP, SP, #12
0x2FBC	0x4770    BX	LR
; end of _set_long_address
_set_short_address:
;Misc_Routines.c, 343 :: 		void set_short_address(short int * address) {
; address start address is: 0 (R0)
0x2F54	0xB082    SUB	SP, SP, #8
0x2F56	0xF8CDE000  STR	LR, [SP, #0]
; address end address is: 0 (R0)
; address start address is: 0 (R0)
;Misc_Routines.c, 344 :: 		write_ZIGBEE_short(SADRL, address[0]);
0x2F5A	0xF9901000  LDRSB	R1, [R0, #0]
0x2F5E	0x9001    STR	R0, [SP, #4]
0x2F60	0x2003    MOVS	R0, #3
0x2F62	0xB240    SXTB	R0, R0
0x2F64	0xF7FDFF8E  BL	_write_ZIGBEE_short+0
0x2F68	0x9801    LDR	R0, [SP, #4]
;Misc_Routines.c, 345 :: 		write_ZIGBEE_short(SADRH, address[1]);
0x2F6A	0x1C41    ADDS	R1, R0, #1
; address end address is: 0 (R0)
0x2F6C	0xF9911000  LDRSB	R1, [R1, #0]
0x2F70	0x2004    MOVS	R0, #4
0x2F72	0xB240    SXTB	R0, R0
0x2F74	0xF7FDFF86  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 346 :: 		}
L_end_set_short_address:
0x2F78	0xF8DDE000  LDR	LR, [SP, #0]
0x2F7C	0xB002    ADD	SP, SP, #8
0x2F7E	0x4770    BX	LR
; end of _set_short_address
_set_PAN_ID:
;Misc_Routines.c, 356 :: 		void set_PAN_ID(short int * address) {
; address start address is: 0 (R0)
0x2F28	0xB082    SUB	SP, SP, #8
0x2F2A	0xF8CDE000  STR	LR, [SP, #0]
; address end address is: 0 (R0)
; address start address is: 0 (R0)
;Misc_Routines.c, 357 :: 		write_ZIGBEE_short(PANIDL, address[0]);
0x2F2E	0xF9901000  LDRSB	R1, [R0, #0]
0x2F32	0x9001    STR	R0, [SP, #4]
0x2F34	0x2001    MOVS	R0, #1
0x2F36	0xB240    SXTB	R0, R0
0x2F38	0xF7FDFFA4  BL	_write_ZIGBEE_short+0
0x2F3C	0x9801    LDR	R0, [SP, #4]
;Misc_Routines.c, 358 :: 		write_ZIGBEE_short(PANIDH, address[1]);
0x2F3E	0x1C41    ADDS	R1, R0, #1
; address end address is: 0 (R0)
0x2F40	0xF9911000  LDRSB	R1, [R1, #0]
0x2F44	0x2002    MOVS	R0, #2
0x2F46	0xB240    SXTB	R0, R0
0x2F48	0xF7FDFF9C  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 359 :: 		}
L_end_set_PAN_ID:
0x2F4C	0xF8DDE000  LDR	LR, [SP, #0]
0x2F50	0xB002    ADD	SP, SP, #8
0x2F52	0x4770    BX	LR
; end of _set_PAN_ID
_init_ZIGBEE_nonbeacon:
;Misc_Routines.c, 418 :: 		void init_ZIGBEE_nonbeacon() {
0x31DC	0xB081    SUB	SP, SP, #4
0x31DE	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 419 :: 		init_ZIGBEE_basic();
0x31E2	0xF7FEF9BD  BL	_init_ZIGBEE_basic+0
;Misc_Routines.c, 420 :: 		set_CCA_mode(1);     // Set CCA mode to ED and set threshold
0x31E6	0x2001    MOVS	R0, #1
0x31E8	0xB240    SXTB	R0, R0
0x31EA	0xF7FEFA0D  BL	_set_CCA_mode+0
;Misc_Routines.c, 421 :: 		set_RSSI_mode(2);    // RSSI2 mode
0x31EE	0x2002    MOVS	R0, #2
0x31F0	0xB240    SXTB	R0, R0
0x31F2	0xF7FEF881  BL	_set_RSSI_mode+0
;Misc_Routines.c, 422 :: 		enable_interrupt();  // Enables all interrupts
0x31F6	0xF7FEF9F9  BL	_enable_interrupt+0
;Misc_Routines.c, 423 :: 		set_channel(11);     // Channel 11
0x31FA	0x200B    MOVS	R0, #11
0x31FC	0xB240    SXTB	R0, R0
0x31FE	0xF7FEF8C7  BL	_set_channel+0
;Misc_Routines.c, 424 :: 		RF_reset();
0x3202	0xF7FFFE59  BL	_RF_reset+0
;Misc_Routines.c, 425 :: 		}
L_end_init_ZIGBEE_nonbeacon:
0x3206	0xF8DDE000  LDR	LR, [SP, #0]
0x320A	0xB001    ADD	SP, SP, #4
0x320C	0x4770    BX	LR
; end of _init_ZIGBEE_nonbeacon
_init_ZIGBEE_basic:
;Misc_Routines.c, 407 :: 		void init_ZIGBEE_basic() {
0x1560	0xB081    SUB	SP, SP, #4
0x1562	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 408 :: 		write_ZIGBEE_short(PACON2, 0x98);   // Initialize FIFOEN = 1 and TXONTS = 0x6
0x1566	0x2198    MOVS	R1, #152
0x1568	0xB249    SXTB	R1, R1
0x156A	0x2018    MOVS	R0, #24
0x156C	0xB240    SXTB	R0, R0
0x156E	0xF7FFFC89  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 409 :: 		write_ZIGBEE_short(TXSTBL, 0x95);   // Initialize RFSTBL = 0x9
0x1572	0x2195    MOVS	R1, #149
0x1574	0xB249    SXTB	R1, R1
0x1576	0x202E    MOVS	R0, #46
0x1578	0xB240    SXTB	R0, R0
0x157A	0xF7FFFC83  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 410 :: 		write_ZIGBEE_long(RFCON1, 0x01);    // Initialize VCOOPT = 0x01
0x157E	0x2101    MOVS	R1, #1
0x1580	0xB249    SXTB	R1, R1
0x1582	0xF2402001  MOVW	R0, #513
0x1586	0xB200    SXTH	R0, R0
0x1588	0xF7FFF96A  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 411 :: 		enable_PLL();                       // Enable PLL (PLLEN = 1)
0x158C	0xF7FFF95A  BL	_enable_PLL+0
;Misc_Routines.c, 412 :: 		write_ZIGBEE_long(RFCON6, 0x90);    // Initialize TXFIL = 1 and 20MRECVR = 1
0x1590	0x2190    MOVS	R1, #144
0x1592	0xB249    SXTB	R1, R1
0x1594	0xF2402006  MOVW	R0, #518
0x1598	0xB200    SXTH	R0, R0
0x159A	0xF7FFF961  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 413 :: 		write_ZIGBEE_long(RFCON7, 0x80);    // Initialize SLPCLKSEL = 0x2 (100 kHz Internal oscillator)
0x159E	0x2180    MOVS	R1, #128
0x15A0	0xB249    SXTB	R1, R1
0x15A2	0xF2402007  MOVW	R0, #519
0x15A6	0xB200    SXTH	R0, R0
0x15A8	0xF7FFF95A  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 414 :: 		write_ZIGBEE_long(RFCON8, 0x10);    // Initialize RFVCO = 1
0x15AC	0x2110    MOVS	R1, #16
0x15AE	0xB249    SXTB	R1, R1
0x15B0	0xF2402008  MOVW	R0, #520
0x15B4	0xB200    SXTH	R0, R0
0x15B6	0xF7FFF953  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 415 :: 		write_ZIGBEE_long(SLPCON1, 0x21);   // Initialize CLKOUTEN = 1 and SLPCLKDIV = 0x01
0x15BA	0x2121    MOVS	R1, #33
0x15BC	0xB249    SXTB	R1, R1
0x15BE	0xF2402020  MOVW	R0, #544
0x15C2	0xB200    SXTH	R0, R0
0x15C4	0xF7FFF94C  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 416 :: 		}
L_end_init_ZIGBEE_basic:
0x15C8	0xF8DDE000  LDR	LR, [SP, #0]
0x15CC	0xB001    ADD	SP, SP, #4
0x15CE	0x4770    BX	LR
; end of _init_ZIGBEE_basic
_write_ZIGBEE_long:
;ReadWrite_Routines.c, 52 :: 		void write_ZIGBEE_long(int address, short int data_r) {
; data_r start address is: 4 (R1)
; address start address is: 0 (R0)
0x0860	0xB081    SUB	SP, SP, #4
0x0862	0xF8CDE000  STR	LR, [SP, #0]
0x0866	0xB24C    SXTB	R4, R1
; data_r end address is: 4 (R1)
; address end address is: 0 (R0)
; address start address is: 0 (R0)
; data_r start address is: 16 (R4)
;ReadWrite_Routines.c, 53 :: 		short int address_high = 0, address_low = 0;
;ReadWrite_Routines.c, 55 :: 		CS = 0;
0x0868	0x2300    MOVS	R3, #0
0x086A	0x4A12    LDR	R2, [PC, #72]
0x086C	0x6013    STR	R3, [R2, #0]
;ReadWrite_Routines.c, 57 :: 		address_high = (((short int)(address >> 3)) & 0b01111111) | 0x80;  // calculating addressing mode
0x086E	0x10C2    ASRS	R2, R0, #3
0x0870	0xB252    SXTB	R2, R2
0x0872	0xF002027F  AND	R2, R2, #127
0x0876	0xB252    SXTB	R2, R2
0x0878	0xF0420380  ORR	R3, R2, #128
;ReadWrite_Routines.c, 58 :: 		address_low  = (((short int)(address << 5)) & 0b11100000) | 0x10;  // calculating addressing mode
0x087C	0x0142    LSLS	R2, R0, #5
; address end address is: 0 (R0)
0x087E	0xB252    SXTB	R2, R2
0x0880	0xF00202E0  AND	R2, R2, #224
0x0884	0xB212    SXTH	R2, R2
0x0886	0xF0420210  ORR	R2, R2, #16
; address_low start address is: 20 (R5)
0x088A	0xB255    SXTB	R5, R2
;ReadWrite_Routines.c, 59 :: 		SPI3_Write(address_high);           // addressing register
0x088C	0xB258    SXTB	R0, R3
0x088E	0xB280    UXTH	R0, R0
0x0890	0xF001FEB8  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 60 :: 		SPI3_Write(address_low);            // addressing register
0x0894	0xB268    SXTB	R0, R5
0x0896	0xB280    UXTH	R0, R0
; address_low end address is: 20 (R5)
0x0898	0xF001FEB4  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 61 :: 		SPI3_Write(data_r);                 // write data in registerr
0x089C	0xB260    SXTB	R0, R4
0x089E	0xB280    UXTH	R0, R0
; data_r end address is: 16 (R4)
0x08A0	0xF001FEB0  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 63 :: 		CS = 1;
0x08A4	0x2301    MOVS	R3, #1
0x08A6	0xB25B    SXTB	R3, R3
0x08A8	0x4A02    LDR	R2, [PC, #8]
0x08AA	0x6013    STR	R3, [R2, #0]
;ReadWrite_Routines.c, 64 :: 		}
L_end_write_ZIGBEE_long:
0x08AC	0xF8DDE000  LDR	LR, [SP, #0]
0x08B0	0xB001    ADD	SP, SP, #4
0x08B2	0x4770    BX	LR
0x08B4	0x81B44222  	CS+0
; end of _write_ZIGBEE_long
_enable_PLL:
;Misc_Routines.c, 385 :: 		void enable_PLL() {
0x0844	0xB081    SUB	SP, SP, #4
0x0846	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 386 :: 		write_ZIGBEE_long(RFCON2, 0x80);       // mask for PLL enable
0x084A	0x2180    MOVS	R1, #128
0x084C	0xB249    SXTB	R1, R1
0x084E	0xF2402002  MOVW	R0, #514
0x0852	0xB200    SXTH	R0, R0
0x0854	0xF000F804  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 387 :: 		}
L_end_enable_PLL:
0x0858	0xF8DDE000  LDR	LR, [SP, #0]
0x085C	0xB001    ADD	SP, SP, #4
0x085E	0x4770    BX	LR
; end of _enable_PLL
_set_CCA_mode:
;Misc_Routines.c, 76 :: 		void set_CCA_mode(short int CCA_mode) {
; CCA_mode start address is: 0 (R0)
0x1608	0xB081    SUB	SP, SP, #4
0x160A	0xF8CDE000  STR	LR, [SP, #0]
; CCA_mode end address is: 0 (R0)
; CCA_mode start address is: 0 (R0)
;Misc_Routines.c, 77 :: 		short int temp = 0;
;Misc_Routines.c, 78 :: 		switch(CCA_mode) {
0x160E	0xE050    B	L_set_CCA_mode21
; CCA_mode end address is: 0 (R0)
;Misc_Routines.c, 79 :: 		case 1: {                               // ENERGY ABOVE THRESHOLD
L_set_CCA_mode23:
;Misc_Routines.c, 80 :: 		temp = read_ZIGBEE_short(BBREG2);
0x1610	0x203A    MOVS	R0, #58
0x1612	0xB240    SXTB	R0, R0
0x1614	0xF7FFFC56  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 81 :: 		temp = temp | 0x80;                   // 0x80 mask
0x1618	0xF0400180  ORR	R1, R0, #128
;Misc_Routines.c, 82 :: 		temp = temp & 0xDF;                   // 0xDF mask
0x161C	0xB249    SXTB	R1, R1
0x161E	0xF00101DF  AND	R1, R1, #223
;Misc_Routines.c, 83 :: 		write_ZIGBEE_short(BBREG2, temp);
0x1622	0xB249    SXTB	R1, R1
0x1624	0x203A    MOVS	R0, #58
0x1626	0xB240    SXTB	R0, R0
0x1628	0xF7FFFC2C  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 84 :: 		write_ZIGBEE_short(CCAEDTH, 0x60);    // Set CCA ED threshold to -69 dBm
0x162C	0x2160    MOVS	R1, #96
0x162E	0xB249    SXTB	R1, R1
0x1630	0x203F    MOVS	R0, #63
0x1632	0xB240    SXTB	R0, R0
0x1634	0xF7FFFC26  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 86 :: 		break;
0x1638	0xE041    B	L_set_CCA_mode22
;Misc_Routines.c, 88 :: 		case 2: {                               // CARRIER SENSE ONLY
L_set_CCA_mode24:
;Misc_Routines.c, 89 :: 		temp = read_ZIGBEE_short(BBREG2);
0x163A	0x203A    MOVS	R0, #58
0x163C	0xB240    SXTB	R0, R0
0x163E	0xF7FFFC41  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 90 :: 		temp = temp | 0x40;                   // 0x40 mask
0x1642	0xF0400140  ORR	R1, R0, #64
0x1646	0xB249    SXTB	R1, R1
;Misc_Routines.c, 91 :: 		temp = temp & 0x7F;                   // 0x7F mask
0x1648	0xF001017F  AND	R1, R1, #127
;Misc_Routines.c, 92 :: 		write_ZIGBEE_short(BBREG2, temp);
0x164C	0x203A    MOVS	R0, #58
0x164E	0xB240    SXTB	R0, R0
0x1650	0xF7FFFC18  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 94 :: 		temp = read_ZIGBEE_short(BBREG2);     // carrier sense threshold
0x1654	0x203A    MOVS	R0, #58
0x1656	0xB240    SXTB	R0, R0
0x1658	0xF7FFFC34  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 95 :: 		temp = temp | 0x38;
0x165C	0xF0400138  ORR	R1, R0, #56
0x1660	0xB249    SXTB	R1, R1
;Misc_Routines.c, 96 :: 		temp = temp & 0xFB;
0x1662	0xF00101FB  AND	R1, R1, #251
;Misc_Routines.c, 97 :: 		write_ZIGBEE_short(BBREG2, temp);
0x1666	0xB249    SXTB	R1, R1
0x1668	0x203A    MOVS	R0, #58
0x166A	0xB240    SXTB	R0, R0
0x166C	0xF7FFFC0A  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 99 :: 		break;
0x1670	0xE025    B	L_set_CCA_mode22
;Misc_Routines.c, 101 :: 		case 3: {                               // CARRIER SENSE AND ENERGY ABOVE THRESHOLD
L_set_CCA_mode25:
;Misc_Routines.c, 102 :: 		temp = read_ZIGBEE_short(BBREG2);
0x1672	0x203A    MOVS	R0, #58
0x1674	0xB240    SXTB	R0, R0
0x1676	0xF7FFFC25  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 103 :: 		temp = temp | 0xC0;                   // 0xC0 mask
0x167A	0xF04001C0  ORR	R1, R0, #192
;Misc_Routines.c, 104 :: 		write_ZIGBEE_short(BBREG2, temp);
0x167E	0xB249    SXTB	R1, R1
0x1680	0x203A    MOVS	R0, #58
0x1682	0xB240    SXTB	R0, R0
0x1684	0xF7FFFBFE  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 106 :: 		temp = read_ZIGBEE_short(BBREG2);     // carrier sense threshold
0x1688	0x203A    MOVS	R0, #58
0x168A	0xB240    SXTB	R0, R0
0x168C	0xF7FFFC1A  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 107 :: 		temp = temp | 0x38;                   // 0x38 mask
0x1690	0xF0400138  ORR	R1, R0, #56
0x1694	0xB249    SXTB	R1, R1
;Misc_Routines.c, 108 :: 		temp = temp & 0xFB;                   // 0xFB mask
0x1696	0xF00101FB  AND	R1, R1, #251
;Misc_Routines.c, 109 :: 		write_ZIGBEE_short(BBREG2, temp);
0x169A	0xB249    SXTB	R1, R1
0x169C	0x203A    MOVS	R0, #58
0x169E	0xB240    SXTB	R0, R0
0x16A0	0xF7FFFBF0  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 111 :: 		write_ZIGBEE_short(CCAEDTH, 0x60);    // Set CCA ED threshold to -69 dBm
0x16A4	0x2160    MOVS	R1, #96
0x16A6	0xB249    SXTB	R1, R1
0x16A8	0x203F    MOVS	R0, #63
0x16AA	0xB240    SXTB	R0, R0
0x16AC	0xF7FFFBEA  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 113 :: 		break;
0x16B0	0xE005    B	L_set_CCA_mode22
;Misc_Routines.c, 114 :: 		}
L_set_CCA_mode21:
; CCA_mode start address is: 0 (R0)
0x16B2	0x2801    CMP	R0, #1
0x16B4	0xD0AC    BEQ	L_set_CCA_mode23
0x16B6	0x2802    CMP	R0, #2
0x16B8	0xD0BF    BEQ	L_set_CCA_mode24
0x16BA	0x2803    CMP	R0, #3
0x16BC	0xD0D9    BEQ	L_set_CCA_mode25
; CCA_mode end address is: 0 (R0)
L_set_CCA_mode22:
;Misc_Routines.c, 115 :: 		}
L_end_set_CCA_mode:
0x16BE	0xF8DDE000  LDR	LR, [SP, #0]
0x16C2	0xB001    ADD	SP, SP, #4
0x16C4	0x4770    BX	LR
; end of _set_CCA_mode
_set_RSSI_mode:
;Misc_Routines.c, 120 :: 		void set_RSSI_mode(short int RSSI_mode) {       // 1 for RSSI1, 2 for RSSI2 mode
; RSSI_mode start address is: 0 (R0)
0x12F8	0xB081    SUB	SP, SP, #4
0x12FA	0xF8CDE000  STR	LR, [SP, #0]
; RSSI_mode end address is: 0 (R0)
; RSSI_mode start address is: 0 (R0)
;Misc_Routines.c, 121 :: 		short int temp = 0;
;Misc_Routines.c, 123 :: 		switch(RSSI_mode) {
0x12FE	0xE012    B	L_set_RSSI_mode26
; RSSI_mode end address is: 0 (R0)
;Misc_Routines.c, 124 :: 		case 1: {
L_set_RSSI_mode28:
;Misc_Routines.c, 125 :: 		temp = read_ZIGBEE_short(BBREG6);
0x1300	0x203E    MOVS	R0, #62
0x1302	0xB240    SXTB	R0, R0
0x1304	0xF7FFFDDE  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 126 :: 		temp = temp | 0x80;                       // 0x80 mask for RSSI1 mode
0x1308	0xF0400180  ORR	R1, R0, #128
;Misc_Routines.c, 127 :: 		write_ZIGBEE_short(BBREG6, temp);
0x130C	0xB249    SXTB	R1, R1
0x130E	0x203E    MOVS	R0, #62
0x1310	0xB240    SXTB	R0, R0
0x1312	0xF7FFFDB7  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 129 :: 		break;
0x1316	0xE00A    B	L_set_RSSI_mode27
;Misc_Routines.c, 131 :: 		case 2:
L_set_RSSI_mode29:
;Misc_Routines.c, 132 :: 		write_ZIGBEE_short(BBREG6, 0x40);         // 0x40 data for RSSI2 mode
0x1318	0x2140    MOVS	R1, #64
0x131A	0xB249    SXTB	R1, R1
0x131C	0x203E    MOVS	R0, #62
0x131E	0xB240    SXTB	R0, R0
0x1320	0xF7FFFDB0  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 133 :: 		break;
0x1324	0xE003    B	L_set_RSSI_mode27
;Misc_Routines.c, 134 :: 		}
L_set_RSSI_mode26:
; RSSI_mode start address is: 0 (R0)
0x1326	0x2801    CMP	R0, #1
0x1328	0xD0EA    BEQ	L_set_RSSI_mode28
0x132A	0x2802    CMP	R0, #2
0x132C	0xD0F4    BEQ	L_set_RSSI_mode29
; RSSI_mode end address is: 0 (R0)
L_set_RSSI_mode27:
;Misc_Routines.c, 135 :: 		}
L_end_set_RSSI_mode:
0x132E	0xF8DDE000  LDR	LR, [SP, #0]
0x1332	0xB001    ADD	SP, SP, #4
0x1334	0x4770    BX	LR
; end of _set_RSSI_mode
_enable_interrupt:
;Misc_Routines.c, 11 :: 		void enable_interrupt() {
0x15EC	0xB081    SUB	SP, SP, #4
0x15EE	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 12 :: 		write_ZIGBEE_short(INTCON_M, 0x00);   //0x00  all INTerrupts are enable
0x15F2	0x2100    MOVS	R1, #0
0x15F4	0xB249    SXTB	R1, R1
0x15F6	0x2032    MOVS	R0, #50
0x15F8	0xB240    SXTB	R0, R0
0x15FA	0xF7FFFC43  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 13 :: 		}
L_end_enable_interrupt:
0x15FE	0xF8DDE000  LDR	LR, [SP, #0]
0x1602	0xB001    ADD	SP, SP, #4
0x1604	0x4770    BX	LR
; end of _enable_interrupt
_set_channel:
;Misc_Routines.c, 18 :: 		void set_channel(short int channel_number) {               // 11-26 possible channels
; channel_number start address is: 0 (R0)
0x1390	0xB081    SUB	SP, SP, #4
0x1392	0xF8CDE000  STR	LR, [SP, #0]
; channel_number end address is: 0 (R0)
; channel_number start address is: 0 (R0)
;Misc_Routines.c, 19 :: 		if((channel_number > 26) || (channel_number < 11)) channel_number = 11;
0x1396	0x281A    CMP	R0, #26
0x1398	0xDC02    BGT	L__set_channel57
0x139A	0x280B    CMP	R0, #11
0x139C	0xDB00    BLT	L__set_channel56
; channel_number end address is: 0 (R0)
0x139E	0xE001    B	L_set_channel2
L__set_channel57:
L__set_channel56:
; channel_number start address is: 0 (R0)
0x13A0	0x200B    MOVS	R0, #11
0x13A2	0xB240    SXTB	R0, R0
; channel_number end address is: 0 (R0)
L_set_channel2:
;Misc_Routines.c, 20 :: 		switch(channel_number) {
; channel_number start address is: 0 (R0)
0x13A4	0xE07F    B	L_set_channel3
; channel_number end address is: 0 (R0)
;Misc_Routines.c, 21 :: 		case 11:
L_set_channel5:
;Misc_Routines.c, 22 :: 		write_ZIGBEE_long(RFCON0, 0x02);  // 0x02 for 11. channel
0x13A6	0x2102    MOVS	R1, #2
0x13A8	0xB249    SXTB	R1, R1
0x13AA	0xF2402000  MOVW	R0, #512
0x13AE	0xB200    SXTH	R0, R0
0x13B0	0xF7FFFA56  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 23 :: 		break;
0x13B4	0xE098    B	L_set_channel4
;Misc_Routines.c, 24 :: 		case 12:
L_set_channel6:
;Misc_Routines.c, 25 :: 		write_ZIGBEE_long(RFCON0, 0x12);  // 0x12 for 12. channel
0x13B6	0x2112    MOVS	R1, #18
0x13B8	0xB249    SXTB	R1, R1
0x13BA	0xF2402000  MOVW	R0, #512
0x13BE	0xB200    SXTH	R0, R0
0x13C0	0xF7FFFA4E  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 26 :: 		break;
0x13C4	0xE090    B	L_set_channel4
;Misc_Routines.c, 27 :: 		case 13:
L_set_channel7:
;Misc_Routines.c, 28 :: 		write_ZIGBEE_long(RFCON0, 0x22);  // 0x22 for 13. channel
0x13C6	0x2122    MOVS	R1, #34
0x13C8	0xB249    SXTB	R1, R1
0x13CA	0xF2402000  MOVW	R0, #512
0x13CE	0xB200    SXTH	R0, R0
0x13D0	0xF7FFFA46  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 29 :: 		break;
0x13D4	0xE088    B	L_set_channel4
;Misc_Routines.c, 30 :: 		case 14:
L_set_channel8:
;Misc_Routines.c, 31 :: 		write_ZIGBEE_long(RFCON0, 0x32);  // 0x32 for 14. channel
0x13D6	0x2132    MOVS	R1, #50
0x13D8	0xB249    SXTB	R1, R1
0x13DA	0xF2402000  MOVW	R0, #512
0x13DE	0xB200    SXTH	R0, R0
0x13E0	0xF7FFFA3E  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 32 :: 		break;
0x13E4	0xE080    B	L_set_channel4
;Misc_Routines.c, 33 :: 		case 15:
L_set_channel9:
;Misc_Routines.c, 34 :: 		write_ZIGBEE_long(RFCON0, 0x42);  // 0x42 for 15. channel
0x13E6	0x2142    MOVS	R1, #66
0x13E8	0xB249    SXTB	R1, R1
0x13EA	0xF2402000  MOVW	R0, #512
0x13EE	0xB200    SXTH	R0, R0
0x13F0	0xF7FFFA36  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 35 :: 		break;
0x13F4	0xE078    B	L_set_channel4
;Misc_Routines.c, 36 :: 		case 16:
L_set_channel10:
;Misc_Routines.c, 37 :: 		write_ZIGBEE_long(RFCON0, 0x52);  // 0x52 for 16. channel
0x13F6	0x2152    MOVS	R1, #82
0x13F8	0xB249    SXTB	R1, R1
0x13FA	0xF2402000  MOVW	R0, #512
0x13FE	0xB200    SXTH	R0, R0
0x1400	0xF7FFFA2E  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 38 :: 		break;
0x1404	0xE070    B	L_set_channel4
;Misc_Routines.c, 39 :: 		case 17:
L_set_channel11:
;Misc_Routines.c, 40 :: 		write_ZIGBEE_long(RFCON0, 0x62);  // 0x62 for 17. channel
0x1406	0x2162    MOVS	R1, #98
0x1408	0xB249    SXTB	R1, R1
0x140A	0xF2402000  MOVW	R0, #512
0x140E	0xB200    SXTH	R0, R0
0x1410	0xF7FFFA26  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 41 :: 		break;
0x1414	0xE068    B	L_set_channel4
;Misc_Routines.c, 42 :: 		case 18:
L_set_channel12:
;Misc_Routines.c, 43 :: 		write_ZIGBEE_long(RFCON0, 0x72);  // 0x72 for 18. channel
0x1416	0x2172    MOVS	R1, #114
0x1418	0xB249    SXTB	R1, R1
0x141A	0xF2402000  MOVW	R0, #512
0x141E	0xB200    SXTH	R0, R0
0x1420	0xF7FFFA1E  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 44 :: 		break;
0x1424	0xE060    B	L_set_channel4
;Misc_Routines.c, 45 :: 		case 19:
L_set_channel13:
;Misc_Routines.c, 46 :: 		write_ZIGBEE_long(RFCON0, 0x82);  // 0x82 for 19. channel
0x1426	0x2182    MOVS	R1, #130
0x1428	0xB249    SXTB	R1, R1
0x142A	0xF2402000  MOVW	R0, #512
0x142E	0xB200    SXTH	R0, R0
0x1430	0xF7FFFA16  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 47 :: 		break;
0x1434	0xE058    B	L_set_channel4
;Misc_Routines.c, 48 :: 		case 20:
L_set_channel14:
;Misc_Routines.c, 49 :: 		write_ZIGBEE_long(RFCON0, 0x92);  // 0x92 for 20. channel
0x1436	0x2192    MOVS	R1, #146
0x1438	0xB249    SXTB	R1, R1
0x143A	0xF2402000  MOVW	R0, #512
0x143E	0xB200    SXTH	R0, R0
0x1440	0xF7FFFA0E  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 50 :: 		break;
0x1444	0xE050    B	L_set_channel4
;Misc_Routines.c, 51 :: 		case 21:
L_set_channel15:
;Misc_Routines.c, 52 :: 		write_ZIGBEE_long(RFCON0, 0xA2);  // 0xA2 for 21. channel
0x1446	0x21A2    MOVS	R1, #162
0x1448	0xB249    SXTB	R1, R1
0x144A	0xF2402000  MOVW	R0, #512
0x144E	0xB200    SXTH	R0, R0
0x1450	0xF7FFFA06  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 53 :: 		break;
0x1454	0xE048    B	L_set_channel4
;Misc_Routines.c, 54 :: 		case 22:
L_set_channel16:
;Misc_Routines.c, 55 :: 		write_ZIGBEE_long(RFCON0, 0xB2);  // 0xB2 for 22. channel
0x1456	0x21B2    MOVS	R1, #178
0x1458	0xB249    SXTB	R1, R1
0x145A	0xF2402000  MOVW	R0, #512
0x145E	0xB200    SXTH	R0, R0
0x1460	0xF7FFF9FE  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 56 :: 		break;
0x1464	0xE040    B	L_set_channel4
;Misc_Routines.c, 57 :: 		case 23:
L_set_channel17:
;Misc_Routines.c, 58 :: 		write_ZIGBEE_long(RFCON0, 0xC2);  // 0xC2 for 23. channel
0x1466	0x21C2    MOVS	R1, #194
0x1468	0xB249    SXTB	R1, R1
0x146A	0xF2402000  MOVW	R0, #512
0x146E	0xB200    SXTH	R0, R0
0x1470	0xF7FFF9F6  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 59 :: 		break;
0x1474	0xE038    B	L_set_channel4
;Misc_Routines.c, 60 :: 		case 24:
L_set_channel18:
;Misc_Routines.c, 61 :: 		write_ZIGBEE_long(RFCON0, 0xD2);  // 0xD2 for 24. channel
0x1476	0x21D2    MOVS	R1, #210
0x1478	0xB249    SXTB	R1, R1
0x147A	0xF2402000  MOVW	R0, #512
0x147E	0xB200    SXTH	R0, R0
0x1480	0xF7FFF9EE  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 62 :: 		break;
0x1484	0xE030    B	L_set_channel4
;Misc_Routines.c, 63 :: 		case 25:
L_set_channel19:
;Misc_Routines.c, 64 :: 		write_ZIGBEE_long(RFCON0, 0xE2);  // 0xE2 for 25. channel
0x1486	0x21E2    MOVS	R1, #226
0x1488	0xB249    SXTB	R1, R1
0x148A	0xF2402000  MOVW	R0, #512
0x148E	0xB200    SXTH	R0, R0
0x1490	0xF7FFF9E6  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 65 :: 		break;
0x1494	0xE028    B	L_set_channel4
;Misc_Routines.c, 66 :: 		case 26:
L_set_channel20:
;Misc_Routines.c, 67 :: 		write_ZIGBEE_long(RFCON0, 0xF2);  // 0xF2 for 26. channel
0x1496	0x21F2    MOVS	R1, #242
0x1498	0xB249    SXTB	R1, R1
0x149A	0xF2402000  MOVW	R0, #512
0x149E	0xB200    SXTH	R0, R0
0x14A0	0xF7FFF9DE  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 68 :: 		break;
0x14A4	0xE020    B	L_set_channel4
;Misc_Routines.c, 69 :: 		}
L_set_channel3:
; channel_number start address is: 0 (R0)
0x14A6	0x280B    CMP	R0, #11
0x14A8	0xF43FAF7D  BEQ	L_set_channel5
0x14AC	0x280C    CMP	R0, #12
0x14AE	0xD082    BEQ	L_set_channel6
0x14B0	0x280D    CMP	R0, #13
0x14B2	0xD088    BEQ	L_set_channel7
0x14B4	0x280E    CMP	R0, #14
0x14B6	0xD08E    BEQ	L_set_channel8
0x14B8	0x280F    CMP	R0, #15
0x14BA	0xD094    BEQ	L_set_channel9
0x14BC	0x2810    CMP	R0, #16
0x14BE	0xD09A    BEQ	L_set_channel10
0x14C0	0x2811    CMP	R0, #17
0x14C2	0xD0A0    BEQ	L_set_channel11
0x14C4	0x2812    CMP	R0, #18
0x14C6	0xD0A6    BEQ	L_set_channel12
0x14C8	0x2813    CMP	R0, #19
0x14CA	0xD0AC    BEQ	L_set_channel13
0x14CC	0x2814    CMP	R0, #20
0x14CE	0xD0B2    BEQ	L_set_channel14
0x14D0	0x2815    CMP	R0, #21
0x14D2	0xD0B8    BEQ	L_set_channel15
0x14D4	0x2816    CMP	R0, #22
0x14D6	0xD0BE    BEQ	L_set_channel16
0x14D8	0x2817    CMP	R0, #23
0x14DA	0xD0C4    BEQ	L_set_channel17
0x14DC	0x2818    CMP	R0, #24
0x14DE	0xD0CA    BEQ	L_set_channel18
0x14E0	0x2819    CMP	R0, #25
0x14E2	0xD0D0    BEQ	L_set_channel19
0x14E4	0x281A    CMP	R0, #26
0x14E6	0xD0D6    BEQ	L_set_channel20
; channel_number end address is: 0 (R0)
L_set_channel4:
;Misc_Routines.c, 70 :: 		RF_reset();
0x14E8	0xF001FCE6  BL	_RF_reset+0
;Misc_Routines.c, 71 :: 		}
L_end_set_channel:
0x14EC	0xF8DDE000  LDR	LR, [SP, #0]
0x14F0	0xB001    ADD	SP, SP, #4
0x14F2	0x4770    BX	LR
; end of _set_channel
_nonbeacon_PAN_coordinator_device:
;Misc_Routines.c, 140 :: 		void nonbeacon_PAN_coordinator_device() {
0x34B4	0xB081    SUB	SP, SP, #4
0x34B6	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 141 :: 		short int temp = 0;
;Misc_Routines.c, 143 :: 		temp = read_ZIGBEE_short(RXMCR);
0x34BA	0x2000    MOVS	R0, #0
0x34BC	0xB240    SXTB	R0, R0
0x34BE	0xF7FDFD01  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 144 :: 		temp = temp | 0x08;                 // 0x08 mask for PAN coordinator
0x34C2	0xF0400008  ORR	R0, R0, #8
;Misc_Routines.c, 145 :: 		write_ZIGBEE_short(RXMCR, temp);
0x34C6	0xB241    SXTB	R1, R0
0x34C8	0x2000    MOVS	R0, #0
0x34CA	0xB240    SXTB	R0, R0
0x34CC	0xF7FDFCDA  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 147 :: 		temp = read_ZIGBEE_short(TXMCR);
0x34D0	0x2011    MOVS	R0, #17
0x34D2	0xB240    SXTB	R0, R0
0x34D4	0xF7FDFCF6  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 148 :: 		temp = temp & 0xDF;                 // 0xDF mask for CSMA-CA mode
0x34D8	0xF00000DF  AND	R0, R0, #223
;Misc_Routines.c, 149 :: 		write_ZIGBEE_short(TXMCR, temp);
0x34DC	0xB241    SXTB	R1, R0
0x34DE	0x2011    MOVS	R0, #17
0x34E0	0xB240    SXTB	R0, R0
0x34E2	0xF7FDFCCF  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 151 :: 		write_ZIGBEE_short(ORDER, 0xFF);    // BO, SO are 15
0x34E6	0x21FF    MOVS	R1, #255
0x34E8	0xB249    SXTB	R1, R1
0x34EA	0x2010    MOVS	R0, #16
0x34EC	0xB240    SXTB	R0, R0
0x34EE	0xF7FDFCC9  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 152 :: 		}
L_end_nonbeacon_PAN_coordinator_device:
0x34F2	0xF8DDE000  LDR	LR, [SP, #0]
0x34F6	0xB001    ADD	SP, SP, #4
0x34F8	0x4770    BX	LR
; end of _nonbeacon_PAN_coordinator_device
_set_TX_power:
;Misc_Routines.c, 396 :: 		void set_TX_power(unsigned short int power) {             // 0-31 possible variants
; power start address is: 0 (R0)
0x33EC	0xB081    SUB	SP, SP, #4
0x33EE	0xF8CDE000  STR	LR, [SP, #0]
; power end address is: 0 (R0)
; power start address is: 0 (R0)
;Misc_Routines.c, 397 :: 		if((power < 0) || (power > 31))
0x33F2	0x2800    CMP	R0, #0
0x33F4	0xD302    BCC	L__set_TX_power60
0x33F6	0x281F    CMP	R0, #31
0x33F8	0xD800    BHI	L__set_TX_power59
; power end address is: 0 (R0)
0x33FA	0xE000    B	L_set_TX_power48
L__set_TX_power60:
L__set_TX_power59:
;Misc_Routines.c, 398 :: 		power = 31;
; power start address is: 0 (R0)
0x33FC	0x201F    MOVS	R0, #31
; power end address is: 0 (R0)
L_set_TX_power48:
;Misc_Routines.c, 399 :: 		power = 31 - power;                                     // 0 max, 31 min -> 31 max, 0 min
; power start address is: 0 (R0)
0x33FE	0xF1C0011F  RSB	R1, R0, #31
; power end address is: 0 (R0)
;Misc_Routines.c, 400 :: 		power = ((power & 0b00011111) << 3) & 0b11111000;       // calculating power
0x3402	0xB2C9    UXTB	R1, R1
0x3404	0xF001011F  AND	R1, R1, #31
0x3408	0xB2C9    UXTB	R1, R1
0x340A	0x00C9    LSLS	R1, R1, #3
0x340C	0xB289    UXTH	R1, R1
0x340E	0xF00101F8  AND	R1, R1, #248
;Misc_Routines.c, 401 :: 		write_ZIGBEE_long(RFCON3, power);
0x3412	0xB249    SXTB	R1, R1
0x3414	0xF2402003  MOVW	R0, #515
0x3418	0xB200    SXTH	R0, R0
0x341A	0xF7FDFA21  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 402 :: 		}
L_end_set_TX_power:
0x341E	0xF8DDE000  LDR	LR, [SP, #0]
0x3422	0xB001    ADD	SP, SP, #4
0x3424	0x4770    BX	LR
; end of _set_TX_power
_set_frame_format_filter:
;Misc_Routines.c, 292 :: 		void set_frame_format_filter(short int fff_mode) {   // 1 all frames, 2 command only, 3 data only, 4 beacon only
; fff_mode start address is: 0 (R0)
0x3428	0xB081    SUB	SP, SP, #4
0x342A	0xF8CDE000  STR	LR, [SP, #0]
; fff_mode end address is: 0 (R0)
; fff_mode start address is: 0 (R0)
;Misc_Routines.c, 293 :: 		short int temp = 0;
;Misc_Routines.c, 295 :: 		switch(fff_mode) {
0x342E	0xE034    B	L_set_frame_format_filter35
; fff_mode end address is: 0 (R0)
;Misc_Routines.c, 296 :: 		case 1: {
L_set_frame_format_filter37:
;Misc_Routines.c, 297 :: 		temp = read_ZIGBEE_short(RXFLUSH);      // all frames
0x3430	0x200D    MOVS	R0, #13
0x3432	0xB240    SXTB	R0, R0
0x3434	0xF7FDFD46  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 298 :: 		temp = temp & (!0x0E);                  // mask for all frames
0x3438	0xF0000100  AND	R1, R0, #0
;Misc_Routines.c, 299 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x343C	0x200D    MOVS	R0, #13
0x343E	0xB240    SXTB	R0, R0
0x3440	0xF7FDFD20  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 301 :: 		break;
0x3444	0xE031    B	L_set_frame_format_filter36
;Misc_Routines.c, 303 :: 		case 2: {
L_set_frame_format_filter38:
;Misc_Routines.c, 304 :: 		temp = read_ZIGBEE_short(RXFLUSH);      // command only
0x3446	0x200D    MOVS	R0, #13
0x3448	0xB240    SXTB	R0, R0
0x344A	0xF7FDFD3B  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 305 :: 		temp = temp & (!0x06);                  // mask for command only
0x344E	0xF0000100  AND	R1, R0, #0
0x3452	0xB249    SXTB	R1, R1
;Misc_Routines.c, 306 :: 		temp = temp | 0x08;                     // mask for command only
0x3454	0xF0410108  ORR	R1, R1, #8
;Misc_Routines.c, 307 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x3458	0x200D    MOVS	R0, #13
0x345A	0xB240    SXTB	R0, R0
0x345C	0xF7FDFD12  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 309 :: 		break;
0x3460	0xE023    B	L_set_frame_format_filter36
;Misc_Routines.c, 311 :: 		case 3: {
L_set_frame_format_filter39:
;Misc_Routines.c, 312 :: 		temp = read_ZIGBEE_short(RXFLUSH);      // data only
0x3462	0x200D    MOVS	R0, #13
0x3464	0xB240    SXTB	R0, R0
0x3466	0xF7FDFD2D  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 313 :: 		temp = temp & (!0x0A);                  // mask for data only
0x346A	0xF0000100  AND	R1, R0, #0
0x346E	0xB249    SXTB	R1, R1
;Misc_Routines.c, 314 :: 		temp = temp | 0x04;                     // mask for data only
0x3470	0xF0410104  ORR	R1, R1, #4
;Misc_Routines.c, 315 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x3474	0x200D    MOVS	R0, #13
0x3476	0xB240    SXTB	R0, R0
0x3478	0xF7FDFD04  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 317 :: 		break;
0x347C	0xE015    B	L_set_frame_format_filter36
;Misc_Routines.c, 319 :: 		case 4: {
L_set_frame_format_filter40:
;Misc_Routines.c, 320 :: 		temp = read_ZIGBEE_short(RXFLUSH);      // beacon only
0x347E	0x200D    MOVS	R0, #13
0x3480	0xB240    SXTB	R0, R0
0x3482	0xF7FDFD1F  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 321 :: 		temp = temp & (!0x0C);                  // mask for beacon only
0x3486	0xF0000100  AND	R1, R0, #0
0x348A	0xB249    SXTB	R1, R1
;Misc_Routines.c, 322 :: 		temp = temp | 0x02;                     // mask for beacon only
0x348C	0xF0410102  ORR	R1, R1, #2
;Misc_Routines.c, 323 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x3490	0x200D    MOVS	R0, #13
0x3492	0xB240    SXTB	R0, R0
0x3494	0xF7FDFCF6  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 325 :: 		break;
0x3498	0xE007    B	L_set_frame_format_filter36
;Misc_Routines.c, 326 :: 		}
L_set_frame_format_filter35:
; fff_mode start address is: 0 (R0)
0x349A	0x2801    CMP	R0, #1
0x349C	0xD0C8    BEQ	L_set_frame_format_filter37
0x349E	0x2802    CMP	R0, #2
0x34A0	0xD0D1    BEQ	L_set_frame_format_filter38
0x34A2	0x2803    CMP	R0, #3
0x34A4	0xD0DD    BEQ	L_set_frame_format_filter39
0x34A6	0x2804    CMP	R0, #4
0x34A8	0xD0E9    BEQ	L_set_frame_format_filter40
; fff_mode end address is: 0 (R0)
L_set_frame_format_filter36:
;Misc_Routines.c, 327 :: 		}
L_end_set_frame_format_filter:
0x34AA	0xF8DDE000  LDR	LR, [SP, #0]
0x34AE	0xB001    ADD	SP, SP, #4
0x34B0	0x4770    BX	LR
; end of _set_frame_format_filter
_set_reception_mode:
;Misc_Routines.c, 260 :: 		void set_reception_mode(short int r_mode) { // 1 normal, 2 error, 3 promiscuous mode
; r_mode start address is: 0 (R0)
0x3238	0xB081    SUB	SP, SP, #4
0x323A	0xF8CDE000  STR	LR, [SP, #0]
; r_mode end address is: 0 (R0)
; r_mode start address is: 0 (R0)
;Misc_Routines.c, 261 :: 		short int temp = 0;
;Misc_Routines.c, 263 :: 		switch(r_mode) {
0x323E	0xE026    B	L_set_reception_mode30
; r_mode end address is: 0 (R0)
;Misc_Routines.c, 264 :: 		case 1: {
L_set_reception_mode32:
;Misc_Routines.c, 265 :: 		temp = read_ZIGBEE_short(RXMCR);      // normal mode
0x3240	0x2000    MOVS	R0, #0
0x3242	0xB240    SXTB	R0, R0
0x3244	0xF7FDFE3E  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 266 :: 		temp = temp & (!0x03);                // mask for normal mode
0x3248	0xF0000100  AND	R1, R0, #0
;Misc_Routines.c, 267 :: 		write_ZIGBEE_short(RXMCR, temp);
0x324C	0x2000    MOVS	R0, #0
0x324E	0xB240    SXTB	R0, R0
0x3250	0xF7FDFE18  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 269 :: 		break;
0x3254	0xE021    B	L_set_reception_mode31
;Misc_Routines.c, 271 :: 		case 2: {
L_set_reception_mode33:
;Misc_Routines.c, 272 :: 		temp = read_ZIGBEE_short(RXMCR);      // error mode
0x3256	0x2000    MOVS	R0, #0
0x3258	0xB240    SXTB	R0, R0
0x325A	0xF7FDFE33  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 273 :: 		temp = temp & (!0x01);                // mask for error mode
0x325E	0xF0000100  AND	R1, R0, #0
0x3262	0xB249    SXTB	R1, R1
;Misc_Routines.c, 274 :: 		temp = temp | 0x02;                   // mask for error mode
0x3264	0xF0410102  ORR	R1, R1, #2
;Misc_Routines.c, 275 :: 		write_ZIGBEE_short(RXMCR, temp);
0x3268	0x2000    MOVS	R0, #0
0x326A	0xB240    SXTB	R0, R0
0x326C	0xF7FDFE0A  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 277 :: 		break;
0x3270	0xE013    B	L_set_reception_mode31
;Misc_Routines.c, 279 :: 		case 3: {
L_set_reception_mode34:
;Misc_Routines.c, 280 :: 		temp = read_ZIGBEE_short(RXMCR);      // promiscuous mode
0x3272	0x2000    MOVS	R0, #0
0x3274	0xB240    SXTB	R0, R0
0x3276	0xF7FDFE25  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 281 :: 		temp = temp & (!0x02);                // mask for promiscuous mode
0x327A	0xF0000100  AND	R1, R0, #0
0x327E	0xB249    SXTB	R1, R1
;Misc_Routines.c, 282 :: 		temp = temp | 0x01;                   // mask for promiscuous mode
0x3280	0xF0410101  ORR	R1, R1, #1
;Misc_Routines.c, 283 :: 		write_ZIGBEE_short(RXMCR, temp);
0x3284	0x2000    MOVS	R0, #0
0x3286	0xB240    SXTB	R0, R0
0x3288	0xF7FDFDFC  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 285 :: 		break;
0x328C	0xE005    B	L_set_reception_mode31
;Misc_Routines.c, 286 :: 		}
L_set_reception_mode30:
; r_mode start address is: 0 (R0)
0x328E	0x2801    CMP	R0, #1
0x3290	0xD0D6    BEQ	L_set_reception_mode32
0x3292	0x2802    CMP	R0, #2
0x3294	0xD0DF    BEQ	L_set_reception_mode33
0x3296	0x2803    CMP	R0, #3
0x3298	0xD0EB    BEQ	L_set_reception_mode34
; r_mode end address is: 0 (R0)
L_set_reception_mode31:
;Misc_Routines.c, 287 :: 		}
L_end_set_reception_mode:
0x329A	0xF8DDE000  LDR	LR, [SP, #0]
0x329E	0xB001    ADD	SP, SP, #4
0x32A0	0x4770    BX	LR
; end of _set_reception_mode
_pin_wake:
;Misc_Routines.c, 377 :: 		void pin_wake() {
0x3210	0xB081    SUB	SP, SP, #4
;Misc_Routines.c, 378 :: 		WAKE_ = 1;
0x3212	0x2101    MOVS	R1, #1
0x3214	0xB249    SXTB	R1, R1
0x3216	0x4807    LDR	R0, [PC, #28]
0x3218	0x6001    STR	R1, [R0, #0]
;Misc_Routines.c, 379 :: 		Delay_ms(5);
0x321A	0xF64E275F  MOVW	R7, #59999
0x321E	0xF2C00700  MOVT	R7, #0
L_pin_wake44:
0x3222	0x1E7F    SUBS	R7, R7, #1
0x3224	0xD1FD    BNE	L_pin_wake44
0x3226	0xBF00    NOP
0x3228	0xBF00    NOP
0x322A	0xBF00    NOP
0x322C	0xBF00    NOP
0x322E	0xBF00    NOP
;Misc_Routines.c, 380 :: 		}
L_end_pin_wake:
0x3230	0xB001    ADD	SP, SP, #4
0x3232	0x4770    BX	LR
0x3234	0x01904221  	WAKE_+0
; end of _pin_wake
_draw_frame:
;Transmitter.c, 33 :: 		void draw_frame() {
0x3868	0xB081    SUB	SP, SP, #4
0x386A	0xF8CDE000  STR	LR, [SP, #0]
;Transmitter.c, 34 :: 		TFT_Init_ILI9341_8bit(320, 240);
0x386E	0x21F0    MOVS	R1, #240
0x3870	0xF2401040  MOVW	R0, #320
0x3874	0xF7FFFD5A  BL	_TFT_Init_ILI9341_8bit+0
;Transmitter.c, 35 :: 		TFT_Fill_Screen(CL_WHITE);
0x3878	0xF64F70FF  MOVW	R0, #65535
0x387C	0xF7FFFC06  BL	_TFT_Fill_Screen+0
;Transmitter.c, 36 :: 		TFT_Write_Text("BOARD ID :", 140, 40);    // Display string on TFT
0x3880	0x4818    LDR	R0, [PC, #96]
0x3882	0x2228    MOVS	R2, #40
0x3884	0x218C    MOVS	R1, #140
0x3886	0xF7FFFD0D  BL	_TFT_Write_Text+0
;Transmitter.c, 37 :: 		TFT_Write_Text("Button 1 :", 140, 80);
0x388A	0x4817    LDR	R0, [PC, #92]
0x388C	0x2250    MOVS	R2, #80
0x388E	0x218C    MOVS	R1, #140
0x3890	0xF7FFFD08  BL	_TFT_Write_Text+0
;Transmitter.c, 38 :: 		TFT_Write_Text("Button 2 :", 140, 120);
0x3894	0x4815    LDR	R0, [PC, #84]
0x3896	0x2278    MOVS	R2, #120
0x3898	0x218C    MOVS	R1, #140
0x389A	0xF7FFFD03  BL	_TFT_Write_Text+0
;Transmitter.c, 39 :: 		TFT_Write_Text("ANALOG 1 :", 140, 160);
0x389E	0x4814    LDR	R0, [PC, #80]
0x38A0	0x22A0    MOVS	R2, #160
0x38A2	0x218C    MOVS	R1, #140
0x38A4	0xF7FFFCFE  BL	_TFT_Write_Text+0
;Transmitter.c, 41 :: 		TFT_Set_Font(&TFT_defaultFont, CL_BLACK, FO_HORIZONTAL);
0x38A8	0x2200    MOVS	R2, #0
0x38AA	0xF2400100  MOVW	R1, #0
0x38AE	0x4811    LDR	R0, [PC, #68]
0x38B0	0xF7FCFE3C  BL	_TFT_Set_Font+0
;Transmitter.c, 43 :: 		TFT_Set_Brush(1, CL_WHITE, 0, LEFT_TO_RIGHT, CL_AQUA, CL_AQUA);
0x38B4	0xF64071FF  MOVW	R1, #4095
0x38B8	0xF64070FF  MOVW	R0, #4095
0x38BC	0xB402    PUSH	(R1)
0x38BE	0xB401    PUSH	(R0)
0x38C0	0x2301    MOVS	R3, #1
0x38C2	0x2200    MOVS	R2, #0
0x38C4	0xF64F71FF  MOVW	R1, #65535
0x38C8	0x2001    MOVS	R0, #1
0x38CA	0xF7FEF8AB  BL	_TFT_Set_Brush+0
0x38CE	0xB002    ADD	SP, SP, #8
;Transmitter.c, 45 :: 		TFT_Set_Pen(CL_WHITE, 0);
0x38D0	0x2100    MOVS	R1, #0
0x38D2	0xF64F70FF  MOVW	R0, #65535
0x38D6	0xF7FEFDE1  BL	_TFT_Set_Pen+0
;Transmitter.c, 46 :: 		}
L_end_draw_frame:
0x38DA	0xF8DDE000  LDR	LR, [SP, #0]
0x38DE	0xB001    ADD	SP, SP, #4
0x38E0	0x4770    BX	LR
0x38E2	0xBF00    NOP
0x38E4	0x00062000  	?lstr1_Transmitter+0
0x38E8	0x00112000  	?lstr2_Transmitter+0
0x38EC	0x001C2000  	?lstr3_Transmitter+0
0x38F0	0x00272000  	?lstr4_Transmitter+0
0x38F4	0x3BA40000  	_TFT_defaultFont+0
; end of _draw_frame
_TFT_Init_ILI9341_8bit:
;__Lib_TFT_Defs.c, 2046 :: 		void TFT_Init_ILI9341_8bit(unsigned int display_width, unsigned int display_height) {
; display_height start address is: 4 (R1)
; display_width start address is: 0 (R0)
0x332C	0xB081    SUB	SP, SP, #4
0x332E	0xF8CDE000  STR	LR, [SP, #0]
0x3332	0xB28C    UXTH	R4, R1
0x3334	0xB281    UXTH	R1, R0
; display_height end address is: 4 (R1)
; display_width end address is: 0 (R0)
; display_width start address is: 4 (R1)
; display_height start address is: 16 (R4)
;__Lib_TFT_Defs.c, 2047 :: 		__controller = _8BIT_CONTROLLER;
0x3336	0xF24003FF  MOVW	R3, #255
0x333A	0x4A1F    LDR	R2, [PC, #124]
0x333C	0x8013    STRH	R3, [R2, #0]
;__Lib_TFT_Defs.c, 2048 :: 		if (Is_TFT_Set() != 1) {
0x333E	0xF7FFF8B9  BL	_Is_TFT_Set+0
0x3342	0x2801    CMP	R0, #1
0x3344	0xD008    BEQ	L_TFT_Init_ILI9341_8bit109
;__Lib_TFT_Defs.c, 2049 :: 		TFT_Set_Index_Ptr = TFT_Set_Index;
0x3346	0x4B1D    LDR	R3, [PC, #116]
0x3348	0x4A1D    LDR	R2, [PC, #116]
0x334A	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 2050 :: 		TFT_Write_Command_Ptr = TFT_Write_Command;
0x334C	0x4B1D    LDR	R3, [PC, #116]
0x334E	0x4A1E    LDR	R2, [PC, #120]
0x3350	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 2051 :: 		TFT_Write_Data_Ptr = TFT_Write_Data;
0x3352	0x4B1E    LDR	R3, [PC, #120]
0x3354	0x4A1E    LDR	R2, [PC, #120]
0x3356	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 2052 :: 		}
L_TFT_Init_ILI9341_8bit109:
;__Lib_TFT_Defs.c, 2054 :: 		TFT_DISP_WIDTH = display_width;
0x3358	0x4A1E    LDR	R2, [PC, #120]
0x335A	0x8011    STRH	R1, [R2, #0]
;__Lib_TFT_Defs.c, 2055 :: 		TFT_DISP_HEIGHT = display_height;
0x335C	0x4A1E    LDR	R2, [PC, #120]
0x335E	0x8014    STRH	R4, [R2, #0]
;__Lib_TFT_Defs.c, 2056 :: 		if (display_width >= display_height)
0x3360	0x42A1    CMP	R1, R4
0x3362	0xD303    BCC	L_TFT_Init_ILI9341_8bit110
; display_width end address is: 4 (R1)
; display_height end address is: 16 (R4)
;__Lib_TFT_Defs.c, 2057 :: 		TFT_Disp_Rotation = 0;
0x3364	0x2300    MOVS	R3, #0
0x3366	0x4A1D    LDR	R2, [PC, #116]
0x3368	0x7013    STRB	R3, [R2, #0]
0x336A	0xE002    B	L_TFT_Init_ILI9341_8bit111
L_TFT_Init_ILI9341_8bit110:
;__Lib_TFT_Defs.c, 2059 :: 		TFT_Disp_Rotation = 90;
0x336C	0x235A    MOVS	R3, #90
0x336E	0x4A1B    LDR	R2, [PC, #108]
0x3370	0x7013    STRB	R3, [R2, #0]
L_TFT_Init_ILI9341_8bit111:
;__Lib_TFT_Defs.c, 2061 :: 		TFT_Set_Pen(CL_BLACK, 1);
0x3372	0x2101    MOVS	R1, #1
0x3374	0xF2400000  MOVW	R0, #0
0x3378	0xF7FFF890  BL	_TFT_Set_Pen+0
;__Lib_TFT_Defs.c, 2062 :: 		TFT_Set_Brush(0, 0, 0, 0, 0, 0);
0x337C	0x2300    MOVS	R3, #0
0x337E	0x2200    MOVS	R2, #0
0x3380	0xB408    PUSH	(R3)
0x3382	0xB404    PUSH	(R2)
0x3384	0x2300    MOVS	R3, #0
0x3386	0x2200    MOVS	R2, #0
0x3388	0x2100    MOVS	R1, #0
0x338A	0x2000    MOVS	R0, #0
0x338C	0xF7FEFB4A  BL	_TFT_Set_Brush+0
0x3390	0xB002    ADD	SP, SP, #8
;__Lib_TFT_Defs.c, 2064 :: 		TFT_Move_Cursor(0, 0);
0x3392	0x2100    MOVS	R1, #0
0x3394	0x2000    MOVS	R0, #0
0x3396	0xF7FEFB39  BL	_TFT_Move_Cursor+0
;__Lib_TFT_Defs.c, 2065 :: 		ExternalFontSet = 0;
0x339A	0x2300    MOVS	R3, #0
0x339C	0x4A10    LDR	R2, [PC, #64]
0x339E	0x7013    STRB	R3, [R2, #0]
;__Lib_TFT_Defs.c, 2066 :: 		TFT_Set_DataPort_Direction();
0x33A0	0xF7FEFB1C  BL	__Lib_TFT_Defs_TFT_Set_DataPort_Direction+0
;__Lib_TFT_Defs.c, 2068 :: 		TFT_Reset_ILI9341();
0x33A4	0xF7FDFDC0  BL	__Lib_TFT_Defs_TFT_Reset_ILI9341+0
;__Lib_TFT_Defs.c, 2069 :: 		TFT_Set_Address_Ptr = TFT_Set_Address_ILI9342;
0x33A8	0x4B0E    LDR	R3, [PC, #56]
0x33AA	0x4A0F    LDR	R2, [PC, #60]
0x33AC	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 2070 :: 		}
L_end_TFT_Init_ILI9341_8bit:
0x33AE	0xF8DDE000  LDR	LR, [SP, #0]
0x33B2	0xB001    ADD	SP, SP, #4
0x33B4	0x4770    BX	LR
0x33B6	0xBF00    NOP
0x33B8	0x00382000  	__Lib_TFT_Defs___controller+0
0x33BC	0x01DD0000  	_TFT_Set_Index+0
0x33C0	0x00DC2000  	_TFT_Set_Index_Ptr+0
0x33C4	0x018D0000  	_TFT_Write_Command+0
0x33C8	0x00E02000  	_TFT_Write_Command_Ptr+0
0x33CC	0x26210000  	_TFT_Write_Data+0
0x33D0	0x00BC2000  	_TFT_Write_Data_Ptr+0
0x33D4	0x00AE2000  	_TFT_DISP_WIDTH+0
0x33D8	0x00B02000  	_TFT_DISP_HEIGHT+0
0x33DC	0x00372000  	__Lib_TFT_Defs_TFT_Disp_Rotation+0
0x33E0	0x00A92000  	_ExternalFontSet+0
0x33E4	0x28ED0000  	_TFT_Set_Address_ILI9342+0
0x33E8	0x00B82000  	_TFT_Set_Address_Ptr+0
; end of _TFT_Init_ILI9341_8bit
__Lib_TFT_Defs_TFT_Reset_ILI9341:
;__Lib_TFT_Defs.c, 1828 :: 		static void TFT_Reset_ILI9341(){
0x0F28	0xB081    SUB	SP, SP, #4
0x0F2A	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_TFT_Defs.c, 1829 :: 		TFT_Set_Pin_Directions();
0x0F2E	0xF7FFFDED  BL	__Lib_TFT_Defs_TFT_Set_Pin_Directions+0
;__Lib_TFT_Defs.c, 1831 :: 		Delay_100ms();
0x0F32	0xF7FFFDDD  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 1832 :: 		TFT_RST = 1;
0x0F36	0x2101    MOVS	R1, #1
0x0F38	0xB249    SXTB	R1, R1
0x0F3A	0x4895    LDR	R0, [PC, #596]
0x0F3C	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 1833 :: 		Delay_100ms();
0x0F3E	0xF7FFFDD7  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 1834 :: 		Delay_100ms();
0x0F42	0xF7FFFDD5  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 1836 :: 		TFT_CS = 0;
0x0F46	0x2100    MOVS	R1, #0
0x0F48	0xB249    SXTB	R1, R1
0x0F4A	0x4892    LDR	R0, [PC, #584]
0x0F4C	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 1837 :: 		TFT_Set_Index_Ptr(0x01);   // software reset
0x0F4E	0x2001    MOVS	R0, #1
0x0F50	0x4C91    LDR	R4, [PC, #580]
0x0F52	0x6824    LDR	R4, [R4, #0]
0x0F54	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1838 :: 		Delay_5ms();
0x0F56	0xF7FFFBEB  BL	_Delay_5ms+0
;__Lib_TFT_Defs.c, 1839 :: 		TFT_Set_Index_Ptr(0x28);   // display off
0x0F5A	0x2028    MOVS	R0, #40
0x0F5C	0x4C8E    LDR	R4, [PC, #568]
0x0F5E	0x6824    LDR	R4, [R4, #0]
0x0F60	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1841 :: 		TFT_Set_Index_Ptr(0xcf);
0x0F62	0x20CF    MOVS	R0, #207
0x0F64	0x4C8C    LDR	R4, [PC, #560]
0x0F66	0x6824    LDR	R4, [R4, #0]
0x0F68	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1842 :: 		TFT_Write_Command_Ptr(0x00);
0x0F6A	0x2000    MOVS	R0, #0
0x0F6C	0x4C8B    LDR	R4, [PC, #556]
0x0F6E	0x6824    LDR	R4, [R4, #0]
0x0F70	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1843 :: 		TFT_Write_Command_Ptr(0x83);
0x0F72	0x2083    MOVS	R0, #131
0x0F74	0x4C89    LDR	R4, [PC, #548]
0x0F76	0x6824    LDR	R4, [R4, #0]
0x0F78	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1844 :: 		TFT_Write_Command_Ptr(0x30);
0x0F7A	0x2030    MOVS	R0, #48
0x0F7C	0x4C87    LDR	R4, [PC, #540]
0x0F7E	0x6824    LDR	R4, [R4, #0]
0x0F80	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1846 :: 		TFT_Set_Index_Ptr(0xed);
0x0F82	0x20ED    MOVS	R0, #237
0x0F84	0x4C84    LDR	R4, [PC, #528]
0x0F86	0x6824    LDR	R4, [R4, #0]
0x0F88	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1847 :: 		TFT_Write_Command_Ptr(0x64);
0x0F8A	0x2064    MOVS	R0, #100
0x0F8C	0x4C83    LDR	R4, [PC, #524]
0x0F8E	0x6824    LDR	R4, [R4, #0]
0x0F90	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1848 :: 		TFT_Write_Command_Ptr(0x03);
0x0F92	0x2003    MOVS	R0, #3
0x0F94	0x4C81    LDR	R4, [PC, #516]
0x0F96	0x6824    LDR	R4, [R4, #0]
0x0F98	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1849 :: 		TFT_Write_Command_Ptr(0x12);
0x0F9A	0x2012    MOVS	R0, #18
0x0F9C	0x4C7F    LDR	R4, [PC, #508]
0x0F9E	0x6824    LDR	R4, [R4, #0]
0x0FA0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1850 :: 		TFT_Write_Command_Ptr(0x81);
0x0FA2	0x2081    MOVS	R0, #129
0x0FA4	0x4C7D    LDR	R4, [PC, #500]
0x0FA6	0x6824    LDR	R4, [R4, #0]
0x0FA8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1852 :: 		TFT_Set_Index_Ptr(0xe8);
0x0FAA	0x20E8    MOVS	R0, #232
0x0FAC	0x4C7A    LDR	R4, [PC, #488]
0x0FAE	0x6824    LDR	R4, [R4, #0]
0x0FB0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1853 :: 		TFT_Write_Command_Ptr(0x85);
0x0FB2	0x2085    MOVS	R0, #133
0x0FB4	0x4C79    LDR	R4, [PC, #484]
0x0FB6	0x6824    LDR	R4, [R4, #0]
0x0FB8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1854 :: 		TFT_Write_Command_Ptr(0x01);
0x0FBA	0x2001    MOVS	R0, #1
0x0FBC	0x4C77    LDR	R4, [PC, #476]
0x0FBE	0x6824    LDR	R4, [R4, #0]
0x0FC0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1855 :: 		TFT_Write_Command_Ptr(0x79);
0x0FC2	0x2079    MOVS	R0, #121
0x0FC4	0x4C75    LDR	R4, [PC, #468]
0x0FC6	0x6824    LDR	R4, [R4, #0]
0x0FC8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1857 :: 		TFT_Set_Index_Ptr(0xcb);
0x0FCA	0x20CB    MOVS	R0, #203
0x0FCC	0x4C72    LDR	R4, [PC, #456]
0x0FCE	0x6824    LDR	R4, [R4, #0]
0x0FD0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1858 :: 		TFT_Write_Command_Ptr(0x39);
0x0FD2	0x2039    MOVS	R0, #57
0x0FD4	0x4C71    LDR	R4, [PC, #452]
0x0FD6	0x6824    LDR	R4, [R4, #0]
0x0FD8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1859 :: 		TFT_Write_Command_Ptr(0x2c);
0x0FDA	0x202C    MOVS	R0, #44
0x0FDC	0x4C6F    LDR	R4, [PC, #444]
0x0FDE	0x6824    LDR	R4, [R4, #0]
0x0FE0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1860 :: 		TFT_Write_Command_Ptr(0x00);
0x0FE2	0x2000    MOVS	R0, #0
0x0FE4	0x4C6D    LDR	R4, [PC, #436]
0x0FE6	0x6824    LDR	R4, [R4, #0]
0x0FE8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1861 :: 		TFT_Write_Command_Ptr(0x34);
0x0FEA	0x2034    MOVS	R0, #52
0x0FEC	0x4C6B    LDR	R4, [PC, #428]
0x0FEE	0x6824    LDR	R4, [R4, #0]
0x0FF0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1862 :: 		TFT_Write_Command_Ptr(0x02);
0x0FF2	0x2002    MOVS	R0, #2
0x0FF4	0x4C69    LDR	R4, [PC, #420]
0x0FF6	0x6824    LDR	R4, [R4, #0]
0x0FF8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1864 :: 		TFT_Set_Index_Ptr(0xf7);
0x0FFA	0x20F7    MOVS	R0, #247
0x0FFC	0x4C66    LDR	R4, [PC, #408]
0x0FFE	0x6824    LDR	R4, [R4, #0]
0x1000	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1865 :: 		TFT_Write_Command_Ptr(0x20);
0x1002	0x2020    MOVS	R0, #32
0x1004	0x4C65    LDR	R4, [PC, #404]
0x1006	0x6824    LDR	R4, [R4, #0]
0x1008	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1867 :: 		TFT_Set_Index_Ptr(0xea);
0x100A	0x20EA    MOVS	R0, #234
0x100C	0x4C62    LDR	R4, [PC, #392]
0x100E	0x6824    LDR	R4, [R4, #0]
0x1010	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1868 :: 		TFT_Write_Command_Ptr(0x00);
0x1012	0x2000    MOVS	R0, #0
0x1014	0x4C61    LDR	R4, [PC, #388]
0x1016	0x6824    LDR	R4, [R4, #0]
0x1018	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1869 :: 		TFT_Write_Command_Ptr(0x00);
0x101A	0x2000    MOVS	R0, #0
0x101C	0x4C5F    LDR	R4, [PC, #380]
0x101E	0x6824    LDR	R4, [R4, #0]
0x1020	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1871 :: 		TFT_Set_Index_Ptr(0xc0);     // power control
0x1022	0x20C0    MOVS	R0, #192
0x1024	0x4C5C    LDR	R4, [PC, #368]
0x1026	0x6824    LDR	R4, [R4, #0]
0x1028	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1872 :: 		TFT_Write_Command_Ptr(0x26);
0x102A	0x2026    MOVS	R0, #38
0x102C	0x4C5B    LDR	R4, [PC, #364]
0x102E	0x6824    LDR	R4, [R4, #0]
0x1030	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1874 :: 		TFT_Set_Index_Ptr(0xc1);     // power control
0x1032	0x20C1    MOVS	R0, #193
0x1034	0x4C58    LDR	R4, [PC, #352]
0x1036	0x6824    LDR	R4, [R4, #0]
0x1038	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1875 :: 		TFT_Write_Command_Ptr(0x11);
0x103A	0x2011    MOVS	R0, #17
0x103C	0x4C57    LDR	R4, [PC, #348]
0x103E	0x6824    LDR	R4, [R4, #0]
0x1040	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1877 :: 		TFT_Set_Index_Ptr(0xc5);     // vcom control
0x1042	0x20C5    MOVS	R0, #197
0x1044	0x4C54    LDR	R4, [PC, #336]
0x1046	0x6824    LDR	R4, [R4, #0]
0x1048	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1878 :: 		TFT_Write_Command_Ptr(0x35);
0x104A	0x2035    MOVS	R0, #53
0x104C	0x4C53    LDR	R4, [PC, #332]
0x104E	0x6824    LDR	R4, [R4, #0]
0x1050	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1879 :: 		TFT_Write_Command_Ptr(0x3e);
0x1052	0x203E    MOVS	R0, #62
0x1054	0x4C51    LDR	R4, [PC, #324]
0x1056	0x6824    LDR	R4, [R4, #0]
0x1058	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1881 :: 		TFT_Set_Index_Ptr(0xc7);     // vcom control
0x105A	0x20C7    MOVS	R0, #199
0x105C	0x4C4E    LDR	R4, [PC, #312]
0x105E	0x6824    LDR	R4, [R4, #0]
0x1060	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1882 :: 		TFT_Write_Command_Ptr(0xbe);
0x1062	0x20BE    MOVS	R0, #190
0x1064	0x4C4D    LDR	R4, [PC, #308]
0x1066	0x6824    LDR	R4, [R4, #0]
0x1068	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1884 :: 		TFT_Set_Index_Ptr(0x36);     // memory access control
0x106A	0x2036    MOVS	R0, #54
0x106C	0x4C4A    LDR	R4, [PC, #296]
0x106E	0x6824    LDR	R4, [R4, #0]
0x1070	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1885 :: 		if (TFT_Disp_Rotation == 90)
0x1072	0x484B    LDR	R0, [PC, #300]
0x1074	0x7800    LDRB	R0, [R0, #0]
0x1076	0x285A    CMP	R0, #90
0x1078	0xD10C    BNE	L___Lib_TFT_Defs_TFT_Reset_ILI934197
;__Lib_TFT_Defs.c, 1886 :: 		if (Is_TFT_Rotated_180())
0x107A	0xF7FFFA09  BL	_Is_TFT_Rotated_180+0
0x107E	0xB120    CBZ	R0, L___Lib_TFT_Defs_TFT_Reset_ILI934198
;__Lib_TFT_Defs.c, 1887 :: 		TFT_Write_Command_Ptr (0x88);
0x1080	0x2088    MOVS	R0, #136
0x1082	0x4C46    LDR	R4, [PC, #280]
0x1084	0x6824    LDR	R4, [R4, #0]
0x1086	0x47A0    BLX	R4
0x1088	0xE003    B	L___Lib_TFT_Defs_TFT_Reset_ILI934199
L___Lib_TFT_Defs_TFT_Reset_ILI934198:
;__Lib_TFT_Defs.c, 1889 :: 		TFT_Write_Command_Ptr (0x48);
0x108A	0x2048    MOVS	R0, #72
0x108C	0x4C43    LDR	R4, [PC, #268]
0x108E	0x6824    LDR	R4, [R4, #0]
0x1090	0x47A0    BLX	R4
L___Lib_TFT_Defs_TFT_Reset_ILI934199:
0x1092	0xE00B    B	L___Lib_TFT_Defs_TFT_Reset_ILI9341100
L___Lib_TFT_Defs_TFT_Reset_ILI934197:
;__Lib_TFT_Defs.c, 1891 :: 		if (Is_TFT_Rotated_180())
0x1094	0xF7FFF9FC  BL	_Is_TFT_Rotated_180+0
0x1098	0xB120    CBZ	R0, L___Lib_TFT_Defs_TFT_Reset_ILI9341101
;__Lib_TFT_Defs.c, 1892 :: 		TFT_Write_Command_Ptr (0xE8);
0x109A	0x20E8    MOVS	R0, #232
0x109C	0x4C3F    LDR	R4, [PC, #252]
0x109E	0x6824    LDR	R4, [R4, #0]
0x10A0	0x47A0    BLX	R4
0x10A2	0xE003    B	L___Lib_TFT_Defs_TFT_Reset_ILI9341102
L___Lib_TFT_Defs_TFT_Reset_ILI9341101:
;__Lib_TFT_Defs.c, 1894 :: 		TFT_Write_Command_Ptr (0x28);
0x10A4	0x2028    MOVS	R0, #40
0x10A6	0x4C3D    LDR	R4, [PC, #244]
0x10A8	0x6824    LDR	R4, [R4, #0]
0x10AA	0x47A0    BLX	R4
L___Lib_TFT_Defs_TFT_Reset_ILI9341102:
L___Lib_TFT_Defs_TFT_Reset_ILI9341100:
;__Lib_TFT_Defs.c, 1896 :: 		TFT_Set_Index_Ptr(0x3a);     // pixel format set
0x10AC	0x203A    MOVS	R0, #58
0x10AE	0x4C3A    LDR	R4, [PC, #232]
0x10B0	0x6824    LDR	R4, [R4, #0]
0x10B2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1897 :: 		TFT_Write_Command_Ptr(0x55); // 16bit/pixel
0x10B4	0x2055    MOVS	R0, #85
0x10B6	0x4C39    LDR	R4, [PC, #228]
0x10B8	0x6824    LDR	R4, [R4, #0]
0x10BA	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1899 :: 		TFT_Set_Index_Ptr(0xb1);     // frame rate
0x10BC	0x20B1    MOVS	R0, #177
0x10BE	0x4C36    LDR	R4, [PC, #216]
0x10C0	0x6824    LDR	R4, [R4, #0]
0x10C2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1900 :: 		TFT_Write_Command_Ptr(0x00);
0x10C4	0x2000    MOVS	R0, #0
0x10C6	0x4C35    LDR	R4, [PC, #212]
0x10C8	0x6824    LDR	R4, [R4, #0]
0x10CA	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1901 :: 		TFT_Write_Command_Ptr(0x1B); // 70
0x10CC	0x201B    MOVS	R0, #27
0x10CE	0x4C33    LDR	R4, [PC, #204]
0x10D0	0x6824    LDR	R4, [R4, #0]
0x10D2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1904 :: 		TFT_Set_Index_Ptr(0xf2);     // 3Gamma Function Disable
0x10D4	0x20F2    MOVS	R0, #242
0x10D6	0x4C30    LDR	R4, [PC, #192]
0x10D8	0x6824    LDR	R4, [R4, #0]
0x10DA	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1905 :: 		TFT_Write_Command_Ptr(0x08);
0x10DC	0x2008    MOVS	R0, #8
0x10DE	0x4C2F    LDR	R4, [PC, #188]
0x10E0	0x6824    LDR	R4, [R4, #0]
0x10E2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1907 :: 		TFT_Set_Index_Ptr(0x26);
0x10E4	0x2026    MOVS	R0, #38
0x10E6	0x4C2C    LDR	R4, [PC, #176]
0x10E8	0x6824    LDR	R4, [R4, #0]
0x10EA	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1908 :: 		TFT_Write_Command_Ptr(0x01); // gamma set 4 gamma curve 01/02/04/08
0x10EC	0x2001    MOVS	R0, #1
0x10EE	0x4C2B    LDR	R4, [PC, #172]
0x10F0	0x6824    LDR	R4, [R4, #0]
0x10F2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1910 :: 		TFT_Set_Index_Ptr(0xE0);     // positive gamma correction
0x10F4	0x20E0    MOVS	R0, #224
0x10F6	0x4C28    LDR	R4, [PC, #160]
0x10F8	0x6824    LDR	R4, [R4, #0]
0x10FA	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1911 :: 		TFT_Write_Command_Ptr(0x1f);
0x10FC	0x201F    MOVS	R0, #31
0x10FE	0x4C27    LDR	R4, [PC, #156]
0x1100	0x6824    LDR	R4, [R4, #0]
0x1102	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1912 :: 		TFT_Write_Command_Ptr(0x1a);
0x1104	0x201A    MOVS	R0, #26
0x1106	0x4C25    LDR	R4, [PC, #148]
0x1108	0x6824    LDR	R4, [R4, #0]
0x110A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1913 :: 		TFT_Write_Command_Ptr(0x18);
0x110C	0x2018    MOVS	R0, #24
0x110E	0x4C23    LDR	R4, [PC, #140]
0x1110	0x6824    LDR	R4, [R4, #0]
0x1112	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1914 :: 		TFT_Write_Command_Ptr(0x0a);
0x1114	0x200A    MOVS	R0, #10
0x1116	0x4C21    LDR	R4, [PC, #132]
0x1118	0x6824    LDR	R4, [R4, #0]
0x111A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1915 :: 		TFT_Write_Command_Ptr(0x0f);
0x111C	0x200F    MOVS	R0, #15
0x111E	0x4C1F    LDR	R4, [PC, #124]
0x1120	0x6824    LDR	R4, [R4, #0]
0x1122	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1916 :: 		TFT_Write_Command_Ptr(0x06);
0x1124	0x2006    MOVS	R0, #6
0x1126	0x4C1D    LDR	R4, [PC, #116]
0x1128	0x6824    LDR	R4, [R4, #0]
0x112A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1917 :: 		TFT_Write_Command_Ptr(0x45);
0x112C	0x2045    MOVS	R0, #69
0x112E	0x4C1B    LDR	R4, [PC, #108]
0x1130	0x6824    LDR	R4, [R4, #0]
0x1132	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1918 :: 		TFT_Write_Command_Ptr(0x87);
0x1134	0x2087    MOVS	R0, #135
0x1136	0x4C19    LDR	R4, [PC, #100]
0x1138	0x6824    LDR	R4, [R4, #0]
0x113A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1919 :: 		TFT_Write_Command_Ptr(0x32);
0x113C	0x2032    MOVS	R0, #50
0x113E	0x4C17    LDR	R4, [PC, #92]
0x1140	0x6824    LDR	R4, [R4, #0]
0x1142	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1920 :: 		TFT_Write_Command_Ptr(0x0a);
0x1144	0x200A    MOVS	R0, #10
0x1146	0x4C15    LDR	R4, [PC, #84]
0x1148	0x6824    LDR	R4, [R4, #0]
0x114A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1921 :: 		TFT_Write_Command_Ptr(0x07);
0x114C	0x2007    MOVS	R0, #7
0x114E	0x4C13    LDR	R4, [PC, #76]
0x1150	0x6824    LDR	R4, [R4, #0]
0x1152	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1922 :: 		TFT_Write_Command_Ptr(0x02);
0x1154	0x2002    MOVS	R0, #2
0x1156	0x4C11    LDR	R4, [PC, #68]
0x1158	0x6824    LDR	R4, [R4, #0]
0x115A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1923 :: 		TFT_Write_Command_Ptr(0x07);
0x115C	0x2007    MOVS	R0, #7
0x115E	0x4C0F    LDR	R4, [PC, #60]
0x1160	0x6824    LDR	R4, [R4, #0]
0x1162	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1924 :: 		TFT_Write_Command_Ptr(0x05);
0x1164	0x2005    MOVS	R0, #5
0x1166	0x4C0D    LDR	R4, [PC, #52]
0x1168	0x6824    LDR	R4, [R4, #0]
0x116A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1925 :: 		TFT_Write_Command_Ptr(0x00);
0x116C	0x2000    MOVS	R0, #0
0x116E	0x4C0B    LDR	R4, [PC, #44]
0x1170	0x6824    LDR	R4, [R4, #0]
0x1172	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1927 :: 		TFT_Set_Index_Ptr(0xE1);     // negamma correction
0x1174	0x20E1    MOVS	R0, #225
0x1176	0x4C08    LDR	R4, [PC, #32]
0x1178	0x6824    LDR	R4, [R4, #0]
0x117A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1928 :: 		TFT_Write_Command_Ptr(0x00);
0x117C	0x2000    MOVS	R0, #0
0x117E	0x4C07    LDR	R4, [PC, #28]
0x1180	0x6824    LDR	R4, [R4, #0]
0x1182	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1929 :: 		TFT_Write_Command_Ptr(0x25);
0x1184	0x2025    MOVS	R0, #37
0x1186	0x4C05    LDR	R4, [PC, #20]
0x1188	0x6824    LDR	R4, [R4, #0]
0x118A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1930 :: 		TFT_Write_Command_Ptr(0x27);
0x118C	0x2027    MOVS	R0, #39
0x118E	0xE009    B	#18
0x1190	0x01A04223  	TFT_RST+0
0x1194	0x01BC4223  	TFT_CS+0
0x1198	0x00DC2000  	_TFT_Set_Index_Ptr+0
0x119C	0x00E02000  	_TFT_Write_Command_Ptr+0
0x11A0	0x00372000  	__Lib_TFT_Defs_TFT_Disp_Rotation+0
0x11A4	0x4C4F    LDR	R4, [PC, #316]
0x11A6	0x6824    LDR	R4, [R4, #0]
0x11A8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1931 :: 		TFT_Write_Command_Ptr(0x05);
0x11AA	0x2005    MOVS	R0, #5
0x11AC	0x4C4D    LDR	R4, [PC, #308]
0x11AE	0x6824    LDR	R4, [R4, #0]
0x11B0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1932 :: 		TFT_Write_Command_Ptr(0x10);
0x11B2	0x2010    MOVS	R0, #16
0x11B4	0x4C4B    LDR	R4, [PC, #300]
0x11B6	0x6824    LDR	R4, [R4, #0]
0x11B8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1933 :: 		TFT_Write_Command_Ptr(0x09);
0x11BA	0x2009    MOVS	R0, #9
0x11BC	0x4C49    LDR	R4, [PC, #292]
0x11BE	0x6824    LDR	R4, [R4, #0]
0x11C0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1934 :: 		TFT_Write_Command_Ptr(0x3a);
0x11C2	0x203A    MOVS	R0, #58
0x11C4	0x4C47    LDR	R4, [PC, #284]
0x11C6	0x6824    LDR	R4, [R4, #0]
0x11C8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1935 :: 		TFT_Write_Command_Ptr(0x78);
0x11CA	0x2078    MOVS	R0, #120
0x11CC	0x4C45    LDR	R4, [PC, #276]
0x11CE	0x6824    LDR	R4, [R4, #0]
0x11D0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1936 :: 		TFT_Write_Command_Ptr(0x4d);
0x11D2	0x204D    MOVS	R0, #77
0x11D4	0x4C43    LDR	R4, [PC, #268]
0x11D6	0x6824    LDR	R4, [R4, #0]
0x11D8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1937 :: 		TFT_Write_Command_Ptr(0x05);
0x11DA	0x2005    MOVS	R0, #5
0x11DC	0x4C41    LDR	R4, [PC, #260]
0x11DE	0x6824    LDR	R4, [R4, #0]
0x11E0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1938 :: 		TFT_Write_Command_Ptr(0x18);
0x11E2	0x2018    MOVS	R0, #24
0x11E4	0x4C3F    LDR	R4, [PC, #252]
0x11E6	0x6824    LDR	R4, [R4, #0]
0x11E8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1939 :: 		TFT_Write_Command_Ptr(0x0d);
0x11EA	0x200D    MOVS	R0, #13
0x11EC	0x4C3D    LDR	R4, [PC, #244]
0x11EE	0x6824    LDR	R4, [R4, #0]
0x11F0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1940 :: 		TFT_Write_Command_Ptr(0x38);
0x11F2	0x2038    MOVS	R0, #56
0x11F4	0x4C3B    LDR	R4, [PC, #236]
0x11F6	0x6824    LDR	R4, [R4, #0]
0x11F8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1941 :: 		TFT_Write_Command_Ptr(0x3a);
0x11FA	0x203A    MOVS	R0, #58
0x11FC	0x4C39    LDR	R4, [PC, #228]
0x11FE	0x6824    LDR	R4, [R4, #0]
0x1200	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1942 :: 		TFT_Write_Command_Ptr(0x1f);
0x1202	0x201F    MOVS	R0, #31
0x1204	0x4C37    LDR	R4, [PC, #220]
0x1206	0x6824    LDR	R4, [R4, #0]
0x1208	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1946 :: 		TFT_Set_Index_Ptr(0x2A);
0x120A	0x202A    MOVS	R0, #42
0x120C	0x4C36    LDR	R4, [PC, #216]
0x120E	0x6824    LDR	R4, [R4, #0]
0x1210	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1947 :: 		TFT_Write_Command_Ptr(0);
0x1212	0x2000    MOVS	R0, #0
0x1214	0x4C33    LDR	R4, [PC, #204]
0x1216	0x6824    LDR	R4, [R4, #0]
0x1218	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1948 :: 		TFT_Write_Command_Ptr(0);
0x121A	0x2000    MOVS	R0, #0
0x121C	0x4C31    LDR	R4, [PC, #196]
0x121E	0x6824    LDR	R4, [R4, #0]
0x1220	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1949 :: 		TFT_Write_Command_Ptr((TFT_DISP_WIDTH - 1) >> 8);
0x1222	0x4832    LDR	R0, [PC, #200]
0x1224	0x8800    LDRH	R0, [R0, #0]
0x1226	0x1E40    SUBS	R0, R0, #1
0x1228	0xB280    UXTH	R0, R0
0x122A	0x0A04    LSRS	R4, R0, #8
0x122C	0xB2E0    UXTB	R0, R4
0x122E	0x4C2D    LDR	R4, [PC, #180]
0x1230	0x6824    LDR	R4, [R4, #0]
0x1232	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1950 :: 		TFT_Write_Command_Ptr(TFT_DISP_WIDTH-1);
0x1234	0x482D    LDR	R0, [PC, #180]
0x1236	0x8800    LDRH	R0, [R0, #0]
0x1238	0x1E44    SUBS	R4, R0, #1
0x123A	0xB2E0    UXTB	R0, R4
0x123C	0x4C29    LDR	R4, [PC, #164]
0x123E	0x6824    LDR	R4, [R4, #0]
0x1240	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1952 :: 		TFT_Set_Index_Ptr(0x2B);
0x1242	0x202B    MOVS	R0, #43
0x1244	0x4C28    LDR	R4, [PC, #160]
0x1246	0x6824    LDR	R4, [R4, #0]
0x1248	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1953 :: 		TFT_Write_Command_Ptr(0);
0x124A	0x2000    MOVS	R0, #0
0x124C	0x4C25    LDR	R4, [PC, #148]
0x124E	0x6824    LDR	R4, [R4, #0]
0x1250	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1954 :: 		TFT_Write_Command_Ptr(0);
0x1252	0x2000    MOVS	R0, #0
0x1254	0x4C23    LDR	R4, [PC, #140]
0x1256	0x6824    LDR	R4, [R4, #0]
0x1258	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1955 :: 		TFT_Write_Command_Ptr((TFT_DISP_HEIGHT - 1) >> 8);
0x125A	0x4825    LDR	R0, [PC, #148]
0x125C	0x8800    LDRH	R0, [R0, #0]
0x125E	0x1E40    SUBS	R0, R0, #1
0x1260	0xB280    UXTH	R0, R0
0x1262	0x0A04    LSRS	R4, R0, #8
0x1264	0xB2E0    UXTB	R0, R4
0x1266	0x4C1F    LDR	R4, [PC, #124]
0x1268	0x6824    LDR	R4, [R4, #0]
0x126A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1956 :: 		TFT_Write_Command_Ptr(TFT_DISP_HEIGHT-1);
0x126C	0x4820    LDR	R0, [PC, #128]
0x126E	0x8800    LDRH	R0, [R0, #0]
0x1270	0x1E44    SUBS	R4, R0, #1
0x1272	0xB2E0    UXTB	R0, R4
0x1274	0x4C1B    LDR	R4, [PC, #108]
0x1276	0x6824    LDR	R4, [R4, #0]
0x1278	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1958 :: 		TFT_Set_Index_Ptr(0xb7);     // entry mode set
0x127A	0x20B7    MOVS	R0, #183
0x127C	0x4C1A    LDR	R4, [PC, #104]
0x127E	0x6824    LDR	R4, [R4, #0]
0x1280	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1959 :: 		TFT_Write_Command_Ptr(0x07);
0x1282	0x2007    MOVS	R0, #7
0x1284	0x4C17    LDR	R4, [PC, #92]
0x1286	0x6824    LDR	R4, [R4, #0]
0x1288	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1961 :: 		TFT_Set_Index_Ptr(0xb6);     // display function control
0x128A	0x20B6    MOVS	R0, #182
0x128C	0x4C16    LDR	R4, [PC, #88]
0x128E	0x6824    LDR	R4, [R4, #0]
0x1290	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1962 :: 		TFT_Write_Command_Ptr(0x0a);
0x1292	0x200A    MOVS	R0, #10
0x1294	0x4C13    LDR	R4, [PC, #76]
0x1296	0x6824    LDR	R4, [R4, #0]
0x1298	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1963 :: 		TFT_Write_Command_Ptr(0x82);
0x129A	0x2082    MOVS	R0, #130
0x129C	0x4C11    LDR	R4, [PC, #68]
0x129E	0x6824    LDR	R4, [R4, #0]
0x12A0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1964 :: 		TFT_Write_Command_Ptr(0x27);
0x12A2	0x2027    MOVS	R0, #39
0x12A4	0x4C0F    LDR	R4, [PC, #60]
0x12A6	0x6824    LDR	R4, [R4, #0]
0x12A8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1965 :: 		TFT_Write_Command_Ptr(0x00);
0x12AA	0x2000    MOVS	R0, #0
0x12AC	0x4C0D    LDR	R4, [PC, #52]
0x12AE	0x6824    LDR	R4, [R4, #0]
0x12B0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1967 :: 		TFT_Set_Index_Ptr(0x11);     // sleep out
0x12B2	0x2011    MOVS	R0, #17
0x12B4	0x4C0C    LDR	R4, [PC, #48]
0x12B6	0x6824    LDR	R4, [R4, #0]
0x12B8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1968 :: 		Delay_100ms();
0x12BA	0xF7FFFC19  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 1969 :: 		TFT_Set_Index_Ptr(0x29);     // display on
0x12BE	0x2029    MOVS	R0, #41
0x12C0	0x4C09    LDR	R4, [PC, #36]
0x12C2	0x6824    LDR	R4, [R4, #0]
0x12C4	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1970 :: 		Delay_100ms();
0x12C6	0xF7FFFC13  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 1971 :: 		TFT_Set_Index_Ptr(0x2c);     // memory write
0x12CA	0x202C    MOVS	R0, #44
0x12CC	0x4C06    LDR	R4, [PC, #24]
0x12CE	0x6824    LDR	R4, [R4, #0]
0x12D0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1972 :: 		TFT_CS = 1;
0x12D2	0x2101    MOVS	R1, #1
0x12D4	0xB249    SXTB	R1, R1
0x12D6	0x4807    LDR	R0, [PC, #28]
0x12D8	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 1973 :: 		}
L_end_TFT_Reset_ILI9341:
0x12DA	0xF8DDE000  LDR	LR, [SP, #0]
0x12DE	0xB001    ADD	SP, SP, #4
0x12E0	0x4770    BX	LR
0x12E2	0xBF00    NOP
0x12E4	0x00E02000  	_TFT_Write_Command_Ptr+0
0x12E8	0x00DC2000  	_TFT_Set_Index_Ptr+0
0x12EC	0x00AE2000  	_TFT_DISP_WIDTH+0
0x12F0	0x00B02000  	_TFT_DISP_HEIGHT+0
0x12F4	0x01BC4223  	TFT_CS+0
; end of __Lib_TFT_Defs_TFT_Reset_ILI9341
_TFT_Write_Text:
;__Lib_TFT.c, 1266 :: 		
; y start address is: 8 (R2)
; x start address is: 4 (R1)
0x32A4	0xB083    SUB	SP, SP, #12
0x32A6	0xF8CDE000  STR	LR, [SP, #0]
0x32AA	0x9002    STR	R0, [SP, #8]
; y end address is: 8 (R2)
; x end address is: 4 (R1)
; x start address is: 4 (R1)
; y start address is: 8 (R2)
;__Lib_TFT.c, 1269 :: 		
0x32AC	0x4B1C    LDR	R3, [PC, #112]
0x32AE	0x881B    LDRH	R3, [R3, #0]
0x32B0	0x4299    CMP	R1, R3
0x32B2	0xD300    BCC	L_TFT_Write_Text194
; x end address is: 4 (R1)
; y end address is: 8 (R2)
;__Lib_TFT.c, 1270 :: 		
0x32B4	0xE02F    B	L_end_TFT_Write_Text
L_TFT_Write_Text194:
;__Lib_TFT.c, 1271 :: 		
; y start address is: 8 (R2)
; x start address is: 4 (R1)
0x32B6	0x4B1B    LDR	R3, [PC, #108]
0x32B8	0x881B    LDRH	R3, [R3, #0]
0x32BA	0x429A    CMP	R2, R3
0x32BC	0xD300    BCC	L_TFT_Write_Text195
; x end address is: 4 (R1)
; y end address is: 8 (R2)
;__Lib_TFT.c, 1272 :: 		
0x32BE	0xE02A    B	L_end_TFT_Write_Text
L_TFT_Write_Text195:
;__Lib_TFT.c, 1274 :: 		
; i start address is: 0 (R0)
; y start address is: 8 (R2)
; x start address is: 4 (R1)
0x32C0	0x2000    MOVS	R0, #0
;__Lib_TFT.c, 1275 :: 		
0x32C2	0xF8AD0004  STRH	R0, [SP, #4]
; y end address is: 8 (R2)
0x32C6	0xB288    UXTH	R0, R1
0x32C8	0xB291    UXTH	R1, R2
; x end address is: 4 (R1)
0x32CA	0xF7FEFB9F  BL	_TFT_Move_Cursor+0
; i end address is: 0 (R0)
0x32CE	0xF8BD0004  LDRH	R0, [SP, #4]
;__Lib_TFT.c, 1276 :: 		
L_TFT_Write_Text196:
; i start address is: 0 (R0)
0x32D2	0x9B02    LDR	R3, [SP, #8]
0x32D4	0x181B    ADDS	R3, R3, R0
0x32D6	0x781B    LDRB	R3, [R3, #0]
0x32D8	0xB1EB    CBZ	R3, L_TFT_Write_Text197
;__Lib_TFT.c, 1277 :: 		
0x32DA	0x4B13    LDR	R3, [PC, #76]
0x32DC	0x781B    LDRB	R3, [R3, #0]
0x32DE	0xB163    CBZ	R3, L_TFT_Write_Text198
;__Lib_TFT.c, 1278 :: 		
0x32E0	0x9B02    LDR	R3, [SP, #8]
0x32E2	0x181B    ADDS	R3, R3, R0
0x32E4	0x781B    LDRB	R3, [R3, #0]
0x32E6	0xF8AD0004  STRH	R0, [SP, #4]
0x32EA	0xB298    UXTH	R0, R3
0x32EC	0xF7FEF9EC  BL	__Lib_TFT__TFT_Write_Char_E+0
0x32F0	0xF8BD0004  LDRH	R0, [SP, #4]
0x32F4	0x1C41    ADDS	R1, R0, #1
0x32F6	0xB289    UXTH	R1, R1
; i end address is: 0 (R0)
; i start address is: 4 (R1)
; i end address is: 4 (R1)
0x32F8	0xE00B    B	L_TFT_Write_Text199
L_TFT_Write_Text198:
;__Lib_TFT.c, 1280 :: 		
; i start address is: 0 (R0)
0x32FA	0x9B02    LDR	R3, [SP, #8]
0x32FC	0x181B    ADDS	R3, R3, R0
0x32FE	0x781B    LDRB	R3, [R3, #0]
0x3300	0xF8AD0004  STRH	R0, [SP, #4]
0x3304	0xB298    UXTH	R0, R3
0x3306	0xF7FDFC63  BL	__Lib_TFT__TFT_Write_Char+0
0x330A	0xF8BD0004  LDRH	R0, [SP, #4]
0x330E	0x1C41    ADDS	R1, R0, #1
0x3310	0xB289    UXTH	R1, R1
; i end address is: 0 (R0)
; i start address is: 4 (R1)
; i end address is: 4 (R1)
L_TFT_Write_Text199:
; i start address is: 4 (R1)
0x3312	0xB288    UXTH	R0, R1
; i end address is: 4 (R1)
0x3314	0xE7DD    B	L_TFT_Write_Text196
L_TFT_Write_Text197:
;__Lib_TFT.c, 1281 :: 		
L_end_TFT_Write_Text:
0x3316	0xF8DDE000  LDR	LR, [SP, #0]
0x331A	0xB003    ADD	SP, SP, #12
0x331C	0x4770    BX	LR
0x331E	0xBF00    NOP
0x3320	0x00AE2000  	_TFT_DISP_WIDTH+0
0x3324	0x00B02000  	_TFT_DISP_HEIGHT+0
0x3328	0x00A92000  	_ExternalFontSet+0
; end of _TFT_Write_Text
__Lib_TFT__TFT_Write_Char_E:
;__Lib_TFT.c, 3361 :: 		
; ch start address is: 0 (R0)
0x16C8	0xB08B    SUB	SP, SP, #44
0x16CA	0xF8CDE000  STR	LR, [SP, #0]
; ch end address is: 0 (R0)
; ch start address is: 0 (R0)
;__Lib_TFT.c, 3363 :: 		
;__Lib_TFT.c, 3365 :: 		
0x16CE	0xF2400100  MOVW	R1, #0
0x16D2	0xF8AD1026  STRH	R1, [SP, #38]
0x16D6	0x2100    MOVS	R1, #0
0x16D8	0xF88D1028  STRB	R1, [SP, #40]
;__Lib_TFT.c, 3366 :: 		
;__Lib_TFT.c, 3373 :: 		
0x16DC	0x49B5    LDR	R1, [PC, #724]
0x16DE	0x8809    LDRH	R1, [R1, #0]
0x16E0	0x4288    CMP	R0, R1
0x16E2	0xD200    BCS	L___Lib_TFT__TFT_Write_Char_E687
; ch end address is: 0 (R0)
;__Lib_TFT.c, 3374 :: 		
0x16E4	0xE162    B	L_end__TFT_Write_Char_E
L___Lib_TFT__TFT_Write_Char_E687:
;__Lib_TFT.c, 3375 :: 		
; ch start address is: 0 (R0)
0x16E6	0x49B4    LDR	R1, [PC, #720]
0x16E8	0x8809    LDRH	R1, [R1, #0]
0x16EA	0x4288    CMP	R0, R1
0x16EC	0xD900    BLS	L___Lib_TFT__TFT_Write_Char_E688
; ch end address is: 0 (R0)
;__Lib_TFT.c, 3376 :: 		
0x16EE	0xE15D    B	L_end__TFT_Write_Char_E
L___Lib_TFT__TFT_Write_Char_E688:
;__Lib_TFT.c, 3379 :: 		
; ch start address is: 0 (R0)
0x16F0	0x49B0    LDR	R1, [PC, #704]
0x16F2	0x8809    LDRH	R1, [R1, #0]
0x16F4	0x1A41    SUB	R1, R0, R1
0x16F6	0xB289    UXTH	R1, R1
; ch end address is: 0 (R0)
0x16F8	0x008A    LSLS	R2, R1, #2
0x16FA	0xB292    UXTH	R2, R2
;__Lib_TFT.c, 3380 :: 		
0x16FC	0x49AF    LDR	R1, [PC, #700]
0x16FE	0x6809    LDR	R1, [R1, #0]
0x1700	0x3108    ADDS	R1, #8
0x1702	0x1889    ADDS	R1, R1, R2
;__Lib_TFT.c, 3383 :: 		
0x1704	0x4608    MOV	R0, R1
0x1706	0x2104    MOVS	R1, #4
0x1708	0xF7FFF8F6  BL	__Lib_TFT__TFT_getHeader+0
;__Lib_TFT.c, 3384 :: 		
; ptr start address is: 0 (R0)
0x170C	0x48AC    LDR	R0, [PC, #688]
;__Lib_TFT.c, 3386 :: 		
0x170E	0x7803    LDRB	R3, [R0, #0]
0x1710	0xF88D3024  STRB	R3, [SP, #36]
;__Lib_TFT.c, 3388 :: 		
0x1714	0x1C41    ADDS	R1, R0, #1
0x1716	0x7809    LDRB	R1, [R1, #0]
0x1718	0xB2CA    UXTB	R2, R1
0x171A	0x1C81    ADDS	R1, R0, #2
0x171C	0x7809    LDRB	R1, [R1, #0]
0x171E	0x0209    LSLS	R1, R1, #8
0x1720	0x1852    ADDS	R2, R2, R1
0x1722	0x1CC1    ADDS	R1, R0, #3
; ptr end address is: 0 (R0)
0x1724	0x7809    LDRB	R1, [R1, #0]
0x1726	0x0409    LSLS	R1, R1, #16
0x1728	0x1852    ADDS	R2, R2, R1
;__Lib_TFT.c, 3390 :: 		
0x172A	0x49A4    LDR	R1, [PC, #656]
0x172C	0x6809    LDR	R1, [R1, #0]
0x172E	0x1889    ADDS	R1, R1, R2
0x1730	0x9104    STR	R1, [SP, #16]
;__Lib_TFT.c, 3392 :: 		
0x1732	0x08DA    LSRS	R2, R3, #3
0x1734	0xB2D2    UXTB	R2, R2
0x1736	0x49A3    LDR	R1, [PC, #652]
0x1738	0x8809    LDRH	R1, [R1, #0]
0x173A	0x4351    MULS	R1, R2, R1
0x173C	0xB289    UXTH	R1, R1
0x173E	0x9106    STR	R1, [SP, #24]
;__Lib_TFT.c, 3393 :: 		
0x1740	0xF0030107  AND	R1, R3, #7
0x1744	0xB2C9    UXTB	R1, R1
0x1746	0xB121    CBZ	R1, L___Lib_TFT__TFT_Write_Char_E689
;__Lib_TFT.c, 3394 :: 		
0x1748	0x499E    LDR	R1, [PC, #632]
0x174A	0x880A    LDRH	R2, [R1, #0]
0x174C	0x9906    LDR	R1, [SP, #24]
0x174E	0x1889    ADDS	R1, R1, R2
0x1750	0x9106    STR	R1, [SP, #24]
L___Lib_TFT__TFT_Write_Char_E689:
;__Lib_TFT.c, 3395 :: 		
0x1752	0x9906    LDR	R1, [SP, #24]
0x1754	0x9108    STR	R1, [SP, #32]
;__Lib_TFT.c, 3396 :: 		
0x1756	0xAC05    ADD	R4, SP, #20
0x1758	0x4622    MOV	R2, R4
0x175A	0x9906    LDR	R1, [SP, #24]
0x175C	0x9804    LDR	R0, [SP, #16]
0x175E	0x4C9A    LDR	R4, [PC, #616]
0x1760	0x6824    LDR	R4, [R4, #0]
0x1762	0x47A0    BLX	R4
; ptr start address is: 16 (R4)
0x1764	0x4604    MOV	R4, R0
;__Lib_TFT.c, 3397 :: 		
0x1766	0x9A05    LDR	R2, [SP, #20]
0x1768	0x9904    LDR	R1, [SP, #16]
0x176A	0x1889    ADDS	R1, R1, R2
0x176C	0x9104    STR	R1, [SP, #16]
;__Lib_TFT.c, 3398 :: 		
0x176E	0x9A05    LDR	R2, [SP, #20]
0x1770	0x9906    LDR	R1, [SP, #24]
0x1772	0x1A89    SUB	R1, R1, R2
0x1774	0x9106    STR	R1, [SP, #24]
;__Lib_TFT.c, 3400 :: 		
0x1776	0x2100    MOVS	R1, #0
0x1778	0x9107    STR	R1, [SP, #28]
;__Lib_TFT.c, 3401 :: 		
0x177A	0x4994    LDR	R1, [PC, #592]
0x177C	0x7809    LDRB	R1, [R1, #0]
0x177E	0xB121    CBZ	R1, L___Lib_TFT__TFT_Write_Char_E974
0x1780	0x4992    LDR	R1, [PC, #584]
0x1782	0x7809    LDRB	R1, [R1, #0]
0x1784	0x2902    CMP	R1, #2
0x1786	0xD000    BEQ	L___Lib_TFT__TFT_Write_Char_E973
0x1788	0xE08C    B	L___Lib_TFT__TFT_Write_Char_E692
L___Lib_TFT__TFT_Write_Char_E974:
L___Lib_TFT__TFT_Write_Char_E973:
;__Lib_TFT.c, 3402 :: 		
0x178A	0x4991    LDR	R1, [PC, #580]
0x178C	0x8809    LDRH	R1, [R1, #0]
0x178E	0xF8AD100A  STRH	R1, [SP, #10]
;__Lib_TFT.c, 3403 :: 		
0x1792	0x2100    MOVS	R1, #0
0x1794	0xF88D1009  STRB	R1, [SP, #9]
; ptr end address is: 16 (R4)
0x1798	0x4620    MOV	R0, R4
L___Lib_TFT__TFT_Write_Char_E693:
; ptr start address is: 0 (R0)
0x179A	0x498A    LDR	R1, [PC, #552]
0x179C	0x880A    LDRH	R2, [R1, #0]
0x179E	0xF89D1009  LDRB	R1, [SP, #9]
0x17A2	0x4291    CMP	R1, R2
0x17A4	0xF0808070  BCS	L___Lib_TFT__TFT_Write_Char_E694
;__Lib_TFT.c, 3404 :: 		
0x17A8	0x498A    LDR	R1, [PC, #552]
0x17AA	0x8809    LDRH	R1, [R1, #0]
0x17AC	0xF8AD1026  STRH	R1, [SP, #38]
;__Lib_TFT.c, 3405 :: 		
0x17B0	0x2100    MOVS	R1, #0
0x17B2	0xF88D100C  STRB	R1, [SP, #12]
;__Lib_TFT.c, 3406 :: 		
0x17B6	0x2100    MOVS	R1, #0
0x17B8	0xF88D1008  STRB	R1, [SP, #8]
; ptr end address is: 0 (R0)
0x17BC	0x4604    MOV	R4, R0
L___Lib_TFT__TFT_Write_Char_E696:
; ptr start address is: 16 (R4)
0x17BE	0xF89D2024  LDRB	R2, [SP, #36]
0x17C2	0xF89D1008  LDRB	R1, [SP, #8]
0x17C6	0x4291    CMP	R1, R2
0x17C8	0xD252    BCS	L___Lib_TFT__TFT_Write_Char_E697
;__Lib_TFT.c, 3407 :: 		
0x17CA	0xF89D100C  LDRB	R1, [SP, #12]
0x17CE	0xBB59    CBNZ	R1, L___Lib_TFT__TFT_Write_Char_E977
;__Lib_TFT.c, 3408 :: 		
0x17D0	0x9907    LDR	R1, [SP, #28]
0x17D2	0x1C49    ADDS	R1, R1, #1
0x17D4	0x9107    STR	R1, [SP, #28]
;__Lib_TFT.c, 3409 :: 		
0x17D6	0x9A08    LDR	R2, [SP, #32]
0x17D8	0x9905    LDR	R1, [SP, #20]
0x17DA	0x4291    CMP	R1, R2
0x17DC	0xD21B    BCS	L___Lib_TFT__TFT_Write_Char_E976
;__Lib_TFT.c, 3410 :: 		
0x17DE	0x9A05    LDR	R2, [SP, #20]
0x17E0	0x9907    LDR	R1, [SP, #28]
0x17E2	0x4291    CMP	R1, R2
0x17E4	0xD915    BLS	L___Lib_TFT__TFT_Write_Char_E975
; ptr end address is: 16 (R4)
;__Lib_TFT.c, 3411 :: 		
0x17E6	0x2101    MOVS	R1, #1
0x17E8	0x9107    STR	R1, [SP, #28]
;__Lib_TFT.c, 3412 :: 		
0x17EA	0xAC05    ADD	R4, SP, #20
0x17EC	0x4622    MOV	R2, R4
0x17EE	0x9906    LDR	R1, [SP, #24]
0x17F0	0x9804    LDR	R0, [SP, #16]
0x17F2	0x4C75    LDR	R4, [PC, #468]
0x17F4	0x6824    LDR	R4, [R4, #0]
0x17F6	0x47A0    BLX	R4
; ptr start address is: 16 (R4)
0x17F8	0x4604    MOV	R4, R0
;__Lib_TFT.c, 3413 :: 		
0x17FA	0x9906    LDR	R1, [SP, #24]
0x17FC	0x9108    STR	R1, [SP, #32]
;__Lib_TFT.c, 3414 :: 		
0x17FE	0x9A05    LDR	R2, [SP, #20]
0x1800	0x9904    LDR	R1, [SP, #16]
0x1802	0x1889    ADDS	R1, R1, R2
0x1804	0x9104    STR	R1, [SP, #16]
;__Lib_TFT.c, 3415 :: 		
0x1806	0x9A05    LDR	R2, [SP, #20]
0x1808	0x9906    LDR	R1, [SP, #24]
0x180A	0x1A89    SUB	R1, R1, R2
0x180C	0x9106    STR	R1, [SP, #24]
; ptr end address is: 16 (R4)
0x180E	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3416 :: 		
0x1810	0xE000    B	L___Lib_TFT__TFT_Write_Char_E701
L___Lib_TFT__TFT_Write_Char_E975:
;__Lib_TFT.c, 3410 :: 		
0x1812	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3416 :: 		
L___Lib_TFT__TFT_Write_Char_E701:
;__Lib_TFT.c, 3417 :: 		
; ptr start address is: 0 (R0)
; ptr end address is: 0 (R0)
0x1814	0xE000    B	L___Lib_TFT__TFT_Write_Char_E700
L___Lib_TFT__TFT_Write_Char_E976:
;__Lib_TFT.c, 3409 :: 		
0x1816	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3417 :: 		
L___Lib_TFT__TFT_Write_Char_E700:
;__Lib_TFT.c, 3418 :: 		
; ptr start address is: 0 (R0)
0x1818	0x7801    LDRB	R1, [R0, #0]
0x181A	0xF88D1028  STRB	R1, [SP, #40]
0x181E	0x1C40    ADDS	R0, R0, #1
;__Lib_TFT.c, 3419 :: 		
0x1820	0x2101    MOVS	R1, #1
0x1822	0xF88D100C  STRB	R1, [SP, #12]
; ptr end address is: 0 (R0)
;__Lib_TFT.c, 3420 :: 		
0x1826	0xE000    B	L___Lib_TFT__TFT_Write_Char_E699
L___Lib_TFT__TFT_Write_Char_E977:
;__Lib_TFT.c, 3407 :: 		
0x1828	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3420 :: 		
L___Lib_TFT__TFT_Write_Char_E699:
;__Lib_TFT.c, 3422 :: 		
; ptr start address is: 0 (R0)
0x182A	0xF89D200C  LDRB	R2, [SP, #12]
0x182E	0xF89D1028  LDRB	R1, [SP, #40]
0x1832	0x4011    ANDS	R1, R2
0x1834	0xB2C9    UXTB	R1, R1
0x1836	0xB151    CBZ	R1, L___Lib_TFT__TFT_Write_Char_E702
;__Lib_TFT.c, 3423 :: 		
0x1838	0x4967    LDR	R1, [PC, #412]
0x183A	0x8809    LDRH	R1, [R1, #0]
0x183C	0x9001    STR	R0, [SP, #4]
0x183E	0xB28A    UXTH	R2, R1
0x1840	0xF8BD100A  LDRH	R1, [SP, #10]
0x1844	0xF8BD0026  LDRH	R0, [SP, #38]
0x1848	0xF7FFF90C  BL	_TFT_Dot+0
0x184C	0x9801    LDR	R0, [SP, #4]
;__Lib_TFT.c, 3424 :: 		
L___Lib_TFT__TFT_Write_Char_E702:
;__Lib_TFT.c, 3426 :: 		
0x184E	0xF8BD1026  LDRH	R1, [SP, #38]
0x1852	0x1C49    ADDS	R1, R1, #1
0x1854	0xF8AD1026  STRH	R1, [SP, #38]
;__Lib_TFT.c, 3427 :: 		
0x1858	0xF89D100C  LDRB	R1, [SP, #12]
0x185C	0x0049    LSLS	R1, R1, #1
0x185E	0xF88D100C  STRB	R1, [SP, #12]
;__Lib_TFT.c, 3406 :: 		
0x1862	0xF89D1008  LDRB	R1, [SP, #8]
0x1866	0x1C49    ADDS	R1, R1, #1
0x1868	0xF88D1008  STRB	R1, [SP, #8]
;__Lib_TFT.c, 3428 :: 		
0x186C	0x4604    MOV	R4, R0
; ptr end address is: 0 (R0)
0x186E	0xE7A6    B	L___Lib_TFT__TFT_Write_Char_E696
L___Lib_TFT__TFT_Write_Char_E697:
;__Lib_TFT.c, 3429 :: 		
; ptr start address is: 16 (R4)
0x1870	0xF8BD100A  LDRH	R1, [SP, #10]
0x1874	0x1C49    ADDS	R1, R1, #1
0x1876	0xF8AD100A  STRH	R1, [SP, #10]
;__Lib_TFT.c, 3403 :: 		
0x187A	0xF89D1009  LDRB	R1, [SP, #9]
0x187E	0x1C49    ADDS	R1, R1, #1
0x1880	0xF88D1009  STRB	R1, [SP, #9]
;__Lib_TFT.c, 3430 :: 		
0x1884	0x4620    MOV	R0, R4
; ptr end address is: 16 (R4)
0x1886	0xE788    B	L___Lib_TFT__TFT_Write_Char_E693
L___Lib_TFT__TFT_Write_Char_E694:
;__Lib_TFT.c, 3432 :: 		
0x1888	0x4950    LDR	R1, [PC, #320]
0x188A	0x7809    LDRB	R1, [R1, #0]
0x188C	0xB929    CBNZ	R1, L___Lib_TFT__TFT_Write_Char_E703
;__Lib_TFT.c, 3433 :: 		
0x188E	0xF8BD1026  LDRH	R1, [SP, #38]
0x1892	0x1C4A    ADDS	R2, R1, #1
0x1894	0x494F    LDR	R1, [PC, #316]
0x1896	0x800A    STRH	R2, [R1, #0]
0x1898	0xE003    B	L___Lib_TFT__TFT_Write_Char_E704
L___Lib_TFT__TFT_Write_Char_E703:
;__Lib_TFT.c, 3435 :: 		
0x189A	0xF8BD200A  LDRH	R2, [SP, #10]
0x189E	0x494C    LDR	R1, [PC, #304]
0x18A0	0x800A    STRH	R2, [R1, #0]
L___Lib_TFT__TFT_Write_Char_E704:
;__Lib_TFT.c, 3436 :: 		
0x18A2	0xE083    B	L___Lib_TFT__TFT_Write_Char_E705
L___Lib_TFT__TFT_Write_Char_E692:
;__Lib_TFT.c, 3437 :: 		
; ptr start address is: 16 (R4)
0x18A4	0x494B    LDR	R1, [PC, #300]
0x18A6	0x8809    LDRH	R1, [R1, #0]
0x18A8	0xF8AD100A  STRH	R1, [SP, #10]
;__Lib_TFT.c, 3438 :: 		
0x18AC	0x2100    MOVS	R1, #0
0x18AE	0xF88D1009  STRB	R1, [SP, #9]
; ptr end address is: 16 (R4)
0x18B2	0x4620    MOV	R0, R4
L___Lib_TFT__TFT_Write_Char_E706:
; ptr start address is: 0 (R0)
0x18B4	0x4943    LDR	R1, [PC, #268]
0x18B6	0x880A    LDRH	R2, [R1, #0]
0x18B8	0xF89D1009  LDRB	R1, [SP, #9]
0x18BC	0x4291    CMP	R1, R2
0x18BE	0xF0808070  BCS	L___Lib_TFT__TFT_Write_Char_E707
;__Lib_TFT.c, 3439 :: 		
0x18C2	0x4943    LDR	R1, [PC, #268]
0x18C4	0x8809    LDRH	R1, [R1, #0]
0x18C6	0xF8AD1026  STRH	R1, [SP, #38]
;__Lib_TFT.c, 3440 :: 		
0x18CA	0x2100    MOVS	R1, #0
0x18CC	0xF88D100C  STRB	R1, [SP, #12]
;__Lib_TFT.c, 3441 :: 		
0x18D0	0x2100    MOVS	R1, #0
0x18D2	0xF88D1008  STRB	R1, [SP, #8]
; ptr end address is: 0 (R0)
0x18D6	0x4604    MOV	R4, R0
L___Lib_TFT__TFT_Write_Char_E709:
; ptr start address is: 16 (R4)
0x18D8	0xF89D2024  LDRB	R2, [SP, #36]
0x18DC	0xF89D1008  LDRB	R1, [SP, #8]
0x18E0	0x4291    CMP	R1, R2
0x18E2	0xD252    BCS	L___Lib_TFT__TFT_Write_Char_E710
;__Lib_TFT.c, 3442 :: 		
0x18E4	0xF89D100C  LDRB	R1, [SP, #12]
0x18E8	0xBB59    CBNZ	R1, L___Lib_TFT__TFT_Write_Char_E980
;__Lib_TFT.c, 3443 :: 		
0x18EA	0x9907    LDR	R1, [SP, #28]
0x18EC	0x1C49    ADDS	R1, R1, #1
0x18EE	0x9107    STR	R1, [SP, #28]
;__Lib_TFT.c, 3444 :: 		
0x18F0	0x9A08    LDR	R2, [SP, #32]
0x18F2	0x9905    LDR	R1, [SP, #20]
0x18F4	0x4291    CMP	R1, R2
0x18F6	0xD21B    BCS	L___Lib_TFT__TFT_Write_Char_E979
;__Lib_TFT.c, 3445 :: 		
0x18F8	0x9A05    LDR	R2, [SP, #20]
0x18FA	0x9907    LDR	R1, [SP, #28]
0x18FC	0x4291    CMP	R1, R2
0x18FE	0xD915    BLS	L___Lib_TFT__TFT_Write_Char_E978
; ptr end address is: 16 (R4)
;__Lib_TFT.c, 3446 :: 		
0x1900	0x2101    MOVS	R1, #1
0x1902	0x9107    STR	R1, [SP, #28]
;__Lib_TFT.c, 3447 :: 		
0x1904	0xAC05    ADD	R4, SP, #20
0x1906	0x4622    MOV	R2, R4
0x1908	0x9906    LDR	R1, [SP, #24]
0x190A	0x9804    LDR	R0, [SP, #16]
0x190C	0x4C2E    LDR	R4, [PC, #184]
0x190E	0x6824    LDR	R4, [R4, #0]
0x1910	0x47A0    BLX	R4
; ptr start address is: 16 (R4)
0x1912	0x4604    MOV	R4, R0
;__Lib_TFT.c, 3448 :: 		
0x1914	0x9906    LDR	R1, [SP, #24]
0x1916	0x9108    STR	R1, [SP, #32]
;__Lib_TFT.c, 3449 :: 		
0x1918	0x9A05    LDR	R2, [SP, #20]
0x191A	0x9904    LDR	R1, [SP, #16]
0x191C	0x1889    ADDS	R1, R1, R2
0x191E	0x9104    STR	R1, [SP, #16]
;__Lib_TFT.c, 3450 :: 		
0x1920	0x9A05    LDR	R2, [SP, #20]
0x1922	0x9906    LDR	R1, [SP, #24]
0x1924	0x1A89    SUB	R1, R1, R2
0x1926	0x9106    STR	R1, [SP, #24]
; ptr end address is: 16 (R4)
0x1928	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3451 :: 		
0x192A	0xE000    B	L___Lib_TFT__TFT_Write_Char_E714
L___Lib_TFT__TFT_Write_Char_E978:
;__Lib_TFT.c, 3445 :: 		
0x192C	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3451 :: 		
L___Lib_TFT__TFT_Write_Char_E714:
;__Lib_TFT.c, 3452 :: 		
; ptr start address is: 0 (R0)
; ptr end address is: 0 (R0)
0x192E	0xE000    B	L___Lib_TFT__TFT_Write_Char_E713
L___Lib_TFT__TFT_Write_Char_E979:
;__Lib_TFT.c, 3444 :: 		
0x1930	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3452 :: 		
L___Lib_TFT__TFT_Write_Char_E713:
;__Lib_TFT.c, 3453 :: 		
; ptr start address is: 0 (R0)
0x1932	0x7801    LDRB	R1, [R0, #0]
0x1934	0xF88D1028  STRB	R1, [SP, #40]
0x1938	0x1C40    ADDS	R0, R0, #1
;__Lib_TFT.c, 3454 :: 		
0x193A	0x2101    MOVS	R1, #1
0x193C	0xF88D100C  STRB	R1, [SP, #12]
; ptr end address is: 0 (R0)
;__Lib_TFT.c, 3455 :: 		
0x1940	0xE000    B	L___Lib_TFT__TFT_Write_Char_E712
L___Lib_TFT__TFT_Write_Char_E980:
;__Lib_TFT.c, 3442 :: 		
0x1942	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3455 :: 		
L___Lib_TFT__TFT_Write_Char_E712:
;__Lib_TFT.c, 3457 :: 		
; ptr start address is: 0 (R0)
0x1944	0xF89D200C  LDRB	R2, [SP, #12]
0x1948	0xF89D1028  LDRB	R1, [SP, #40]
0x194C	0x4011    ANDS	R1, R2
0x194E	0xB2C9    UXTB	R1, R1
0x1950	0xB151    CBZ	R1, L___Lib_TFT__TFT_Write_Char_E715
;__Lib_TFT.c, 3458 :: 		
0x1952	0x4921    LDR	R1, [PC, #132]
0x1954	0x8809    LDRH	R1, [R1, #0]
0x1956	0x9001    STR	R0, [SP, #4]
0x1958	0xB28A    UXTH	R2, R1
0x195A	0xF8BD1026  LDRH	R1, [SP, #38]
0x195E	0xF8BD000A  LDRH	R0, [SP, #10]
0x1962	0xF7FFF87F  BL	_TFT_Dot+0
0x1966	0x9801    LDR	R0, [SP, #4]
;__Lib_TFT.c, 3459 :: 		
L___Lib_TFT__TFT_Write_Char_E715:
;__Lib_TFT.c, 3461 :: 		
0x1968	0xF8BD1026  LDRH	R1, [SP, #38]
0x196C	0x1E49    SUBS	R1, R1, #1
0x196E	0xF8AD1026  STRH	R1, [SP, #38]
;__Lib_TFT.c, 3462 :: 		
0x1972	0xF89D100C  LDRB	R1, [SP, #12]
0x1976	0x0049    LSLS	R1, R1, #1
0x1978	0xF88D100C  STRB	R1, [SP, #12]
;__Lib_TFT.c, 3441 :: 		
0x197C	0xF89D1008  LDRB	R1, [SP, #8]
0x1980	0x1C49    ADDS	R1, R1, #1
0x1982	0xF88D1008  STRB	R1, [SP, #8]
;__Lib_TFT.c, 3463 :: 		
0x1986	0x4604    MOV	R4, R0
; ptr end address is: 0 (R0)
0x1988	0xE7A6    B	L___Lib_TFT__TFT_Write_Char_E709
L___Lib_TFT__TFT_Write_Char_E710:
;__Lib_TFT.c, 3465 :: 		
; ptr start address is: 16 (R4)
0x198A	0xF8BD100A  LDRH	R1, [SP, #10]
0x198E	0x1C49    ADDS	R1, R1, #1
0x1990	0xF8AD100A  STRH	R1, [SP, #10]
;__Lib_TFT.c, 3438 :: 		
0x1994	0xF89D1009  LDRB	R1, [SP, #9]
0x1998	0x1C49    ADDS	R1, R1, #1
0x199A	0xF88D1009  STRB	R1, [SP, #9]
;__Lib_TFT.c, 3466 :: 		
0x199E	0x4620    MOV	R0, R4
; ptr end address is: 16 (R4)
0x19A0	0xE788    B	L___Lib_TFT__TFT_Write_Char_E706
L___Lib_TFT__TFT_Write_Char_E707:
;__Lib_TFT.c, 3469 :: 		
0x19A2	0xF8BD1026  LDRH	R1, [SP, #38]
0x19A6	0x1E4A    SUBS	R2, R1, #1
0x19A8	0x4909    LDR	R1, [PC, #36]
0x19AA	0x800A    STRH	R2, [R1, #0]
;__Lib_TFT.c, 3470 :: 		
L___Lib_TFT__TFT_Write_Char_E705:
;__Lib_TFT.c, 3471 :: 		
L_end__TFT_Write_Char_E:
0x19AC	0xF8DDE000  LDR	LR, [SP, #0]
0x19B0	0xB00B    ADD	SP, SP, #44
0x19B2	0x4770    BX	LR
0x19B4	0x00A02000  	__Lib_TFT__fontFirstChar+0
0x19B8	0x00A22000  	__Lib_TFT__fontLastChar+0
0x19BC	0x00D82000  	__Lib_TFT_activeExtFont+0
0x19C0	0x00CA2000  	__Lib_TFT_headerBuffer+0
0x19C4	0x00A42000  	__Lib_TFT__fontHeight+0
0x19C8	0x00D42000  	_TFT_Get_Ext_Data_Ptr+0
0x19CC	0x00A82000  	__Lib_TFT_FontOrientation+0
0x19D0	0x00AA2000  	__Lib_TFT_y_cord+0
0x19D4	0x00AC2000  	__Lib_TFT_x_cord+0
0x19D8	0x00A62000  	__Lib_TFT_FontColor+0
; end of __Lib_TFT__TFT_Write_Char_E
__Lib_TFT__TFT_getHeader:
;__Lib_TFT.c, 3325 :: 		
; count start address is: 4 (R1)
; offset start address is: 0 (R0)
0x08F8	0xB085    SUB	SP, SP, #20
0x08FA	0xF8CDE000  STR	LR, [SP, #0]
; count end address is: 4 (R1)
; offset end address is: 0 (R0)
; offset start address is: 0 (R0)
; count start address is: 4 (R1)
;__Lib_TFT.c, 3329 :: 		
; ptrH start address is: 20 (R5)
0x08FE	0x4D15    LDR	R5, [PC, #84]
; offset end address is: 0 (R0)
; ptrH end address is: 20 (R5)
; count end address is: 4 (R1)
0x0900	0x4603    MOV	R3, R0
;__Lib_TFT.c, 3330 :: 		
L___Lib_TFT__TFT_getHeader682:
; ptrH start address is: 20 (R5)
; count start address is: 4 (R1)
; offset start address is: 12 (R3)
0x0902	0x2900    CMP	R1, #0
0x0904	0xD922    BLS	L___Lib_TFT__TFT_getHeader683
;__Lib_TFT.c, 3331 :: 		
0x0906	0xAC04    ADD	R4, SP, #16
0x0908	0x9301    STR	R3, [SP, #4]
0x090A	0xF8AD1008  STRH	R1, [SP, #8]
0x090E	0x9503    STR	R5, [SP, #12]
0x0910	0x4622    MOV	R2, R4
0x0912	0x4618    MOV	R0, R3
0x0914	0x4C10    LDR	R4, [PC, #64]
0x0916	0x6824    LDR	R4, [R4, #0]
0x0918	0x47A0    BLX	R4
0x091A	0x9D03    LDR	R5, [SP, #12]
0x091C	0xF8BD1008  LDRH	R1, [SP, #8]
0x0920	0x9B01    LDR	R3, [SP, #4]
; ptr start address is: 16 (R4)
0x0922	0x4604    MOV	R4, R0
;__Lib_TFT.c, 3332 :: 		
; i start address is: 0 (R0)
0x0924	0x2000    MOVS	R0, #0
; ptrH end address is: 20 (R5)
; ptr end address is: 16 (R4)
; i end address is: 0 (R0)
; count end address is: 4 (R1)
; offset end address is: 12 (R3)
L___Lib_TFT__TFT_getHeader684:
; i start address is: 0 (R0)
; ptr start address is: 16 (R4)
; offset start address is: 12 (R3)
; count start address is: 4 (R1)
; ptrH start address is: 20 (R5)
0x0926	0xF8BD2010  LDRH	R2, [SP, #16]
0x092A	0x4290    CMP	R0, R2
0x092C	0xD206    BCS	L___Lib_TFT__TFT_getHeader685
;__Lib_TFT.c, 3333 :: 		
0x092E	0x7822    LDRB	R2, [R4, #0]
0x0930	0x702A    STRB	R2, [R5, #0]
;__Lib_TFT.c, 3334 :: 		
0x0932	0x1C6D    ADDS	R5, R5, #1
;__Lib_TFT.c, 3335 :: 		
0x0934	0x1C64    ADDS	R4, R4, #1
;__Lib_TFT.c, 3332 :: 		
0x0936	0x1C40    ADDS	R0, R0, #1
0x0938	0xB280    UXTH	R0, R0
;__Lib_TFT.c, 3336 :: 		
; ptr end address is: 16 (R4)
; i end address is: 0 (R0)
0x093A	0xE7F4    B	L___Lib_TFT__TFT_getHeader684
L___Lib_TFT__TFT_getHeader685:
;__Lib_TFT.c, 3337 :: 		
0x093C	0xF8BD2010  LDRH	R2, [SP, #16]
0x0940	0x1A89    SUB	R1, R1, R2
0x0942	0xB289    UXTH	R1, R1
;__Lib_TFT.c, 3338 :: 		
0x0944	0xF8BD2010  LDRH	R2, [SP, #16]
0x0948	0x189B    ADDS	R3, R3, R2
;__Lib_TFT.c, 3339 :: 		
; ptrH end address is: 20 (R5)
; count end address is: 4 (R1)
; offset end address is: 12 (R3)
0x094A	0xE7DA    B	L___Lib_TFT__TFT_getHeader682
L___Lib_TFT__TFT_getHeader683:
;__Lib_TFT.c, 3341 :: 		
L_end__TFT_getHeader:
0x094C	0xF8DDE000  LDR	LR, [SP, #0]
0x0950	0xB005    ADD	SP, SP, #20
0x0952	0x4770    BX	LR
0x0954	0x00CA2000  	__Lib_TFT_headerBuffer+0
0x0958	0x00D42000  	_TFT_Get_Ext_Data_Ptr+0
; end of __Lib_TFT__TFT_getHeader
_TFT_Dot:
;__Lib_TFT.c, 544 :: 		
; y start address is: 4 (R1)
; x start address is: 0 (R0)
0x0A64	0xB082    SUB	SP, SP, #8
0x0A66	0xF8CDE000  STR	LR, [SP, #0]
0x0A6A	0xF8AD2004  STRH	R2, [SP, #4]
0x0A6E	0xB20A    SXTH	R2, R1
0x0A70	0xB201    SXTH	R1, R0
; y end address is: 4 (R1)
; x end address is: 0 (R0)
; x start address is: 4 (R1)
; y start address is: 8 (R2)
;__Lib_TFT.c, 546 :: 		
0x0A72	0x2900    CMP	R1, #0
0x0A74	0xDB04    BLT	L__TFT_Dot949
0x0A76	0x4B17    LDR	R3, [PC, #92]
0x0A78	0x881B    LDRH	R3, [R3, #0]
0x0A7A	0x4299    CMP	R1, R3
0x0A7C	0xD200    BCS	L__TFT_Dot948
0x0A7E	0xE000    B	L_TFT_Dot6
; x end address is: 4 (R1)
; y end address is: 8 (R2)
L__TFT_Dot949:
L__TFT_Dot948:
;__Lib_TFT.c, 547 :: 		
0x0A80	0xE024    B	L_end_TFT_Dot
L_TFT_Dot6:
;__Lib_TFT.c, 548 :: 		
; y start address is: 8 (R2)
; x start address is: 4 (R1)
0x0A82	0x2A00    CMP	R2, #0
0x0A84	0xDB04    BLT	L__TFT_Dot951
0x0A86	0x4B14    LDR	R3, [PC, #80]
0x0A88	0x881B    LDRH	R3, [R3, #0]
0x0A8A	0x429A    CMP	R2, R3
0x0A8C	0xD200    BCS	L__TFT_Dot950
0x0A8E	0xE000    B	L_TFT_Dot9
; x end address is: 4 (R1)
; y end address is: 8 (R2)
L__TFT_Dot951:
L__TFT_Dot950:
;__Lib_TFT.c, 549 :: 		
0x0A90	0xE01C    B	L_end_TFT_Dot
L_TFT_Dot9:
;__Lib_TFT.c, 551 :: 		
; y start address is: 8 (R2)
; x start address is: 4 (R1)
0x0A92	0x2400    MOVS	R4, #0
0x0A94	0xB264    SXTB	R4, R4
0x0A96	0x4B11    LDR	R3, [PC, #68]
0x0A98	0x601C    STR	R4, [R3, #0]
;__Lib_TFT.c, 552 :: 		
0x0A9A	0xF000F9EB  BL	__Lib_TFT_Is_SSD1963_Set+0
0x0A9E	0xB138    CBZ	R0, L_TFT_Dot10
;__Lib_TFT.c, 553 :: 		
0x0AA0	0xB293    UXTH	R3, R2
0x0AA2	0xB28A    UXTH	R2, R1
0x0AA4	0xB299    UXTH	R1, R3
; y end address is: 8 (R2)
0x0AA6	0xB290    UXTH	R0, R2
; x end address is: 4 (R1)
0x0AA8	0x4C0D    LDR	R4, [PC, #52]
0x0AAA	0x6824    LDR	R4, [R4, #0]
0x0AAC	0x47A0    BLX	R4
0x0AAE	0xE004    B	L_TFT_Dot11
L_TFT_Dot10:
;__Lib_TFT.c, 555 :: 		
; y start address is: 8 (R2)
; x start address is: 4 (R1)
0x0AB0	0xB288    UXTH	R0, R1
; y end address is: 8 (R2)
0x0AB2	0xB291    UXTH	R1, R2
; x end address is: 4 (R1)
0x0AB4	0x4C0B    LDR	R4, [PC, #44]
0x0AB6	0x6824    LDR	R4, [R4, #0]
0x0AB8	0x47A0    BLX	R4
L_TFT_Dot11:
;__Lib_TFT.c, 556 :: 		
0x0ABA	0xF8BD0004  LDRH	R0, [SP, #4]
0x0ABE	0x4C0A    LDR	R4, [PC, #40]
0x0AC0	0x6824    LDR	R4, [R4, #0]
0x0AC2	0x47A0    BLX	R4
;__Lib_TFT.c, 557 :: 		
0x0AC4	0x2401    MOVS	R4, #1
0x0AC6	0xB264    SXTB	R4, R4
0x0AC8	0x4B04    LDR	R3, [PC, #16]
0x0ACA	0x601C    STR	R4, [R3, #0]
;__Lib_TFT.c, 558 :: 		
L_end_TFT_Dot:
0x0ACC	0xF8DDE000  LDR	LR, [SP, #0]
0x0AD0	0xB002    ADD	SP, SP, #8
0x0AD2	0x4770    BX	LR
0x0AD4	0x00AE2000  	_TFT_DISP_WIDTH+0
0x0AD8	0x00B02000  	_TFT_DISP_HEIGHT+0
0x0ADC	0x01BC4223  	TFT_CS+0
0x0AE0	0x00B42000  	_TFT_SSD1963_Set_Address_Ptr+0
0x0AE4	0x00B82000  	_TFT_Set_Address_Ptr+0
0x0AE8	0x00BC2000  	_TFT_Write_Data_Ptr+0
; end of _TFT_Dot
__Lib_TFT__TFT_Write_Char:
;__Lib_TFT.c, 1149 :: 		
; ch start address is: 0 (R0)
0x0BD0	0xB086    SUB	SP, SP, #24
0x0BD2	0xF8CDE000  STR	LR, [SP, #0]
0x0BD6	0xB287    UXTH	R7, R0
; ch end address is: 0 (R0)
; ch start address is: 28 (R7)
;__Lib_TFT.c, 1151 :: 		
;__Lib_TFT.c, 1153 :: 		
; x start address is: 20 (R5)
0x0BD8	0xF2400500  MOVW	R5, #0
;__Lib_TFT.c, 1154 :: 		
; temp start address is: 24 (R6)
0x0BDC	0x2600    MOVS	R6, #0
;__Lib_TFT.c, 1160 :: 		
0x0BDE	0x4972    LDR	R1, [PC, #456]
0x0BE0	0x7809    LDRB	R1, [R1, #0]
0x0BE2	0xB949    CBNZ	R1, L___Lib_TFT__TFT_Write_Char162
;__Lib_TFT.c, 1161 :: 		
0x0BE4	0x4971    LDR	R1, [PC, #452]
0x0BE6	0x2200    MOVS	R2, #0
0x0BE8	0x4608    MOV	R0, R1
0x0BEA	0xF2400100  MOVW	R1, #0
0x0BEE	0xF7FFFC9D  BL	_TFT_Set_Font+0
;__Lib_TFT.c, 1162 :: 		
0x0BF2	0x2201    MOVS	R2, #1
0x0BF4	0x496C    LDR	R1, [PC, #432]
0x0BF6	0x700A    STRB	R2, [R1, #0]
;__Lib_TFT.c, 1163 :: 		
L___Lib_TFT__TFT_Write_Char162:
;__Lib_TFT.c, 1165 :: 		
0x0BF8	0x496D    LDR	R1, [PC, #436]
0x0BFA	0x8809    LDRH	R1, [R1, #0]
0x0BFC	0x428F    CMP	R7, R1
0x0BFE	0xD200    BCS	L___Lib_TFT__TFT_Write_Char163
; ch end address is: 28 (R7)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
;__Lib_TFT.c, 1166 :: 		
0x0C00	0xE0CE    B	L_end__TFT_Write_Char
L___Lib_TFT__TFT_Write_Char163:
;__Lib_TFT.c, 1167 :: 		
; x start address is: 20 (R5)
; temp start address is: 24 (R6)
; ch start address is: 28 (R7)
0x0C02	0x496C    LDR	R1, [PC, #432]
0x0C04	0x8809    LDRH	R1, [R1, #0]
0x0C06	0x428F    CMP	R7, R1
0x0C08	0xD900    BLS	L___Lib_TFT__TFT_Write_Char164
; ch end address is: 28 (R7)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
;__Lib_TFT.c, 1168 :: 		
0x0C0A	0xE0C9    B	L_end__TFT_Write_Char
L___Lib_TFT__TFT_Write_Char164:
;__Lib_TFT.c, 1171 :: 		
; x start address is: 20 (R5)
; temp start address is: 24 (R6)
; ch start address is: 28 (R7)
0x0C0C	0x4968    LDR	R1, [PC, #416]
0x0C0E	0x8809    LDRH	R1, [R1, #0]
0x0C10	0x1A79    SUB	R1, R7, R1
0x0C12	0xB289    UXTH	R1, R1
; ch end address is: 28 (R7)
0x0C14	0x008A    LSLS	R2, R1, #2
0x0C16	0xB292    UXTH	R2, R2
;__Lib_TFT.c, 1172 :: 		
0x0C18	0x4C67    LDR	R4, [PC, #412]
0x0C1A	0x6821    LDR	R1, [R4, #0]
0x0C1C	0x3108    ADDS	R1, #8
0x0C1E	0x188B    ADDS	R3, R1, R2
;__Lib_TFT.c, 1173 :: 		
0x0C20	0x7818    LDRB	R0, [R3, #0]
; chWidth start address is: 0 (R0)
;__Lib_TFT.c, 1175 :: 		
0x0C22	0x1C59    ADDS	R1, R3, #1
0x0C24	0x7809    LDRB	R1, [R1, #0]
0x0C26	0xB2CA    UXTB	R2, R1
0x0C28	0x1C99    ADDS	R1, R3, #2
0x0C2A	0x7809    LDRB	R1, [R1, #0]
0x0C2C	0x0209    LSLS	R1, R1, #8
0x0C2E	0x1852    ADDS	R2, R2, R1
0x0C30	0x1CD9    ADDS	R1, R3, #3
0x0C32	0x7809    LDRB	R1, [R1, #0]
0x0C34	0x0409    LSLS	R1, R1, #16
0x0C36	0x1852    ADDS	R2, R2, R1
;__Lib_TFT.c, 1177 :: 		
0x0C38	0x4621    MOV	R1, R4
0x0C3A	0x6809    LDR	R1, [R1, #0]
0x0C3C	0x188C    ADDS	R4, R1, R2
; pChBitMap start address is: 16 (R4)
;__Lib_TFT.c, 1179 :: 		
0x0C3E	0x495F    LDR	R1, [PC, #380]
0x0C40	0x7809    LDRB	R1, [R1, #0]
0x0C42	0xB121    CBZ	R1, L___Lib_TFT__TFT_Write_Char969
0x0C44	0x495D    LDR	R1, [PC, #372]
0x0C46	0x7809    LDRB	R1, [R1, #0]
0x0C48	0x2902    CMP	R1, #2
0x0C4A	0xD000    BEQ	L___Lib_TFT__TFT_Write_Char968
0x0C4C	0xE057    B	L___Lib_TFT__TFT_Write_Char167
L___Lib_TFT__TFT_Write_Char969:
L___Lib_TFT__TFT_Write_Char968:
;__Lib_TFT.c, 1180 :: 		
0x0C4E	0x495C    LDR	R1, [PC, #368]
; y start address is: 12 (R3)
0x0C50	0x880B    LDRH	R3, [R1, #0]
;__Lib_TFT.c, 1181 :: 		
; yCnt start address is: 8 (R2)
0x0C52	0x2200    MOVS	R2, #0
; pChBitMap end address is: 16 (R4)
; chWidth end address is: 0 (R0)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
; y end address is: 12 (R3)
; yCnt end address is: 8 (R2)
0x0C54	0x46A0    MOV	R8, R4
0x0C56	0xB2AC    UXTH	R4, R5
L___Lib_TFT__TFT_Write_Char168:
; yCnt start address is: 8 (R2)
; y start address is: 12 (R3)
; pChBitMap start address is: 32 (R8)
; chWidth start address is: 0 (R0)
; temp start address is: 24 (R6)
; x start address is: 16 (R4)
0x0C58	0x495A    LDR	R1, [PC, #360]
0x0C5A	0x8809    LDRH	R1, [R1, #0]
0x0C5C	0x428A    CMP	R2, R1
0x0C5E	0xD244    BCS	L___Lib_TFT__TFT_Write_Char169
; x end address is: 16 (R4)
;__Lib_TFT.c, 1182 :: 		
0x0C60	0x4959    LDR	R1, [PC, #356]
; x start address is: 20 (R5)
0x0C62	0x880D    LDRH	R5, [R1, #0]
;__Lib_TFT.c, 1183 :: 		
; mask start address is: 28 (R7)
0x0C64	0x2700    MOVS	R7, #0
;__Lib_TFT.c, 1184 :: 		
; xCnt start address is: 16 (R4)
0x0C66	0x2400    MOVS	R4, #0
; chWidth end address is: 0 (R0)
; pChBitMap end address is: 32 (R8)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
; mask end address is: 28 (R7)
; xCnt end address is: 16 (R4)
; y end address is: 12 (R3)
; yCnt end address is: 8 (R2)
L___Lib_TFT__TFT_Write_Char171:
; xCnt start address is: 16 (R4)
; mask start address is: 28 (R7)
; x start address is: 20 (R5)
; temp start address is: 24 (R6)
; chWidth start address is: 0 (R0)
; pChBitMap start address is: 32 (R8)
; y start address is: 12 (R3)
; yCnt start address is: 8 (R2)
0x0C68	0x4284    CMP	R4, R0
0x0C6A	0xD238    BCS	L___Lib_TFT__TFT_Write_Char172
;__Lib_TFT.c, 1185 :: 		
0x0C6C	0xB92F    CBNZ	R7, L___Lib_TFT__TFT_Write_Char970
; temp end address is: 24 (R6)
; mask end address is: 28 (R7)
;__Lib_TFT.c, 1186 :: 		
0x0C6E	0xF8986000  LDRB	R6, [R8, #0]
; temp start address is: 24 (R6)
0x0C72	0xF1080801  ADD	R8, R8, #1
;__Lib_TFT.c, 1187 :: 		
; mask start address is: 28 (R7)
0x0C76	0x2701    MOVS	R7, #1
; pChBitMap end address is: 32 (R8)
; temp end address is: 24 (R6)
; mask end address is: 28 (R7)
;__Lib_TFT.c, 1188 :: 		
0x0C78	0xE7FF    B	L___Lib_TFT__TFT_Write_Char174
L___Lib_TFT__TFT_Write_Char970:
;__Lib_TFT.c, 1185 :: 		
;__Lib_TFT.c, 1188 :: 		
L___Lib_TFT__TFT_Write_Char174:
;__Lib_TFT.c, 1190 :: 		
; mask start address is: 28 (R7)
; pChBitMap start address is: 32 (R8)
; temp start address is: 24 (R6)
0x0C7A	0xEA060107  AND	R1, R6, R7, LSL #0
0x0C7E	0xB2C9    UXTB	R1, R1
0x0C80	0xB331    CBZ	R1, L___Lib_TFT__TFT_Write_Char175
;__Lib_TFT.c, 1191 :: 		
0x0C82	0x4952    LDR	R1, [PC, #328]
0x0C84	0x8809    LDRH	R1, [R1, #0]
0x0C86	0xF88D6004  STRB	R6, [SP, #4]
0x0C8A	0xF8CD8008  STR	R8, [SP, #8]
0x0C8E	0xF88D700C  STRB	R7, [SP, #12]
0x0C92	0xF88D200D  STRB	R2, [SP, #13]
0x0C96	0xF8AD300E  STRH	R3, [SP, #14]
0x0C9A	0xF88D0010  STRB	R0, [SP, #16]
0x0C9E	0xF8AD5012  STRH	R5, [SP, #18]
0x0CA2	0xF88D4014  STRB	R4, [SP, #20]
0x0CA6	0xB28A    UXTH	R2, R1
0x0CA8	0xB219    SXTH	R1, R3
0x0CAA	0xB228    SXTH	R0, R5
0x0CAC	0xF7FFFEDA  BL	_TFT_Dot+0
0x0CB0	0xF89D4014  LDRB	R4, [SP, #20]
0x0CB4	0xF8BD5012  LDRH	R5, [SP, #18]
0x0CB8	0xF89D0010  LDRB	R0, [SP, #16]
0x0CBC	0xF8BD300E  LDRH	R3, [SP, #14]
0x0CC0	0xF89D200D  LDRB	R2, [SP, #13]
0x0CC4	0xF89D700C  LDRB	R7, [SP, #12]
0x0CC8	0xF8DD8008  LDR	R8, [SP, #8]
0x0CCC	0xF89D6004  LDRB	R6, [SP, #4]
;__Lib_TFT.c, 1192 :: 		
L___Lib_TFT__TFT_Write_Char175:
;__Lib_TFT.c, 1194 :: 		
0x0CD0	0x1C6D    ADDS	R5, R5, #1
0x0CD2	0xB2AD    UXTH	R5, R5
;__Lib_TFT.c, 1195 :: 		
0x0CD4	0x0079    LSLS	R1, R7, #1
0x0CD6	0xB2CF    UXTB	R7, R1
;__Lib_TFT.c, 1184 :: 		
0x0CD8	0x1C64    ADDS	R4, R4, #1
0x0CDA	0xB2E4    UXTB	R4, R4
;__Lib_TFT.c, 1196 :: 		
; mask end address is: 28 (R7)
; xCnt end address is: 16 (R4)
0x0CDC	0xE7C4    B	L___Lib_TFT__TFT_Write_Char171
L___Lib_TFT__TFT_Write_Char172:
;__Lib_TFT.c, 1197 :: 		
0x0CDE	0x1C5B    ADDS	R3, R3, #1
0x0CE0	0xB29B    UXTH	R3, R3
;__Lib_TFT.c, 1181 :: 		
0x0CE2	0x1C52    ADDS	R2, R2, #1
0x0CE4	0xB2D2    UXTB	R2, R2
;__Lib_TFT.c, 1198 :: 		
0x0CE6	0xB2AC    UXTH	R4, R5
; chWidth end address is: 0 (R0)
; pChBitMap end address is: 32 (R8)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
; yCnt end address is: 8 (R2)
0x0CE8	0xE7B6    B	L___Lib_TFT__TFT_Write_Char168
L___Lib_TFT__TFT_Write_Char169:
;__Lib_TFT.c, 1200 :: 		
; x start address is: 16 (R4)
0x0CEA	0x4934    LDR	R1, [PC, #208]
0x0CEC	0x7809    LDRB	R1, [R1, #0]
0x0CEE	0xB919    CBNZ	R1, L___Lib_TFT__TFT_Write_Char176
; y end address is: 12 (R3)
;__Lib_TFT.c, 1201 :: 		
0x0CF0	0x1C62    ADDS	R2, R4, #1
; x end address is: 16 (R4)
0x0CF2	0x4935    LDR	R1, [PC, #212]
0x0CF4	0x800A    STRH	R2, [R1, #0]
0x0CF6	0xE001    B	L___Lib_TFT__TFT_Write_Char177
L___Lib_TFT__TFT_Write_Char176:
;__Lib_TFT.c, 1203 :: 		
; y start address is: 12 (R3)
0x0CF8	0x4931    LDR	R1, [PC, #196]
0x0CFA	0x800B    STRH	R3, [R1, #0]
; y end address is: 12 (R3)
L___Lib_TFT__TFT_Write_Char177:
;__Lib_TFT.c, 1204 :: 		
0x0CFC	0xE050    B	L___Lib_TFT__TFT_Write_Char178
L___Lib_TFT__TFT_Write_Char167:
;__Lib_TFT.c, 1205 :: 		
; x start address is: 20 (R5)
; temp start address is: 24 (R6)
; chWidth start address is: 0 (R0)
; pChBitMap start address is: 16 (R4)
0x0CFE	0x4932    LDR	R1, [PC, #200]
; y start address is: 12 (R3)
0x0D00	0x880B    LDRH	R3, [R1, #0]
;__Lib_TFT.c, 1206 :: 		
; yCnt start address is: 8 (R2)
0x0D02	0x2200    MOVS	R2, #0
; pChBitMap end address is: 16 (R4)
; chWidth end address is: 0 (R0)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
; y end address is: 12 (R3)
; yCnt end address is: 8 (R2)
L___Lib_TFT__TFT_Write_Char179:
; yCnt start address is: 8 (R2)
; y start address is: 12 (R3)
; pChBitMap start address is: 16 (R4)
; chWidth start address is: 0 (R0)
; temp start address is: 24 (R6)
; x start address is: 20 (R5)
0x0D04	0x492F    LDR	R1, [PC, #188]
0x0D06	0x8809    LDRH	R1, [R1, #0]
0x0D08	0x428A    CMP	R2, R1
0x0D0A	0xD246    BCS	L___Lib_TFT__TFT_Write_Char180
; x end address is: 20 (R5)
;__Lib_TFT.c, 1207 :: 		
0x0D0C	0x492C    LDR	R1, [PC, #176]
; x start address is: 20 (R5)
0x0D0E	0x880D    LDRH	R5, [R1, #0]
;__Lib_TFT.c, 1208 :: 		
; mask start address is: 28 (R7)
0x0D10	0x2700    MOVS	R7, #0
;__Lib_TFT.c, 1209 :: 		
; xCnt start address is: 4 (R1)
0x0D12	0x2100    MOVS	R1, #0
; pChBitMap end address is: 16 (R4)
; xCnt end address is: 4 (R1)
; chWidth end address is: 0 (R0)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
; mask end address is: 28 (R7)
; y end address is: 12 (R3)
; yCnt end address is: 8 (R2)
0x0D14	0x46A0    MOV	R8, R4
0x0D16	0xB2CC    UXTB	R4, R1
L___Lib_TFT__TFT_Write_Char182:
; xCnt start address is: 16 (R4)
; mask start address is: 28 (R7)
; x start address is: 20 (R5)
; temp start address is: 24 (R6)
; chWidth start address is: 0 (R0)
; pChBitMap start address is: 32 (R8)
; y start address is: 12 (R3)
; yCnt start address is: 8 (R2)
0x0D18	0x4284    CMP	R4, R0
0x0D1A	0xD238    BCS	L___Lib_TFT__TFT_Write_Char183
;__Lib_TFT.c, 1210 :: 		
0x0D1C	0xB92F    CBNZ	R7, L___Lib_TFT__TFT_Write_Char971
; temp end address is: 24 (R6)
; mask end address is: 28 (R7)
;__Lib_TFT.c, 1211 :: 		
0x0D1E	0xF8986000  LDRB	R6, [R8, #0]
; temp start address is: 24 (R6)
0x0D22	0xF1080801  ADD	R8, R8, #1
;__Lib_TFT.c, 1212 :: 		
; mask start address is: 28 (R7)
0x0D26	0x2701    MOVS	R7, #1
; pChBitMap end address is: 32 (R8)
; temp end address is: 24 (R6)
; mask end address is: 28 (R7)
;__Lib_TFT.c, 1213 :: 		
0x0D28	0xE7FF    B	L___Lib_TFT__TFT_Write_Char185
L___Lib_TFT__TFT_Write_Char971:
;__Lib_TFT.c, 1210 :: 		
;__Lib_TFT.c, 1213 :: 		
L___Lib_TFT__TFT_Write_Char185:
;__Lib_TFT.c, 1215 :: 		
; mask start address is: 28 (R7)
; pChBitMap start address is: 32 (R8)
; temp start address is: 24 (R6)
0x0D2A	0xEA060107  AND	R1, R6, R7, LSL #0
0x0D2E	0xB2C9    UXTB	R1, R1
0x0D30	0xB331    CBZ	R1, L___Lib_TFT__TFT_Write_Char186
;__Lib_TFT.c, 1216 :: 		
0x0D32	0x4926    LDR	R1, [PC, #152]
0x0D34	0x8809    LDRH	R1, [R1, #0]
0x0D36	0xF88D6004  STRB	R6, [SP, #4]
0x0D3A	0xF8CD8008  STR	R8, [SP, #8]
0x0D3E	0xF88D700C  STRB	R7, [SP, #12]
0x0D42	0xF88D200D  STRB	R2, [SP, #13]
0x0D46	0xF8AD300E  STRH	R3, [SP, #14]
0x0D4A	0xF88D0010  STRB	R0, [SP, #16]
0x0D4E	0xF8AD5012  STRH	R5, [SP, #18]
0x0D52	0xF88D4014  STRB	R4, [SP, #20]
0x0D56	0xB28A    UXTH	R2, R1
0x0D58	0xB229    SXTH	R1, R5
0x0D5A	0xB218    SXTH	R0, R3
0x0D5C	0xF7FFFE82  BL	_TFT_Dot+0
0x0D60	0xF89D4014  LDRB	R4, [SP, #20]
0x0D64	0xF8BD5012  LDRH	R5, [SP, #18]
0x0D68	0xF89D0010  LDRB	R0, [SP, #16]
0x0D6C	0xF8BD300E  LDRH	R3, [SP, #14]
0x0D70	0xF89D200D  LDRB	R2, [SP, #13]
0x0D74	0xF89D700C  LDRB	R7, [SP, #12]
0x0D78	0xF8DD8008  LDR	R8, [SP, #8]
0x0D7C	0xF89D6004  LDRB	R6, [SP, #4]
;__Lib_TFT.c, 1217 :: 		
L___Lib_TFT__TFT_Write_Char186:
;__Lib_TFT.c, 1219 :: 		
0x0D80	0x1E6D    SUBS	R5, R5, #1
0x0D82	0xB2AD    UXTH	R5, R5
;__Lib_TFT.c, 1220 :: 		
0x0D84	0x0079    LSLS	R1, R7, #1
0x0D86	0xB2CF    UXTB	R7, R1
;__Lib_TFT.c, 1209 :: 		
0x0D88	0x1C64    ADDS	R4, R4, #1
0x0D8A	0xB2E4    UXTB	R4, R4
;__Lib_TFT.c, 1221 :: 		
; mask end address is: 28 (R7)
; xCnt end address is: 16 (R4)
0x0D8C	0xE7C4    B	L___Lib_TFT__TFT_Write_Char182
L___Lib_TFT__TFT_Write_Char183:
;__Lib_TFT.c, 1223 :: 		
0x0D8E	0x1C5B    ADDS	R3, R3, #1
0x0D90	0xB29B    UXTH	R3, R3
;__Lib_TFT.c, 1206 :: 		
0x0D92	0x1C52    ADDS	R2, R2, #1
0x0D94	0xB2D2    UXTB	R2, R2
;__Lib_TFT.c, 1224 :: 		
; chWidth end address is: 0 (R0)
; pChBitMap end address is: 32 (R8)
; temp end address is: 24 (R6)
; y end address is: 12 (R3)
; yCnt end address is: 8 (R2)
0x0D96	0x4644    MOV	R4, R8
0x0D98	0xE7B4    B	L___Lib_TFT__TFT_Write_Char179
L___Lib_TFT__TFT_Write_Char180:
;__Lib_TFT.c, 1227 :: 		
0x0D9A	0x1E6A    SUBS	R2, R5, #1
; x end address is: 20 (R5)
0x0D9C	0x4908    LDR	R1, [PC, #32]
0x0D9E	0x800A    STRH	R2, [R1, #0]
;__Lib_TFT.c, 1228 :: 		
L___Lib_TFT__TFT_Write_Char178:
;__Lib_TFT.c, 1229 :: 		
L_end__TFT_Write_Char:
0x0DA0	0xF8DDE000  LDR	LR, [SP, #0]
0x0DA4	0xB006    ADD	SP, SP, #24
0x0DA6	0x4770    BX	LR
0x0DA8	0x00032000  	__Lib_TFT_FontInitialized+0
0x0DAC	0x3BA40000  	_TFT_defaultFont+0
0x0DB0	0x00A02000  	__Lib_TFT__fontFirstChar+0
0x0DB4	0x00A22000  	__Lib_TFT__fontLastChar+0
0x0DB8	0x009C2000  	__Lib_TFT__font+0
0x0DBC	0x00A82000  	__Lib_TFT_FontOrientation+0
0x0DC0	0x00AA2000  	__Lib_TFT_y_cord+0
0x0DC4	0x00A42000  	__Lib_TFT__fontHeight+0
0x0DC8	0x00AC2000  	__Lib_TFT_x_cord+0
0x0DCC	0x00A62000  	__Lib_TFT_FontColor+0
; end of __Lib_TFT__TFT_Write_Char
_TFT_Set_Font:
;__Lib_TFT.c, 169 :: 		
; font_orientation start address is: 8 (R2)
; font_color start address is: 4 (R1)
; activeFont start address is: 0 (R0)
0x052C	0xB081    SUB	SP, SP, #4
; font_orientation end address is: 8 (R2)
; font_color end address is: 4 (R1)
; activeFont end address is: 0 (R0)
; activeFont start address is: 0 (R0)
; font_color start address is: 4 (R1)
; font_orientation start address is: 8 (R2)
;__Lib_TFT.c, 170 :: 		
0x052E	0x4B12    LDR	R3, [PC, #72]
0x0530	0x6018    STR	R0, [R3, #0]
;__Lib_TFT.c, 171 :: 		
0x0532	0x1C83    ADDS	R3, R0, #2
0x0534	0x781C    LDRB	R4, [R3, #0]
0x0536	0x1CC3    ADDS	R3, R0, #3
0x0538	0x781B    LDRB	R3, [R3, #0]
0x053A	0x021B    LSLS	R3, R3, #8
0x053C	0xB29B    UXTH	R3, R3
0x053E	0x18E4    ADDS	R4, R4, R3
0x0540	0x4B0E    LDR	R3, [PC, #56]
0x0542	0x801C    STRH	R4, [R3, #0]
;__Lib_TFT.c, 172 :: 		
0x0544	0x1D03    ADDS	R3, R0, #4
0x0546	0x781C    LDRB	R4, [R3, #0]
0x0548	0x1D43    ADDS	R3, R0, #5
0x054A	0x781B    LDRB	R3, [R3, #0]
0x054C	0x021B    LSLS	R3, R3, #8
0x054E	0xB29B    UXTH	R3, R3
0x0550	0x18E4    ADDS	R4, R4, R3
0x0552	0x4B0B    LDR	R3, [PC, #44]
0x0554	0x801C    STRH	R4, [R3, #0]
;__Lib_TFT.c, 173 :: 		
0x0556	0x1D83    ADDS	R3, R0, #6
; activeFont end address is: 0 (R0)
0x0558	0x781C    LDRB	R4, [R3, #0]
0x055A	0x4B0A    LDR	R3, [PC, #40]
0x055C	0x801C    STRH	R4, [R3, #0]
;__Lib_TFT.c, 175 :: 		
0x055E	0x4B0A    LDR	R3, [PC, #40]
0x0560	0x8019    STRH	R1, [R3, #0]
; font_color end address is: 4 (R1)
;__Lib_TFT.c, 176 :: 		
0x0562	0x4B0A    LDR	R3, [PC, #40]
0x0564	0x701A    STRB	R2, [R3, #0]
; font_orientation end address is: 8 (R2)
;__Lib_TFT.c, 177 :: 		
0x0566	0x2401    MOVS	R4, #1
0x0568	0x4B09    LDR	R3, [PC, #36]
0x056A	0x701C    STRB	R4, [R3, #0]
;__Lib_TFT.c, 178 :: 		
0x056C	0x2400    MOVS	R4, #0
0x056E	0x4B09    LDR	R3, [PC, #36]
0x0570	0x701C    STRB	R4, [R3, #0]
;__Lib_TFT.c, 179 :: 		
L_end_TFT_Set_Font:
0x0572	0xB001    ADD	SP, SP, #4
0x0574	0x4770    BX	LR
0x0576	0xBF00    NOP
0x0578	0x009C2000  	__Lib_TFT__font+0
0x057C	0x00A02000  	__Lib_TFT__fontFirstChar+0
0x0580	0x00A22000  	__Lib_TFT__fontLastChar+0
0x0584	0x00A42000  	__Lib_TFT__fontHeight+0
0x0588	0x00A62000  	__Lib_TFT_FontColor+0
0x058C	0x00A82000  	__Lib_TFT_FontOrientation+0
0x0590	0x00032000  	__Lib_TFT_FontInitialized+0
0x0594	0x00A92000  	_ExternalFontSet+0
; end of _TFT_Set_Font
_ADC_Set_Input_Channel:
;__Lib_ADC_12_32F10x_16ch.c, 41 :: 		
; input_mask start address is: 0 (R0)
0x3748	0xB081    SUB	SP, SP, #4
0x374A	0xF8CDE000  STR	LR, [SP, #0]
0x374E	0xFA1FF980  UXTH	R9, R0
; input_mask end address is: 0 (R0)
; input_mask start address is: 36 (R9)
;__Lib_ADC_12_32F10x_16ch.c, 42 :: 		
0x3752	0xF3C90100  UBFX	R1, R9, #0, #1
0x3756	0xB121    CBZ	R1, L_ADC_Set_Input_Channel0
;__Lib_ADC_12_32F10x_16ch.c, 43 :: 		
0x3758	0xF2400101  MOVW	R1, #1
0x375C	0x483F    LDR	R0, [PC, #252]
0x375E	0xF7FFF94D  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel0:
;__Lib_ADC_12_32F10x_16ch.c, 44 :: 		
0x3762	0xF3C90140  UBFX	R1, R9, #1, #1
0x3766	0xB121    CBZ	R1, L_ADC_Set_Input_Channel1
;__Lib_ADC_12_32F10x_16ch.c, 45 :: 		
0x3768	0xF2400102  MOVW	R1, #2
0x376C	0x483B    LDR	R0, [PC, #236]
0x376E	0xF7FFF945  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel1:
;__Lib_ADC_12_32F10x_16ch.c, 46 :: 		
0x3772	0xF3C90180  UBFX	R1, R9, #2, #1
0x3776	0xB121    CBZ	R1, L_ADC_Set_Input_Channel2
;__Lib_ADC_12_32F10x_16ch.c, 47 :: 		
0x3778	0xF2400104  MOVW	R1, #4
0x377C	0x4837    LDR	R0, [PC, #220]
0x377E	0xF7FFF93D  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel2:
;__Lib_ADC_12_32F10x_16ch.c, 48 :: 		
0x3782	0xF3C901C0  UBFX	R1, R9, #3, #1
0x3786	0xB121    CBZ	R1, L_ADC_Set_Input_Channel3
;__Lib_ADC_12_32F10x_16ch.c, 49 :: 		
0x3788	0xF2400108  MOVW	R1, #8
0x378C	0x4833    LDR	R0, [PC, #204]
0x378E	0xF7FFF935  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel3:
;__Lib_ADC_12_32F10x_16ch.c, 50 :: 		
0x3792	0xF3C91100  UBFX	R1, R9, #4, #1
0x3796	0xB121    CBZ	R1, L_ADC_Set_Input_Channel4
;__Lib_ADC_12_32F10x_16ch.c, 51 :: 		
0x3798	0xF2400110  MOVW	R1, #16
0x379C	0x482F    LDR	R0, [PC, #188]
0x379E	0xF7FFF92D  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel4:
;__Lib_ADC_12_32F10x_16ch.c, 52 :: 		
0x37A2	0xF3C91140  UBFX	R1, R9, #5, #1
0x37A6	0xB121    CBZ	R1, L_ADC_Set_Input_Channel5
;__Lib_ADC_12_32F10x_16ch.c, 53 :: 		
0x37A8	0xF2400120  MOVW	R1, #32
0x37AC	0x482B    LDR	R0, [PC, #172]
0x37AE	0xF7FFF925  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel5:
;__Lib_ADC_12_32F10x_16ch.c, 54 :: 		
0x37B2	0xF3C91180  UBFX	R1, R9, #6, #1
0x37B6	0xB121    CBZ	R1, L_ADC_Set_Input_Channel6
;__Lib_ADC_12_32F10x_16ch.c, 55 :: 		
0x37B8	0xF2400140  MOVW	R1, #64
0x37BC	0x4827    LDR	R0, [PC, #156]
0x37BE	0xF7FFF91D  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel6:
;__Lib_ADC_12_32F10x_16ch.c, 56 :: 		
0x37C2	0xF3C911C0  UBFX	R1, R9, #7, #1
0x37C6	0xB121    CBZ	R1, L_ADC_Set_Input_Channel7
;__Lib_ADC_12_32F10x_16ch.c, 57 :: 		
0x37C8	0xF2400180  MOVW	R1, #128
0x37CC	0x4823    LDR	R0, [PC, #140]
0x37CE	0xF7FFF915  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel7:
;__Lib_ADC_12_32F10x_16ch.c, 58 :: 		
0x37D2	0xF3C92100  UBFX	R1, R9, #8, #1
0x37D6	0xB121    CBZ	R1, L_ADC_Set_Input_Channel8
;__Lib_ADC_12_32F10x_16ch.c, 59 :: 		
0x37D8	0xF2400101  MOVW	R1, #1
0x37DC	0x4820    LDR	R0, [PC, #128]
0x37DE	0xF7FFF90D  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel8:
;__Lib_ADC_12_32F10x_16ch.c, 60 :: 		
0x37E2	0xF3C92140  UBFX	R1, R9, #9, #1
0x37E6	0xB121    CBZ	R1, L_ADC_Set_Input_Channel9
;__Lib_ADC_12_32F10x_16ch.c, 61 :: 		
0x37E8	0xF2400102  MOVW	R1, #2
0x37EC	0x481C    LDR	R0, [PC, #112]
0x37EE	0xF7FFF905  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel9:
;__Lib_ADC_12_32F10x_16ch.c, 62 :: 		
0x37F2	0xF3C92180  UBFX	R1, R9, #10, #1
0x37F6	0xB121    CBZ	R1, L_ADC_Set_Input_Channel10
;__Lib_ADC_12_32F10x_16ch.c, 63 :: 		
0x37F8	0xF2400101  MOVW	R1, #1
0x37FC	0x4819    LDR	R0, [PC, #100]
0x37FE	0xF7FFF8FD  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel10:
;__Lib_ADC_12_32F10x_16ch.c, 64 :: 		
0x3802	0xF3C921C0  UBFX	R1, R9, #11, #1
0x3806	0xB121    CBZ	R1, L_ADC_Set_Input_Channel11
;__Lib_ADC_12_32F10x_16ch.c, 65 :: 		
0x3808	0xF2400102  MOVW	R1, #2
0x380C	0x4815    LDR	R0, [PC, #84]
0x380E	0xF7FFF8F5  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel11:
;__Lib_ADC_12_32F10x_16ch.c, 66 :: 		
0x3812	0xF3C93100  UBFX	R1, R9, #12, #1
0x3816	0xB121    CBZ	R1, L_ADC_Set_Input_Channel12
;__Lib_ADC_12_32F10x_16ch.c, 67 :: 		
0x3818	0xF2400104  MOVW	R1, #4
0x381C	0x4811    LDR	R0, [PC, #68]
0x381E	0xF7FFF8ED  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel12:
;__Lib_ADC_12_32F10x_16ch.c, 68 :: 		
0x3822	0xF3C93140  UBFX	R1, R9, #13, #1
0x3826	0xB121    CBZ	R1, L_ADC_Set_Input_Channel13
;__Lib_ADC_12_32F10x_16ch.c, 69 :: 		
0x3828	0xF2400108  MOVW	R1, #8
0x382C	0x480D    LDR	R0, [PC, #52]
0x382E	0xF7FFF8E5  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel13:
;__Lib_ADC_12_32F10x_16ch.c, 70 :: 		
0x3832	0xF3C93180  UBFX	R1, R9, #14, #1
0x3836	0xB121    CBZ	R1, L_ADC_Set_Input_Channel14
;__Lib_ADC_12_32F10x_16ch.c, 71 :: 		
0x3838	0xF2400110  MOVW	R1, #16
0x383C	0x4809    LDR	R0, [PC, #36]
0x383E	0xF7FFF8DD  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel14:
;__Lib_ADC_12_32F10x_16ch.c, 72 :: 		
0x3842	0xF3C931C0  UBFX	R1, R9, #15, #1
; input_mask end address is: 36 (R9)
0x3846	0xB121    CBZ	R1, L_ADC_Set_Input_Channel15
;__Lib_ADC_12_32F10x_16ch.c, 73 :: 		
0x3848	0xF2400120  MOVW	R1, #32
0x384C	0x4805    LDR	R0, [PC, #20]
0x384E	0xF7FFF8D5  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel15:
;__Lib_ADC_12_32F10x_16ch.c, 74 :: 		
L_end_ADC_Set_Input_Channel:
0x3852	0xF8DDE000  LDR	LR, [SP, #0]
0x3856	0xB001    ADD	SP, SP, #4
0x3858	0x4770    BX	LR
0x385A	0xBF00    NOP
0x385C	0x08004001  	GPIOA_BASE+0
0x3860	0x0C004001  	GPIOB_BASE+0
0x3864	0x10004001  	GPIOC_BASE+0
; end of _ADC_Set_Input_Channel
_GPIO_Analog_Input:
;__Lib_GPIO_32F10x.c, 373 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x29FC	0xB081    SUB	SP, SP, #4
0x29FE	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 374 :: 		
0x2A02	0xF04F0201  MOV	R2, #1
0x2A06	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x2A08	0xF7FFFC2C  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 375 :: 		
L_end_GPIO_Analog_Input:
0x2A0C	0xF8DDE000  LDR	LR, [SP, #0]
0x2A10	0xB001    ADD	SP, SP, #4
0x2A12	0x4770    BX	LR
; end of _GPIO_Analog_Input
_ADC1_Init:
;__Lib_ADC_12_32F10x_16ch.c, 146 :: 		
0x3944	0xB081    SUB	SP, SP, #4
0x3946	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_ADC_12_32F10x_16ch.c, 147 :: 		
0x394A	0x4907    LDR	R1, [PC, #28]
0x394C	0x4807    LDR	R0, [PC, #28]
0x394E	0x6001    STR	R1, [R0, #0]
;__Lib_ADC_12_32F10x_16ch.c, 149 :: 		
0x3950	0x2101    MOVS	R1, #1
0x3952	0xB249    SXTB	R1, R1
0x3954	0x4806    LDR	R0, [PC, #24]
0x3956	0x6001    STR	R1, [R0, #0]
;__Lib_ADC_12_32F10x_16ch.c, 151 :: 		
0x3958	0x4806    LDR	R0, [PC, #24]
0x395A	0xF7FFF9DD  BL	__Lib_ADC_12_32F10x_16ch_ADCx_Init+0
;__Lib_ADC_12_32F10x_16ch.c, 184 :: 		
L_end_ADC1_Init:
0x395E	0xF8DDE000  LDR	LR, [SP, #0]
0x3962	0xB001    ADD	SP, SP, #4
0x3964	0x4770    BX	LR
0x3966	0xBF00    NOP
0x3968	0x15D10000  	_ADC1_Get_Sample+0
0x396C	0x008C2000  	_ADC_Get_Sample_Ptr+0
0x3970	0x03244242  	RCC_APB2ENRbits+0
0x3974	0x24004001  	ADC1_SR+0
; end of _ADC1_Init
__Lib_ADC_12_32F10x_16ch_ADCx_Init:
;__Lib_ADC_12_32F10x_16ch.c, 76 :: 		
; base start address is: 0 (R0)
0x2D18	0xB081    SUB	SP, SP, #4
; base end address is: 0 (R0)
; base start address is: 0 (R0)
;__Lib_ADC_12_32F10x_16ch.c, 80 :: 		
0x2D1A	0x1D03    ADDS	R3, R0, #4
0x2D1C	0x681A    LDR	R2, [R3, #0]
0x2D1E	0x4946    LDR	R1, [PC, #280]
0x2D20	0xEA020101  AND	R1, R2, R1, LSL #0
0x2D24	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 82 :: 		
0x2D26	0xF2000308  ADDW	R3, R0, #8
0x2D2A	0x681A    LDR	R2, [R3, #0]
0x2D2C	0x4943    LDR	R1, [PC, #268]
0x2D2E	0xEA020101  AND	R1, R2, R1, LSL #0
0x2D32	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 84 :: 		
0x2D34	0x1D03    ADDS	R3, R0, #4
0x2D36	0x2200    MOVS	R2, #0
0x2D38	0x6819    LDR	R1, [R3, #0]
0x2D3A	0xF3624110  BFI	R1, R2, #16, #1
0x2D3E	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 85 :: 		
0x2D40	0x1D03    ADDS	R3, R0, #4
0x2D42	0x2200    MOVS	R2, #0
0x2D44	0x6819    LDR	R1, [R3, #0]
0x2D46	0xF3624151  BFI	R1, R2, #17, #1
0x2D4A	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 86 :: 		
0x2D4C	0x1D03    ADDS	R3, R0, #4
0x2D4E	0x2200    MOVS	R2, #0
0x2D50	0x6819    LDR	R1, [R3, #0]
0x2D52	0xF3624192  BFI	R1, R2, #18, #1
0x2D56	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 87 :: 		
0x2D58	0x1D03    ADDS	R3, R0, #4
0x2D5A	0x2200    MOVS	R2, #0
0x2D5C	0x6819    LDR	R1, [R3, #0]
0x2D5E	0xF36241D3  BFI	R1, R2, #19, #1
0x2D62	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 89 :: 		
0x2D64	0x1D03    ADDS	R3, R0, #4
0x2D66	0x2200    MOVS	R2, #0
0x2D68	0x6819    LDR	R1, [R3, #0]
0x2D6A	0xF3622108  BFI	R1, R2, #8, #1
0x2D6E	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 92 :: 		
0x2D70	0xF2000308  ADDW	R3, R0, #8
0x2D74	0x2200    MOVS	R2, #0
0x2D76	0x6819    LDR	R1, [R3, #0]
0x2D78	0xF3620141  BFI	R1, R2, #1, #1
0x2D7C	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 94 :: 		
0x2D7E	0xF2000308  ADDW	R3, R0, #8
0x2D82	0x2200    MOVS	R2, #0
0x2D84	0x6819    LDR	R1, [R3, #0]
0x2D86	0xF36221CB  BFI	R1, R2, #11, #1
0x2D8A	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 96 :: 		
0x2D8C	0xF2000308  ADDW	R3, R0, #8
0x2D90	0x2201    MOVS	R2, #1
0x2D92	0x6819    LDR	R1, [R3, #0]
0x2D94	0xF3624151  BFI	R1, R2, #17, #1
0x2D98	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 97 :: 		
0x2D9A	0xF2000308  ADDW	R3, R0, #8
0x2D9E	0x2201    MOVS	R2, #1
0x2DA0	0x6819    LDR	R1, [R3, #0]
0x2DA2	0xF3624192  BFI	R1, R2, #18, #1
0x2DA6	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 98 :: 		
0x2DA8	0xF2000308  ADDW	R3, R0, #8
0x2DAC	0x2201    MOVS	R2, #1
0x2DAE	0x6819    LDR	R1, [R3, #0]
0x2DB0	0xF36241D3  BFI	R1, R2, #19, #1
0x2DB4	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 101 :: 		
0x2DB6	0xF200032C  ADDW	R3, R0, #44
0x2DBA	0x2200    MOVS	R2, #0
0x2DBC	0x6819    LDR	R1, [R3, #0]
0x2DBE	0xF3625114  BFI	R1, R2, #20, #1
0x2DC2	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 102 :: 		
0x2DC4	0xF200032C  ADDW	R3, R0, #44
0x2DC8	0x2200    MOVS	R2, #0
0x2DCA	0x6819    LDR	R1, [R3, #0]
0x2DCC	0xF3625155  BFI	R1, R2, #21, #1
0x2DD0	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 103 :: 		
0x2DD2	0xF200032C  ADDW	R3, R0, #44
0x2DD6	0x2200    MOVS	R2, #0
0x2DD8	0x6819    LDR	R1, [R3, #0]
0x2DDA	0xF3625196  BFI	R1, R2, #22, #1
0x2DDE	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 104 :: 		
0x2DE0	0xF200032C  ADDW	R3, R0, #44
0x2DE4	0x2200    MOVS	R2, #0
0x2DE6	0x6819    LDR	R1, [R3, #0]
0x2DE8	0xF36251D7  BFI	R1, R2, #23, #1
0x2DEC	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 110 :: 		
0x2DEE	0xF2000308  ADDW	R3, R0, #8
0x2DF2	0x2201    MOVS	R2, #1
0x2DF4	0x6819    LDR	R1, [R3, #0]
0x2DF6	0xF3620100  BFI	R1, R2, #0, #1
0x2DFA	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 113 :: 		
0x2DFC	0xF2000308  ADDW	R3, R0, #8
0x2E00	0x2201    MOVS	R2, #1
0x2E02	0x6819    LDR	R1, [R3, #0]
0x2E04	0xF36201C3  BFI	R1, R2, #3, #1
0x2E08	0x6019    STR	R1, [R3, #0]
; base end address is: 0 (R0)
;__Lib_ADC_12_32F10x_16ch.c, 114 :: 		
L___Lib_ADC_12_32F10x_16ch_ADCx_Init16:
; base start address is: 0 (R0)
0x2E0A	0xF2000108  ADDW	R1, R0, #8
0x2E0E	0x680A    LDR	R2, [R1, #0]
0x2E10	0xF3C201C0  UBFX	R1, R2, #3, #1
0x2E14	0xB101    CBZ	R1, L___Lib_ADC_12_32F10x_16ch_ADCx_Init17
0x2E16	0xE7F8    B	L___Lib_ADC_12_32F10x_16ch_ADCx_Init16
L___Lib_ADC_12_32F10x_16ch_ADCx_Init17:
;__Lib_ADC_12_32F10x_16ch.c, 117 :: 		
0x2E18	0xF2000308  ADDW	R3, R0, #8
0x2E1C	0x2201    MOVS	R2, #1
0x2E1E	0x6819    LDR	R1, [R3, #0]
0x2E20	0xF3620182  BFI	R1, R2, #2, #1
0x2E24	0x6019    STR	R1, [R3, #0]
; base end address is: 0 (R0)
;__Lib_ADC_12_32F10x_16ch.c, 118 :: 		
L___Lib_ADC_12_32F10x_16ch_ADCx_Init18:
; base start address is: 0 (R0)
0x2E26	0xF2000108  ADDW	R1, R0, #8
0x2E2A	0x680A    LDR	R2, [R1, #0]
0x2E2C	0xF3C20180  UBFX	R1, R2, #2, #1
0x2E30	0xB101    CBZ	R1, L___Lib_ADC_12_32F10x_16ch_ADCx_Init19
; base end address is: 0 (R0)
0x2E32	0xE7F8    B	L___Lib_ADC_12_32F10x_16ch_ADCx_Init18
L___Lib_ADC_12_32F10x_16ch_ADCx_Init19:
;__Lib_ADC_12_32F10x_16ch.c, 120 :: 		
L_end_ADCx_Init:
0x2E34	0xB001    ADD	SP, SP, #4
0x2E36	0x4770    BX	LR
0x2E38	0xFEFFFFF0  	#-983297
0x2E3C	0xF7FDFFF1  	#-919555
; end of __Lib_ADC_12_32F10x_16ch_ADCx_Init
_listen_for_id:
;Transmitter.c, 115 :: 		void listen_for_id() {
0x3978	0xB081    SUB	SP, SP, #4
0x397A	0xF8CDE000  STR	LR, [SP, #0]
;Transmitter.c, 117 :: 		if (Debounce_INT() == 0 && DATA_RX[0] == 64 && sendByteThree == 0) {
0x397E	0xF7FFFA5F  BL	_Debounce_INT+0
0x3982	0xB9A0    CBNZ	R0, L__listen_for_id40
0x3984	0x480C    LDR	R0, [PC, #48]
0x3986	0xF9900000  LDRSB	R0, [R0, #0]
0x398A	0x2840    CMP	R0, #64
0x398C	0xD10F    BNE	L__listen_for_id39
0x398E	0x480B    LDR	R0, [PC, #44]
0x3990	0x7800    LDRB	R0, [R0, #0]
0x3992	0xB960    CBNZ	R0, L__listen_for_id38
L__listen_for_id37:
;Transmitter.c, 118 :: 		temp1 = read_ZIGBEE_short(INTSTAT); // Read and flush register INTSTAT
0x3994	0x2031    MOVS	R0, #49
0x3996	0xB240    SXTB	R0, R0
0x3998	0xF7FDFA94  BL	_read_ZIGBEE_short+0
0x399C	0x4908    LDR	R1, [PC, #32]
0x399E	0x7008    STRB	R0, [R1, #0]
;Transmitter.c, 119 :: 		read_RX_FIFO();                     // Read receive data
0x39A0	0xF7FFF94A  BL	_read_RX_FIFO+0
;Transmitter.c, 120 :: 		sendByteThree = DATA_RX[2];
0x39A4	0x4807    LDR	R0, [PC, #28]
0x39A6	0xF9901000  LDRSB	R1, [R0, #0]
0x39AA	0x4804    LDR	R0, [PC, #16]
0x39AC	0x7001    STRB	R1, [R0, #0]
;Transmitter.c, 117 :: 		if (Debounce_INT() == 0 && DATA_RX[0] == 64 && sendByteThree == 0) {
L__listen_for_id40:
L__listen_for_id39:
L__listen_for_id38:
;Transmitter.c, 122 :: 		}
L_end_listen_for_id:
0x39AE	0xF8DDE000  LDR	LR, [SP, #0]
0x39B2	0xB001    ADD	SP, SP, #4
0x39B4	0x4770    BX	LR
0x39B6	0xBF00    NOP
0x39B8	0x00702000  	_DATA_RX+0
0x39BC	0x00022000  	_sendByteThree+0
0x39C0	0x00852000  	_temp1+0
0x39C4	0x00722000  	_DATA_RX+2
; end of _listen_for_id
_Debounce_INT:
;Misc_Routines.c, 427 :: 		char Debounce_INT() {
0x2E40	0xB081    SUB	SP, SP, #4
;Misc_Routines.c, 428 :: 		char i = 0, j = 0, intn_d = 0;
; j start address is: 8 (R2)
0x2E42	0x2200    MOVS	R2, #0
;Misc_Routines.c, 429 :: 		for(i = 0; i < 5; i++) {
; i start address is: 4 (R1)
0x2E44	0x2100    MOVS	R1, #0
; j end address is: 8 (R2)
; i end address is: 4 (R1)
L_Debounce_INT49:
; i start address is: 4 (R1)
; j start address is: 8 (R2)
0x2E46	0x2905    CMP	R1, #5
0x2E48	0xD209    BCS	L_Debounce_INT50
;Misc_Routines.c, 430 :: 		intn_d = INT;
0x2E4A	0x4808    LDR	R0, [PC, #32]
; intn_d start address is: 0 (R0)
0x2E4C	0x6800    LDR	R0, [R0, #0]
;Misc_Routines.c, 431 :: 		if (intn_d == 1)
0x2E4E	0x2801    CMP	R0, #1
0x2E50	0xD102    BNE	L__Debounce_INT61
; intn_d end address is: 0 (R0)
;Misc_Routines.c, 432 :: 		j++;
0x2E52	0x1C52    ADDS	R2, R2, #1
0x2E54	0xB2D2    UXTB	R2, R2
; j end address is: 8 (R2)
0x2E56	0xE7FF    B	L_Debounce_INT52
L__Debounce_INT61:
;Misc_Routines.c, 431 :: 		if (intn_d == 1)
;Misc_Routines.c, 432 :: 		j++;
L_Debounce_INT52:
;Misc_Routines.c, 429 :: 		for(i = 0; i < 5; i++) {
; j start address is: 8 (R2)
0x2E58	0x1C49    ADDS	R1, R1, #1
0x2E5A	0xB2C9    UXTB	R1, R1
;Misc_Routines.c, 433 :: 		}
; i end address is: 4 (R1)
0x2E5C	0xE7F3    B	L_Debounce_INT49
L_Debounce_INT50:
;Misc_Routines.c, 434 :: 		if (j > 2)
0x2E5E	0x2A02    CMP	R2, #2
0x2E60	0xD901    BLS	L_Debounce_INT53
; j end address is: 8 (R2)
;Misc_Routines.c, 435 :: 		return 1;
0x2E62	0x2001    MOVS	R0, #1
0x2E64	0xE000    B	L_end_Debounce_INT
L_Debounce_INT53:
;Misc_Routines.c, 437 :: 		return 0;
0x2E66	0x2000    MOVS	R0, #0
;Misc_Routines.c, 438 :: 		}
L_end_Debounce_INT:
0x2E68	0xB001    ADD	SP, SP, #4
0x2E6A	0x4770    BX	LR
0x2E6C	0x81A84222  	INT+0
; end of _Debounce_INT
_read_RX_FIFO:
;ReadWrite_Routines.c, 97 :: 		void read_RX_FIFO() {
0x2C38	0xB082    SUB	SP, SP, #8
0x2C3A	0xF8CDE000  STR	LR, [SP, #0]
;ReadWrite_Routines.c, 98 :: 		unsigned short int temp = 0;
;ReadWrite_Routines.c, 99 :: 		int i = 0;
;ReadWrite_Routines.c, 101 :: 		temp = read_ZIGBEE_short(BBREG1);      // disable receiving packets off air.
0x2C3E	0x2039    MOVS	R0, #57
0x2C40	0xB240    SXTB	R0, R0
0x2C42	0xF7FEF93F  BL	_read_ZIGBEE_short+0
;ReadWrite_Routines.c, 102 :: 		temp = temp | 0x04;                    // mask for disable receiving packets
0x2C46	0xB2C0    UXTB	R0, R0
0x2C48	0xF0400004  ORR	R0, R0, #4
;ReadWrite_Routines.c, 103 :: 		write_ZIGBEE_short(BBREG1, temp);
0x2C4C	0xB241    SXTB	R1, R0
0x2C4E	0x2039    MOVS	R0, #57
0x2C50	0xB240    SXTB	R0, R0
0x2C52	0xF7FEF917  BL	_write_ZIGBEE_short+0
;ReadWrite_Routines.c, 105 :: 		for(i=0; i<128; i++) {
; i start address is: 24 (R6)
0x2C56	0x2600    MOVS	R6, #0
0x2C58	0xB236    SXTH	R6, R6
; i end address is: 24 (R6)
L_read_RX_FIFO0:
; i start address is: 24 (R6)
0x2C5A	0x2E80    CMP	R6, #128
0x2C5C	0xDA19    BGE	L_read_RX_FIFO1
;ReadWrite_Routines.c, 106 :: 		if(i <  (1 + DATA_LENGHT + HEADER_LENGHT + 2 + 1 + 1))
0x2C5E	0x2E13    CMP	R6, #19
0x2C60	0xDA0A    BGE	L_read_RX_FIFO3
;ReadWrite_Routines.c, 107 :: 		data_RX_FIFO[i] = read_ZIGBEE_long(address_RX_FIFO + i);  // reading valid data from RX FIFO
0x2C62	0x4820    LDR	R0, [PC, #128]
0x2C64	0x1980    ADDS	R0, R0, R6
0x2C66	0x9001    STR	R0, [SP, #4]
0x2C68	0x481F    LDR	R0, [PC, #124]
0x2C6A	0xF9B00000  LDRSH	R0, [R0, #0]
0x2C6E	0x1980    ADDS	R0, R0, R6
0x2C70	0xF7FEFB62  BL	_read_ZIGBEE_long+0
0x2C74	0x9901    LDR	R1, [SP, #4]
0x2C76	0x7008    STRB	R0, [R1, #0]
L_read_RX_FIFO3:
;ReadWrite_Routines.c, 108 :: 		if(i >= (1 + DATA_LENGHT + HEADER_LENGHT + 2 + 1 + 1))
0x2C78	0x2E13    CMP	R6, #19
0x2C7A	0xDB07    BLT	L_read_RX_FIFO4
;ReadWrite_Routines.c, 109 :: 		lost_data = read_ZIGBEE_long(address_RX_FIFO + i);        // reading invalid data from RX FIFO
0x2C7C	0x481A    LDR	R0, [PC, #104]
0x2C7E	0xF9B00000  LDRSH	R0, [R0, #0]
0x2C82	0x1980    ADDS	R0, R0, R6
0x2C84	0xF7FEFB58  BL	_read_ZIGBEE_long+0
0x2C88	0x4918    LDR	R1, [PC, #96]
0x2C8A	0x7008    STRB	R0, [R1, #0]
L_read_RX_FIFO4:
;ReadWrite_Routines.c, 105 :: 		for(i=0; i<128; i++) {
0x2C8C	0x1C76    ADDS	R6, R6, #1
0x2C8E	0xB236    SXTH	R6, R6
;ReadWrite_Routines.c, 110 :: 		}
; i end address is: 24 (R6)
0x2C90	0xE7E3    B	L_read_RX_FIFO0
L_read_RX_FIFO1:
;ReadWrite_Routines.c, 112 :: 		DATA_RX[0] = data_RX_FIFO[HEADER_LENGHT + 1];               // coping valid data
0x2C92	0x4817    LDR	R0, [PC, #92]
0x2C94	0xF9901000  LDRSB	R1, [R0, #0]
0x2C98	0x4816    LDR	R0, [PC, #88]
0x2C9A	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 113 :: 		DATA_RX[1] = data_RX_FIFO[HEADER_LENGHT + 2];
0x2C9C	0x4816    LDR	R0, [PC, #88]
0x2C9E	0xF9901000  LDRSB	R1, [R0, #0]
0x2CA2	0x4816    LDR	R0, [PC, #88]
0x2CA4	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 114 :: 		DATA_RX[2] = data_RX_FIFO[HEADER_LENGHT + 3];
0x2CA6	0x4816    LDR	R0, [PC, #88]
0x2CA8	0xF9901000  LDRSB	R1, [R0, #0]
0x2CAC	0x4815    LDR	R0, [PC, #84]
0x2CAE	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 115 :: 		LQI   = data_RX_FIFO[1 + HEADER_LENGHT + DATA_LENGHT + 2];  // coping valid data
0x2CB0	0x4815    LDR	R0, [PC, #84]
0x2CB2	0xF9901000  LDRSB	R1, [R0, #0]
0x2CB6	0x4815    LDR	R0, [PC, #84]
0x2CB8	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 116 :: 		RSSI2 = data_RX_FIFO[1 + HEADER_LENGHT + DATA_LENGHT + 3];  // coping valid data
0x2CBA	0x4815    LDR	R0, [PC, #84]
0x2CBC	0xF9901000  LDRSB	R1, [R0, #0]
0x2CC0	0x4814    LDR	R0, [PC, #80]
0x2CC2	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 118 :: 		temp = read_ZIGBEE_short(BBREG1);      // enable receiving packets off air.
0x2CC4	0x2039    MOVS	R0, #57
0x2CC6	0xB240    SXTB	R0, R0
0x2CC8	0xF7FEF8FC  BL	_read_ZIGBEE_short+0
;ReadWrite_Routines.c, 119 :: 		temp = temp & (!0x04);                 // mask for enable receiving
0x2CCC	0xB2C0    UXTB	R0, R0
0x2CCE	0xF0000000  AND	R0, R0, #0
;ReadWrite_Routines.c, 120 :: 		write_ZIGBEE_short(BBREG1, temp);
0x2CD2	0xB241    SXTB	R1, R0
0x2CD4	0x2039    MOVS	R0, #57
0x2CD6	0xB240    SXTB	R0, R0
0x2CD8	0xF7FEF8D4  BL	_write_ZIGBEE_short+0
;ReadWrite_Routines.c, 121 :: 		}
L_end_read_RX_FIFO:
0x2CDC	0xF8DDE000  LDR	LR, [SP, #0]
0x2CE0	0xB002    ADD	SP, SP, #8
0x2CE2	0x4770    BX	LR
0x2CE4	0x005D2000  	_data_RX_FIFO+0
0x2CE8	0x003E2000  	_address_RX_FIFO+0
0x2CEC	0x003D2000  	_lost_data+0
0x2CF0	0x00692000  	_data_RX_FIFO+12
0x2CF4	0x00702000  	_DATA_RX+0
0x2CF8	0x006A2000  	_data_RX_FIFO+13
0x2CFC	0x00712000  	_DATA_RX+1
0x2D00	0x006B2000  	_data_RX_FIFO+14
0x2D04	0x00722000  	_DATA_RX+2
0x2D08	0x006E2000  	_data_RX_FIFO+17
0x2D0C	0x003A2000  	_LQI+0
0x2D10	0x006F2000  	_data_RX_FIFO+18
0x2D14	0x003B2000  	_RSSI2+0
; end of _read_RX_FIFO
_read_ZIGBEE_long:
;ReadWrite_Routines.c, 67 :: 		short int read_ZIGBEE_long(int address) {
; address start address is: 0 (R0)
0x1338	0xB081    SUB	SP, SP, #4
0x133A	0xF8CDE000  STR	LR, [SP, #0]
; address end address is: 0 (R0)
; address start address is: 0 (R0)
;ReadWrite_Routines.c, 68 :: 		short int data_r = 0, dummy_data_r = 0;
; dummy_data_r start address is: 16 (R4)
0x133E	0x2400    MOVS	R4, #0
0x1340	0xB264    SXTB	R4, R4
;ReadWrite_Routines.c, 69 :: 		short int address_high = 0, address_low = 0;
;ReadWrite_Routines.c, 71 :: 		CS = 0;
0x1342	0x2200    MOVS	R2, #0
0x1344	0x4911    LDR	R1, [PC, #68]
0x1346	0x600A    STR	R2, [R1, #0]
;ReadWrite_Routines.c, 73 :: 		address_high = ((short int)(address >> 3) & 0b01111111) | 0x80;  //calculating addressing mode
0x1348	0x10C1    ASRS	R1, R0, #3
0x134A	0xB249    SXTB	R1, R1
0x134C	0xF001017F  AND	R1, R1, #127
0x1350	0xB249    SXTB	R1, R1
0x1352	0xF0410280  ORR	R2, R1, #128
;ReadWrite_Routines.c, 74 :: 		address_low  = ((short int)(address << 5) & 0b11100000);         //calculating addressing mode
0x1356	0x0141    LSLS	R1, R0, #5
; address end address is: 0 (R0)
0x1358	0xB249    SXTB	R1, R1
0x135A	0xF00101E0  AND	R1, R1, #224
; address_low start address is: 20 (R5)
0x135E	0xB24D    SXTB	R5, R1
;ReadWrite_Routines.c, 75 :: 		SPI3_Write(address_high);            // addressing register
0x1360	0xB250    SXTB	R0, R2
0x1362	0xB280    UXTH	R0, R0
0x1364	0xF001F94E  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 76 :: 		SPI3_Write(address_low);             // addressing register
0x1368	0xB268    SXTB	R0, R5
0x136A	0xB280    UXTH	R0, R0
; address_low end address is: 20 (R5)
0x136C	0xF001F94A  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 77 :: 		data_r = SPI3_Read(dummy_data_r);    // read data from register
0x1370	0xB260    SXTB	R0, R4
0x1372	0xB280    UXTH	R0, R0
; dummy_data_r end address is: 16 (R4)
0x1374	0xF7FFFA36  BL	_SPI3_Read+0
;ReadWrite_Routines.c, 79 :: 		CS = 1;
0x1378	0x2201    MOVS	R2, #1
0x137A	0xB252    SXTB	R2, R2
0x137C	0x4903    LDR	R1, [PC, #12]
0x137E	0x600A    STR	R2, [R1, #0]
;ReadWrite_Routines.c, 80 :: 		return data_r;
0x1380	0xB240    SXTB	R0, R0
;ReadWrite_Routines.c, 81 :: 		}
L_end_read_ZIGBEE_long:
0x1382	0xF8DDE000  LDR	LR, [SP, #0]
0x1386	0xB001    ADD	SP, SP, #4
0x1388	0x4770    BX	LR
0x138A	0xBF00    NOP
0x138C	0x81B44222  	CS+0
; end of _read_ZIGBEE_long
_run_transmitter:
;Transmitter.c, 101 :: 		void run_transmitter() {
0x38F8	0xB081    SUB	SP, SP, #4
0x38FA	0xF8CDE000  STR	LR, [SP, #0]
;Transmitter.c, 102 :: 		read_sensors();
0x38FE	0xF7FFF889  BL	_read_sensors+0
;Transmitter.c, 104 :: 		DATA_TX[0] = sendByteOne;
0x3902	0x480A    LDR	R0, [PC, #40]
0x3904	0x7801    LDRB	R1, [R0, #0]
0x3906	0x480A    LDR	R0, [PC, #40]
0x3908	0x7001    STRB	R1, [R0, #0]
;Transmitter.c, 105 :: 		DATA_TX[1] = sendByteTwo;
0x390A	0x480A    LDR	R0, [PC, #40]
0x390C	0x7801    LDRB	R1, [R0, #0]
0x390E	0x480A    LDR	R0, [PC, #40]
0x3910	0x7001    STRB	R1, [R0, #0]
;Transmitter.c, 106 :: 		DATA_TX[2] = sendByteThree;
0x3912	0x480A    LDR	R0, [PC, #40]
0x3914	0x7801    LDRB	R1, [R0, #0]
0x3916	0x480A    LDR	R0, [PC, #40]
0x3918	0x7001    STRB	R1, [R0, #0]
;Transmitter.c, 109 :: 		write_TX_normal_FIFO();          // Transmiting
0x391A	0xF7FFF8E7  BL	_write_TX_normal_FIFO+0
;Transmitter.c, 112 :: 		display_on_screen();
0x391E	0xF7FFF81B  BL	_display_on_screen+0
;Transmitter.c, 113 :: 		}
L_end_run_transmitter:
0x3922	0xF8DDE000  LDR	LR, [SP, #0]
0x3926	0xB001    ADD	SP, SP, #4
0x3928	0x4770    BX	LR
0x392A	0xBF00    NOP
0x392C	0x00002000  	_sendByteOne+0
0x3930	0x005A2000  	_DATA_TX+0
0x3934	0x00012000  	_sendByteTwo+0
0x3938	0x005B2000  	_DATA_TX+1
0x393C	0x00022000  	_sendByteThree+0
0x3940	0x005C2000  	_DATA_TX+2
; end of _run_transmitter
_read_sensors:
;Transmitter.c, 74 :: 		void read_sensors() {
0x2A14	0xB081    SUB	SP, SP, #4
0x2A16	0xF8CDE000  STR	LR, [SP, #0]
;Transmitter.c, 76 :: 		if (Button(&GPIOD_IDR, 0, 1, 1) && button1 == 0) {          // detect logical one on PA0 pin
0x2A1A	0x2301    MOVS	R3, #1
0x2A1C	0x2201    MOVS	R2, #1
0x2A1E	0x2100    MOVS	R1, #0
0x2A20	0x482D    LDR	R0, [PC, #180]
0x2A22	0xF7FEFD67  BL	_Button+0
0x2A26	0xB168    CBZ	R0, L__read_sensors30
0x2A28	0x482C    LDR	R0, [PC, #176]
0x2A2A	0xF9900000  LDRSB	R0, [R0, #0]
0x2A2E	0xB948    CBNZ	R0, L__read_sensors29
L__read_sensors28:
;Transmitter.c, 77 :: 		button1 = 1;
0x2A30	0x2101    MOVS	R1, #1
0x2A32	0xB249    SXTB	R1, R1
0x2A34	0x4829    LDR	R0, [PC, #164]
0x2A36	0x7001    STRB	R1, [R0, #0]
;Transmitter.c, 78 :: 		sendByteOne |= 0b00100000;
0x2A38	0x4929    LDR	R1, [PC, #164]
0x2A3A	0x7808    LDRB	R0, [R1, #0]
0x2A3C	0xF0400020  ORR	R0, R0, #32
0x2A40	0x7008    STRB	R0, [R1, #0]
;Transmitter.c, 79 :: 		}
0x2A42	0xE014    B	L_read_sensors5
;Transmitter.c, 76 :: 		if (Button(&GPIOD_IDR, 0, 1, 1) && button1 == 0) {          // detect logical one on PA0 pin
L__read_sensors30:
L__read_sensors29:
;Transmitter.c, 81 :: 		else if (!Button(&GPIOD_IDR, 0, 1, 1) && button1 == 1){
0x2A44	0x2301    MOVS	R3, #1
0x2A46	0x2201    MOVS	R2, #1
0x2A48	0x2100    MOVS	R1, #0
0x2A4A	0x4823    LDR	R0, [PC, #140]
0x2A4C	0xF7FEFD52  BL	_Button+0
0x2A50	0xB968    CBNZ	R0, L__read_sensors32
0x2A52	0x4822    LDR	R0, [PC, #136]
0x2A54	0xF9900000  LDRSB	R0, [R0, #0]
0x2A58	0x2801    CMP	R0, #1
0x2A5A	0xD108    BNE	L__read_sensors31
L__read_sensors27:
;Transmitter.c, 82 :: 		button1 = 0;
0x2A5C	0x2100    MOVS	R1, #0
0x2A5E	0xB249    SXTB	R1, R1
0x2A60	0x481E    LDR	R0, [PC, #120]
0x2A62	0x7001    STRB	R1, [R0, #0]
;Transmitter.c, 83 :: 		sendByteOne &= 0b11011111;
0x2A64	0x491E    LDR	R1, [PC, #120]
0x2A66	0x7808    LDRB	R0, [R1, #0]
0x2A68	0xF00000DF  AND	R0, R0, #223
0x2A6C	0x7008    STRB	R0, [R1, #0]
;Transmitter.c, 81 :: 		else if (!Button(&GPIOD_IDR, 0, 1, 1) && button1 == 1){
L__read_sensors32:
L__read_sensors31:
;Transmitter.c, 84 :: 		}
L_read_sensors5:
;Transmitter.c, 86 :: 		if (Button(&GPIOD_IDR, 1, 1, 1) && button2 == 0) {          // detect logical one on PA0 pin
0x2A6E	0x2301    MOVS	R3, #1
0x2A70	0x2201    MOVS	R2, #1
0x2A72	0x2101    MOVS	R1, #1
0x2A74	0x4818    LDR	R0, [PC, #96]
0x2A76	0xF7FEFD3D  BL	_Button+0
0x2A7A	0xB168    CBZ	R0, L__read_sensors34
0x2A7C	0x4819    LDR	R0, [PC, #100]
0x2A7E	0xF9900000  LDRSB	R0, [R0, #0]
0x2A82	0xB948    CBNZ	R0, L__read_sensors33
L__read_sensors26:
;Transmitter.c, 87 :: 		button2 = 1;
0x2A84	0x2101    MOVS	R1, #1
0x2A86	0xB249    SXTB	R1, R1
0x2A88	0x4816    LDR	R0, [PC, #88]
0x2A8A	0x7001    STRB	R1, [R0, #0]
;Transmitter.c, 88 :: 		sendByteOne |= 0b00010000;
0x2A8C	0x4914    LDR	R1, [PC, #80]
0x2A8E	0x7808    LDRB	R0, [R1, #0]
0x2A90	0xF0400010  ORR	R0, R0, #16
0x2A94	0x7008    STRB	R0, [R1, #0]
;Transmitter.c, 89 :: 		}
0x2A96	0xE014    B	L_read_sensors12
;Transmitter.c, 86 :: 		if (Button(&GPIOD_IDR, 1, 1, 1) && button2 == 0) {          // detect logical one on PA0 pin
L__read_sensors34:
L__read_sensors33:
;Transmitter.c, 91 :: 		else if (!Button(&GPIOD_IDR, 1, 1, 1) && button2 == 1){
0x2A98	0x2301    MOVS	R3, #1
0x2A9A	0x2201    MOVS	R2, #1
0x2A9C	0x2101    MOVS	R1, #1
0x2A9E	0x480E    LDR	R0, [PC, #56]
0x2AA0	0xF7FEFD28  BL	_Button+0
0x2AA4	0xB968    CBNZ	R0, L__read_sensors36
0x2AA6	0x480F    LDR	R0, [PC, #60]
0x2AA8	0xF9900000  LDRSB	R0, [R0, #0]
0x2AAC	0x2801    CMP	R0, #1
0x2AAE	0xD108    BNE	L__read_sensors35
L__read_sensors25:
;Transmitter.c, 92 :: 		button2 = 0;
0x2AB0	0x2100    MOVS	R1, #0
0x2AB2	0xB249    SXTB	R1, R1
0x2AB4	0x480B    LDR	R0, [PC, #44]
0x2AB6	0x7001    STRB	R1, [R0, #0]
;Transmitter.c, 93 :: 		sendByteOne &= 0b11101111;
0x2AB8	0x4909    LDR	R1, [PC, #36]
0x2ABA	0x7808    LDRB	R0, [R1, #0]
0x2ABC	0xF00000EF  AND	R0, R0, #239
0x2AC0	0x7008    STRB	R0, [R1, #0]
;Transmitter.c, 91 :: 		else if (!Button(&GPIOD_IDR, 1, 1, 1) && button2 == 1){
L__read_sensors36:
L__read_sensors35:
;Transmitter.c, 94 :: 		}
L_read_sensors12:
;Transmitter.c, 96 :: 		adc_result = ADC1_Get_Sample(3); // Get ADC value from corresponding channel
0x2AC2	0x2003    MOVS	R0, #3
0x2AC4	0xF7FEFD84  BL	_ADC1_Get_Sample+0
0x2AC8	0x4907    LDR	R1, [PC, #28]
0x2ACA	0x8008    STRH	R0, [R1, #0]
;Transmitter.c, 97 :: 		parse_analog();
0x2ACC	0xF7FEF980  BL	_parse_analog+0
;Transmitter.c, 99 :: 		}
L_end_read_sensors:
0x2AD0	0xF8DDE000  LDR	LR, [SP, #0]
0x2AD4	0xB001    ADD	SP, SP, #4
0x2AD6	0x4770    BX	LR
0x2AD8	0x14084001  	GPIOD_IDR+0
0x2ADC	0x00832000  	_button1+0
0x2AE0	0x00002000  	_sendByteOne+0
0x2AE4	0x00842000  	_button2+0
0x2AE8	0x00042000  	_adc_result+0
; end of _read_sensors
_Button:
;__Lib_Button.c, 6 :: 		
; active_state start address is: 12 (R3)
; time_ms start address is: 8 (R2)
; pin start address is: 4 (R1)
; port start address is: 0 (R0)
0x14F4	0xB082    SUB	SP, SP, #8
0x14F6	0xF8CDE000  STR	LR, [SP, #0]
0x14FA	0x460D    MOV	R5, R1
0x14FC	0x4611    MOV	R1, R2
; active_state end address is: 12 (R3)
; time_ms end address is: 8 (R2)
; pin end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin start address is: 20 (R5)
; time_ms start address is: 4 (R1)
; active_state start address is: 12 (R3)
;__Lib_Button.c, 8 :: 		
; rslt start address is: 8 (R2)
0x14FE	0xF04F0200  MOV	R2, #0
;__Lib_Button.c, 11 :: 		
0x1502	0x2401    MOVS	R4, #1
0x1504	0xB224    SXTH	R4, R4
0x1506	0x40AC    LSLS	R4, R5
0x1508	0xB224    SXTH	R4, R4
; pin end address is: 20 (R5)
; pMask start address is: 20 (R5)
0x150A	0xB225    SXTH	R5, R4
;__Lib_Button.c, 13 :: 		
0x150C	0x6804    LDR	R4, [R0, #0]
0x150E	0x402C    ANDS	R4, R5
0x1510	0x2C00    CMP	R4, #0
0x1512	0xF2400400  MOVW	R4, #0
0x1516	0xD100    BNE	L__Button7
0x1518	0x2401    MOVS	R4, #1
L__Button7:
0x151A	0xB2E4    UXTB	R4, R4
0x151C	0x405C    EORS	R4, R3
0x151E	0xB1C4    CBZ	R4, L__Button5
; time_ms end address is: 4 (R1)
; pMask end address is: 20 (R5)
; rslt end address is: 8 (R2)
; active_state end address is: 12 (R3)
; port end address is: 0 (R0)
0x1520	0x9501    STR	R5, [SP, #4]
0x1522	0x460D    MOV	R5, R1
0x1524	0x9901    LDR	R1, [SP, #4]
;__Lib_Button.c, 15 :: 		
L_Button1:
; pMask start address is: 4 (R1)
; rslt start address is: 8 (R2)
; active_state start address is: 12 (R3)
; time_ms start address is: 20 (R5)
; port start address is: 0 (R0)
0x1526	0x2D00    CMP	R5, #0
0x1528	0xD905    BLS	L_Button2
;__Lib_Button.c, 16 :: 		
0x152A	0xF7FFFA19  BL	_Delay_500us+0
;__Lib_Button.c, 17 :: 		
0x152E	0xF7FFFA17  BL	_Delay_500us+0
;__Lib_Button.c, 18 :: 		
0x1532	0x1E6D    SUBS	R5, R5, #1
;__Lib_Button.c, 19 :: 		
; time_ms end address is: 20 (R5)
0x1534	0xE7F7    B	L_Button1
L_Button2:
;__Lib_Button.c, 21 :: 		
0x1536	0x6804    LDR	R4, [R0, #0]
; port end address is: 0 (R0)
0x1538	0x400C    ANDS	R4, R1
; pMask end address is: 4 (R1)
0x153A	0x2C00    CMP	R4, #0
0x153C	0xF2400400  MOVW	R4, #0
0x1540	0xD100    BNE	L__Button8
0x1542	0x2401    MOVS	R4, #1
L__Button8:
0x1544	0xB2E4    UXTB	R4, R4
0x1546	0x405C    EORS	R4, R3
; active_state end address is: 12 (R3)
0x1548	0xB10C    CBZ	R4, L__Button4
; rslt end address is: 8 (R2)
;__Lib_Button.c, 22 :: 		
; rslt start address is: 0 (R0)
0x154A	0x20FF    MOVS	R0, #255
; rslt end address is: 0 (R0)
0x154C	0xE000    B	L_Button3
L__Button4:
;__Lib_Button.c, 21 :: 		
0x154E	0x4610    MOV	R0, R2
;__Lib_Button.c, 22 :: 		
L_Button3:
;__Lib_Button.c, 23 :: 		
; rslt start address is: 0 (R0)
; rslt end address is: 0 (R0)
0x1550	0xE000    B	L_Button0
L__Button5:
;__Lib_Button.c, 13 :: 		
0x1552	0x4610    MOV	R0, R2
;__Lib_Button.c, 23 :: 		
L_Button0:
;__Lib_Button.c, 25 :: 		
; rslt start address is: 0 (R0)
0x1554	0xB280    UXTH	R0, R0
; rslt end address is: 0 (R0)
;__Lib_Button.c, 26 :: 		
L_end_Button:
0x1556	0xF8DDE000  LDR	LR, [SP, #0]
0x155A	0xB002    ADD	SP, SP, #8
0x155C	0x4770    BX	LR
; end of _Button
_Delay_500us:
;__Lib_Delays.c, 33 :: 		void Delay_500us() {
0x0960	0xB081    SUB	SP, SP, #4
;__Lib_Delays.c, 34 :: 		Delay_us(498);
0x0962	0xF2417757  MOVW	R7, #5975
0x0966	0xF2C00700  MOVT	R7, #0
L_Delay_500us10:
0x096A	0x1E7F    SUBS	R7, R7, #1
0x096C	0xD1FD    BNE	L_Delay_500us10
0x096E	0xBF00    NOP
0x0970	0xBF00    NOP
0x0972	0xBF00    NOP
0x0974	0xBF00    NOP
0x0976	0xBF00    NOP
;__Lib_Delays.c, 35 :: 		}
L_end_Delay_500us:
0x0978	0xB001    ADD	SP, SP, #4
0x097A	0x4770    BX	LR
; end of _Delay_500us
_ADC1_Get_Sample:
;__Lib_ADC_12_32F10x_16ch.c, 136 :: 		
; channel start address is: 0 (R0)
0x15D0	0xB081    SUB	SP, SP, #4
0x15D2	0xF8CDE000  STR	LR, [SP, #0]
; channel end address is: 0 (R0)
; channel start address is: 0 (R0)
;__Lib_ADC_12_32F10x_16ch.c, 137 :: 		
0x15D6	0xB281    UXTH	R1, R0
; channel end address is: 0 (R0)
0x15D8	0x4803    LDR	R0, [PC, #12]
0x15DA	0xF7FFF8B7  BL	__Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample+0
;__Lib_ADC_12_32F10x_16ch.c, 144 :: 		
L_end_ADC1_Get_Sample:
0x15DE	0xF8DDE000  LDR	LR, [SP, #0]
0x15E2	0xB001    ADD	SP, SP, #4
0x15E4	0x4770    BX	LR
0x15E6	0xBF00    NOP
0x15E8	0x24004001  	ADC1_SR+0
; end of _ADC1_Get_Sample
__Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample:
;__Lib_ADC_12_32F10x_16ch.c, 122 :: 		
; channel start address is: 4 (R1)
; base start address is: 0 (R0)
0x074C	0xB081    SUB	SP, SP, #4
0x074E	0xF8CDE000  STR	LR, [SP, #0]
; channel end address is: 4 (R1)
; base end address is: 0 (R0)
; base start address is: 0 (R0)
; channel start address is: 4 (R1)
;__Lib_ADC_12_32F10x_16ch.c, 123 :: 		
0x0752	0xF2000434  ADDW	R4, R0, #52
0x0756	0x090A    LSRS	R2, R1, #4
0x0758	0xB292    UXTH	R2, R2
0x075A	0xB293    UXTH	R3, R2
0x075C	0x6822    LDR	R2, [R4, #0]
0x075E	0xF3631204  BFI	R2, R3, #4, #1
0x0762	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 124 :: 		
0x0764	0xF2000434  ADDW	R4, R0, #52
0x0768	0x08CA    LSRS	R2, R1, #3
0x076A	0xB292    UXTH	R2, R2
0x076C	0xB293    UXTH	R3, R2
0x076E	0x6822    LDR	R2, [R4, #0]
0x0770	0xF36302C3  BFI	R2, R3, #3, #1
0x0774	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 125 :: 		
0x0776	0xF2000434  ADDW	R4, R0, #52
0x077A	0x088A    LSRS	R2, R1, #2
0x077C	0xB292    UXTH	R2, R2
0x077E	0xB293    UXTH	R3, R2
0x0780	0x6822    LDR	R2, [R4, #0]
0x0782	0xF3630282  BFI	R2, R3, #2, #1
0x0786	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 126 :: 		
0x0788	0xF2000434  ADDW	R4, R0, #52
0x078C	0x084A    LSRS	R2, R1, #1
0x078E	0xB292    UXTH	R2, R2
0x0790	0xB293    UXTH	R3, R2
0x0792	0x6822    LDR	R2, [R4, #0]
0x0794	0xF3630241  BFI	R2, R3, #1, #1
0x0798	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 127 :: 		
0x079A	0xF2000434  ADDW	R4, R0, #52
0x079E	0xB28B    UXTH	R3, R1
; channel end address is: 4 (R1)
0x07A0	0x6822    LDR	R2, [R4, #0]
0x07A2	0xF3630200  BFI	R2, R3, #0, #1
0x07A6	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 128 :: 		
0x07A8	0xF2000408  ADDW	R4, R0, #8
0x07AC	0x2301    MOVS	R3, #1
0x07AE	0x6822    LDR	R2, [R4, #0]
0x07B0	0xF3630200  BFI	R2, R3, #0, #1
0x07B4	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 129 :: 		
0x07B6	0xF2000408  ADDW	R4, R0, #8
0x07BA	0x2301    MOVS	R3, #1
0x07BC	0x6822    LDR	R2, [R4, #0]
0x07BE	0xF3635296  BFI	R2, R3, #22, #1
0x07C2	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 130 :: 		
0x07C4	0xF7FFFCD4  BL	_Delay_1us+0
; base end address is: 0 (R0)
;__Lib_ADC_12_32F10x_16ch.c, 131 :: 		
L___Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample20:
; base start address is: 0 (R0)
0x07C8	0x6803    LDR	R3, [R0, #0]
0x07CA	0xF3C30240  UBFX	R2, R3, #1, #1
0x07CE	0xB902    CBNZ	R2, L___Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample21
0x07D0	0xE7FA    B	L___Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample20
L___Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample21:
;__Lib_ADC_12_32F10x_16ch.c, 132 :: 		
0x07D2	0xF200024C  ADDW	R2, R0, #76
; base end address is: 0 (R0)
0x07D6	0x6812    LDR	R2, [R2, #0]
0x07D8	0xB290    UXTH	R0, R2
;__Lib_ADC_12_32F10x_16ch.c, 133 :: 		
L_end_ADCx_Get_Sample:
0x07DA	0xF8DDE000  LDR	LR, [SP, #0]
0x07DE	0xB001    ADD	SP, SP, #4
0x07E0	0x4770    BX	LR
; end of __Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample
_parse_analog:
;Transmitter.c, 48 :: 		void parse_analog() {
0x0DD0	0xB081    SUB	SP, SP, #4
;Transmitter.c, 49 :: 		adc_l = adc_result % 256;
0x0DD2	0x4A11    LDR	R2, [PC, #68]
0x0DD4	0xF9B21000  LDRSH	R1, [R2, #0]
0x0DD8	0xF2401000  MOVW	R0, #256
0x0DDC	0xB200    SXTH	R0, R0
0x0DDE	0xFB91F3F0  SDIV	R3, R1, R0
0x0DE2	0xFB001313  MLS	R3, R0, R3, R1
0x0DE6	0x480D    LDR	R0, [PC, #52]
0x0DE8	0x7003    STRB	R3, [R0, #0]
;Transmitter.c, 50 :: 		adc_h = (adc_result - adc_l) / 265;
0x0DEA	0xB2D9    UXTB	R1, R3
0x0DEC	0x4610    MOV	R0, R2
0x0DEE	0xF9B00000  LDRSH	R0, [R0, #0]
0x0DF2	0x1A41    SUB	R1, R0, R1
0x0DF4	0xB209    SXTH	R1, R1
0x0DF6	0xF2401009  MOVW	R0, #265
0x0DFA	0xB200    SXTH	R0, R0
0x0DFC	0xFB91F2F0  SDIV	R2, R1, R0
0x0E00	0x4807    LDR	R0, [PC, #28]
0x0E02	0x7002    STRB	R2, [R0, #0]
;Transmitter.c, 51 :: 		sendByteTwo = adc_l;
0x0E04	0xB2D9    UXTB	R1, R3
0x0E06	0x4807    LDR	R0, [PC, #28]
0x0E08	0x7001    STRB	R1, [R0, #0]
;Transmitter.c, 52 :: 		sendByteOne |= adc_h;
0x0E0A	0xB2D2    UXTB	R2, R2
0x0E0C	0x4906    LDR	R1, [PC, #24]
0x0E0E	0x7808    LDRB	R0, [R1, #0]
0x0E10	0x4310    ORRS	R0, R2
0x0E12	0x7008    STRB	R0, [R1, #0]
;Transmitter.c, 53 :: 		}
L_end_parse_analog:
0x0E14	0xB001    ADD	SP, SP, #4
0x0E16	0x4770    BX	LR
0x0E18	0x00042000  	_adc_result+0
0x0E1C	0x008A2000  	_adc_l+0
0x0E20	0x008B2000  	_adc_h+0
0x0E24	0x00012000  	_sendByteTwo+0
0x0E28	0x00002000  	_sendByteOne+0
; end of _parse_analog
_write_TX_normal_FIFO:
;ReadWrite_Routines.c, 123 :: 		void write_TX_normal_FIFO() {
0x2AEC	0xB081    SUB	SP, SP, #4
0x2AEE	0xF8CDE000  STR	LR, [SP, #0]
;ReadWrite_Routines.c, 124 :: 		int i = 0;
;ReadWrite_Routines.c, 126 :: 		data_TX_normal_FIFO[0]  = HEADER_LENGHT;
0x2AF2	0x210B    MOVS	R1, #11
0x2AF4	0xB249    SXTB	R1, R1
0x2AF6	0x4833    LDR	R0, [PC, #204]
0x2AF8	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 127 :: 		data_TX_normal_FIFO[1]  = HEADER_LENGHT + DATA_LENGHT;
0x2AFA	0x210E    MOVS	R1, #14
0x2AFC	0xB249    SXTB	R1, R1
0x2AFE	0x4832    LDR	R0, [PC, #200]
0x2B00	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 128 :: 		data_TX_normal_FIFO[2]  = 0x01;                        // control frame
0x2B02	0x2101    MOVS	R1, #1
0x2B04	0xB249    SXTB	R1, R1
0x2B06	0x4831    LDR	R0, [PC, #196]
0x2B08	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 129 :: 		data_TX_normal_FIFO[3]  = 0x88;
0x2B0A	0x2188    MOVS	R1, #136
0x2B0C	0xB249    SXTB	R1, R1
0x2B0E	0x4830    LDR	R0, [PC, #192]
0x2B10	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 130 :: 		data_TX_normal_FIFO[4]  = SEQ_NUMBER;                  // sequence number
0x2B12	0x4830    LDR	R0, [PC, #192]
0x2B14	0xF9901000  LDRSB	R1, [R0, #0]
0x2B18	0x482F    LDR	R0, [PC, #188]
0x2B1A	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 131 :: 		data_TX_normal_FIFO[5]  = PAN_ID_2[1];                 // destinatoin pan
0x2B1C	0x482F    LDR	R0, [PC, #188]
0x2B1E	0xF9901000  LDRSB	R1, [R0, #0]
0x2B22	0x482F    LDR	R0, [PC, #188]
0x2B24	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 132 :: 		data_TX_normal_FIFO[6]  = PAN_ID_2[0];
0x2B26	0x482F    LDR	R0, [PC, #188]
0x2B28	0xF9901000  LDRSB	R1, [R0, #0]
0x2B2C	0x482E    LDR	R0, [PC, #184]
0x2B2E	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 133 :: 		data_TX_normal_FIFO[7]  = ADDRESS_short_2[0];          // destination address
0x2B30	0x482E    LDR	R0, [PC, #184]
0x2B32	0xF9901000  LDRSB	R1, [R0, #0]
0x2B36	0x482E    LDR	R0, [PC, #184]
0x2B38	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 134 :: 		data_TX_normal_FIFO[8]  = ADDRESS_short_2[1];
0x2B3A	0x482E    LDR	R0, [PC, #184]
0x2B3C	0xF9901000  LDRSB	R1, [R0, #0]
0x2B40	0x482D    LDR	R0, [PC, #180]
0x2B42	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 135 :: 		data_TX_normal_FIFO[9]  = PAN_ID_1[0];                 // source pan
0x2B44	0x482D    LDR	R0, [PC, #180]
0x2B46	0xF9901000  LDRSB	R1, [R0, #0]
0x2B4A	0x482D    LDR	R0, [PC, #180]
0x2B4C	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 136 :: 		data_TX_normal_FIFO[10] = PAN_ID_1[1];
0x2B4E	0x482D    LDR	R0, [PC, #180]
0x2B50	0xF9901000  LDRSB	R1, [R0, #0]
0x2B54	0x482C    LDR	R0, [PC, #176]
0x2B56	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 137 :: 		data_TX_normal_FIFO[11] = ADDRESS_short_1[0];          // source address
0x2B58	0x482C    LDR	R0, [PC, #176]
0x2B5A	0xF9901000  LDRSB	R1, [R0, #0]
0x2B5E	0x482C    LDR	R0, [PC, #176]
0x2B60	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 138 :: 		data_TX_normal_FIFO[12] = ADDRESS_short_1[1];
0x2B62	0x482C    LDR	R0, [PC, #176]
0x2B64	0xF9901000  LDRSB	R1, [R0, #0]
0x2B68	0x482B    LDR	R0, [PC, #172]
0x2B6A	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 139 :: 		data_TX_normal_FIFO[13] = DATA_TX[0];                  // data
0x2B6C	0x482B    LDR	R0, [PC, #172]
0x2B6E	0xF9901000  LDRSB	R1, [R0, #0]
0x2B72	0x482B    LDR	R0, [PC, #172]
0x2B74	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 140 :: 		data_TX_normal_FIFO[14] = DATA_TX[1];
0x2B76	0x482B    LDR	R0, [PC, #172]
0x2B78	0xF9901000  LDRSB	R1, [R0, #0]
0x2B7C	0x482A    LDR	R0, [PC, #168]
0x2B7E	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 141 :: 		data_TX_normal_FIFO[15] = DATA_TX[2];
0x2B80	0x482A    LDR	R0, [PC, #168]
0x2B82	0xF9901000  LDRSB	R1, [R0, #0]
0x2B86	0x482A    LDR	R0, [PC, #168]
0x2B88	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 142 :: 		for(i = 0; i < (HEADER_LENGHT + DATA_LENGHT + 2); i++) {
; i start address is: 24 (R6)
0x2B8A	0x2600    MOVS	R6, #0
0x2B8C	0xB236    SXTH	R6, R6
; i end address is: 24 (R6)
L_write_TX_normal_FIFO5:
; i start address is: 24 (R6)
0x2B8E	0x2E10    CMP	R6, #16
0x2B90	0xDA0D    BGE	L_write_TX_normal_FIFO6
;ReadWrite_Routines.c, 143 :: 		write_ZIGBEE_long(address_TX_normal_FIFO + i, data_TX_normal_FIFO[i]); // write frame into normal FIFO
0x2B92	0x480C    LDR	R0, [PC, #48]
0x2B94	0x1980    ADDS	R0, R0, R6
0x2B96	0xF9900000  LDRSB	R0, [R0, #0]
0x2B9A	0xB241    SXTB	R1, R0
0x2B9C	0x4825    LDR	R0, [PC, #148]
0x2B9E	0xF9B00000  LDRSH	R0, [R0, #0]
0x2BA2	0x1980    ADDS	R0, R0, R6
0x2BA4	0xF7FDFE5C  BL	_write_ZIGBEE_long+0
;ReadWrite_Routines.c, 142 :: 		for(i = 0; i < (HEADER_LENGHT + DATA_LENGHT + 2); i++) {
0x2BA8	0x1C76    ADDS	R6, R6, #1
0x2BAA	0xB236    SXTH	R6, R6
;ReadWrite_Routines.c, 144 :: 		}
; i end address is: 24 (R6)
0x2BAC	0xE7EF    B	L_write_TX_normal_FIFO5
L_write_TX_normal_FIFO6:
;ReadWrite_Routines.c, 146 :: 		set_not_ACK();
0x2BAE	0xF7FEF93D  BL	_set_not_ACK+0
;ReadWrite_Routines.c, 147 :: 		set_not_encrypt();
0x2BB2	0xF7FEF9A7  BL	_set_not_encrypt+0
;ReadWrite_Routines.c, 148 :: 		start_transmit();
0x2BB6	0xF7FEF94B  BL	_start_transmit+0
;ReadWrite_Routines.c, 149 :: 		}
L_end_write_TX_normal_FIFO:
0x2BBA	0xF8DDE000  LDR	LR, [SP, #0]
0x2BBE	0xB001    ADD	SP, SP, #4
0x2BC0	0x4770    BX	LR
0x2BC2	0xBF00    NOP
0x2BC4	0x00732000  	_data_TX_normal_FIFO+0
0x2BC8	0x00742000  	_data_TX_normal_FIFO+1
0x2BCC	0x00752000  	_data_TX_normal_FIFO+2
0x2BD0	0x00762000  	_data_TX_normal_FIFO+3
0x2BD4	0x003C2000  	_SEQ_NUMBER+0
0x2BD8	0x00772000  	_data_TX_normal_FIFO+4
0x2BDC	0x00492000  	_PAN_ID_2+1
0x2BE0	0x00782000  	_data_TX_normal_FIFO+5
0x2BE4	0x00482000  	_PAN_ID_2+0
0x2BE8	0x00792000  	_data_TX_normal_FIFO+6
0x2BEC	0x00442000  	_ADDRESS_short_2+0
0x2BF0	0x007A2000  	_data_TX_normal_FIFO+7
0x2BF4	0x00452000  	_ADDRESS_short_2+1
0x2BF8	0x007B2000  	_data_TX_normal_FIFO+8
0x2BFC	0x00462000  	_PAN_ID_1+0
0x2C00	0x007C2000  	_data_TX_normal_FIFO+9
0x2C04	0x00472000  	_PAN_ID_1+1
0x2C08	0x007D2000  	_data_TX_normal_FIFO+10
0x2C0C	0x00422000  	_ADDRESS_short_1+0
0x2C10	0x007E2000  	_data_TX_normal_FIFO+11
0x2C14	0x00432000  	_ADDRESS_short_1+1
0x2C18	0x007F2000  	_data_TX_normal_FIFO+12
0x2C1C	0x005A2000  	_DATA_TX+0
0x2C20	0x00802000  	_data_TX_normal_FIFO+13
0x2C24	0x005B2000  	_DATA_TX+1
0x2C28	0x00812000  	_data_TX_normal_FIFO+14
0x2C2C	0x005C2000  	_DATA_TX+2
0x2C30	0x00822000  	_data_TX_normal_FIFO+15
0x2C34	0x00402000  	_address_TX_normal_FIFO+0
; end of _write_TX_normal_FIFO
_set_not_ACK:
;Misc_Routines.c, 191 :: 		void set_not_ACK() {
0x0E2C	0xB081    SUB	SP, SP, #4
0x0E2E	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 192 :: 		short int temp = 0;
;Misc_Routines.c, 194 :: 		temp = read_ZIGBEE_short(TXNCON);
0x0E32	0x201B    MOVS	R0, #27
0x0E34	0xB240    SXTB	R0, R0
0x0E36	0xF000F845  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 195 :: 		temp = temp & (!0x04);              // 0x04 mask for set not ACK
0x0E3A	0xF0000000  AND	R0, R0, #0
;Misc_Routines.c, 196 :: 		write_ZIGBEE_short(TXNCON, temp);
0x0E3E	0xB241    SXTB	R1, R0
0x0E40	0x201B    MOVS	R0, #27
0x0E42	0xB240    SXTB	R0, R0
0x0E44	0xF000F81E  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 197 :: 		}
L_end_set_not_ACK:
0x0E48	0xF8DDE000  LDR	LR, [SP, #0]
0x0E4C	0xB001    ADD	SP, SP, #4
0x0E4E	0x4770    BX	LR
; end of _set_not_ACK
_set_not_encrypt:
;Misc_Routines.c, 210 :: 		void set_not_encrypt(void){
0x0F04	0xB081    SUB	SP, SP, #4
0x0F06	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 211 :: 		short int temp = 0;
;Misc_Routines.c, 213 :: 		temp = read_ZIGBEE_short(TXNCON);
0x0F0A	0x201B    MOVS	R0, #27
0x0F0C	0xB240    SXTB	R0, R0
0x0F0E	0xF7FFFFD9  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 214 :: 		temp = temp & (!0x02);              // mask for set not encrypt
0x0F12	0xF0000000  AND	R0, R0, #0
;Misc_Routines.c, 215 :: 		write_ZIGBEE_short(TXNCON, temp);
0x0F16	0xB241    SXTB	R1, R0
0x0F18	0x201B    MOVS	R0, #27
0x0F1A	0xB240    SXTB	R0, R0
0x0F1C	0xF7FFFFB2  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 216 :: 		}
L_end_set_not_encrypt:
0x0F20	0xF8DDE000  LDR	LR, [SP, #0]
0x0F24	0xB001    ADD	SP, SP, #4
0x0F26	0x4770    BX	LR
; end of _set_not_encrypt
_start_transmit:
;ReadWrite_Routines.c, 86 :: 		void start_transmit() {
0x0E50	0xB081    SUB	SP, SP, #4
0x0E52	0xF8CDE000  STR	LR, [SP, #0]
;ReadWrite_Routines.c, 87 :: 		short int temp = 0;
;ReadWrite_Routines.c, 89 :: 		temp = read_ZIGBEE_short(TXNCON);
0x0E56	0x201B    MOVS	R0, #27
0x0E58	0xB240    SXTB	R0, R0
0x0E5A	0xF000F833  BL	_read_ZIGBEE_short+0
;ReadWrite_Routines.c, 90 :: 		temp = temp | 0x01;                 // mask for start transmit
0x0E5E	0xF0400001  ORR	R0, R0, #1
;ReadWrite_Routines.c, 91 :: 		write_ZIGBEE_short(TXNCON, temp);
0x0E62	0xB241    SXTB	R1, R0
0x0E64	0x201B    MOVS	R0, #27
0x0E66	0xB240    SXTB	R0, R0
0x0E68	0xF000F80C  BL	_write_ZIGBEE_short+0
;ReadWrite_Routines.c, 92 :: 		}
L_end_start_transmit:
0x0E6C	0xF8DDE000  LDR	LR, [SP, #0]
0x0E70	0xB001    ADD	SP, SP, #4
0x0E72	0x4770    BX	LR
; end of _start_transmit
_display_on_screen:
;Transmitter.c, 55 :: 		void display_on_screen() {
0x2958	0xB081    SUB	SP, SP, #4
0x295A	0xF8CDE000  STR	LR, [SP, #0]
;Transmitter.c, 56 :: 		ByteToStr(sendByteThree, &txt);  //Board ID
0x295E	0x4822    LDR	R0, [PC, #136]
0x2960	0x7800    LDRB	R0, [R0, #0]
0x2962	0x4922    LDR	R1, [PC, #136]
0x2964	0xF7FFFA98  BL	_ByteToStr+0
;Transmitter.c, 57 :: 		TFT_Write_Text(txt, 215, 40);
0x2968	0x2228    MOVS	R2, #40
0x296A	0x21D7    MOVS	R1, #215
0x296C	0x481F    LDR	R0, [PC, #124]
0x296E	0xF000FC99  BL	_TFT_Write_Text+0
;Transmitter.c, 59 :: 		ByteToStr(button1, &txt);      // Convert byte to string
0x2972	0x481F    LDR	R0, [PC, #124]
0x2974	0xF9900000  LDRSB	R0, [R0, #0]
0x2978	0x491C    LDR	R1, [PC, #112]
0x297A	0xF7FFFA8D  BL	_ByteToStr+0
;Transmitter.c, 60 :: 		TFT_Write_Text(txt, 215, 80);    // Display string on TFT
0x297E	0x2250    MOVS	R2, #80
0x2980	0x21D7    MOVS	R1, #215
0x2982	0x481A    LDR	R0, [PC, #104]
0x2984	0xF000FC8E  BL	_TFT_Write_Text+0
;Transmitter.c, 62 :: 		ByteToStr(button2, &txt);
0x2988	0x481A    LDR	R0, [PC, #104]
0x298A	0xF9900000  LDRSB	R0, [R0, #0]
0x298E	0x4917    LDR	R1, [PC, #92]
0x2990	0xF7FFFA82  BL	_ByteToStr+0
;Transmitter.c, 63 :: 		TFT_Write_Text(txt, 215, 120);
0x2994	0x2278    MOVS	R2, #120
0x2996	0x21D7    MOVS	R1, #215
0x2998	0x4814    LDR	R0, [PC, #80]
0x299A	0xF000FC83  BL	_TFT_Write_Text+0
;Transmitter.c, 65 :: 		IntToStr(adc_result, &txt);
0x299E	0x4816    LDR	R0, [PC, #88]
0x29A0	0xF9B00000  LDRSH	R0, [R0, #0]
0x29A4	0x4911    LDR	R1, [PC, #68]
0x29A6	0xF7FFFD8D  BL	_IntToStr+0
;Transmitter.c, 66 :: 		TFT_Write_Text(txt, 215, 160);
0x29AA	0x22A0    MOVS	R2, #160
0x29AC	0x21D7    MOVS	R1, #215
0x29AE	0x480F    LDR	R0, [PC, #60]
0x29B0	0xF000FC78  BL	_TFT_Write_Text+0
;Transmitter.c, 68 :: 		delay_ms(1000);
0x29B4	0xF64127FF  MOVW	R7, #6911
0x29B8	0xF2C007B7  MOVT	R7, #183
0x29BC	0xBF00    NOP
0x29BE	0xBF00    NOP
L_display_on_screen0:
0x29C0	0x1E7F    SUBS	R7, R7, #1
0x29C2	0xD1FD    BNE	L_display_on_screen0
0x29C4	0xBF00    NOP
0x29C6	0xBF00    NOP
0x29C8	0xBF00    NOP
;Transmitter.c, 71 :: 		TFT_Rectangle(215, 40, 255, 180);
0x29CA	0x23B4    MOVS	R3, #180
0x29CC	0xB21B    SXTH	R3, R3
0x29CE	0x22FF    MOVS	R2, #255
0x29D0	0xB212    SXTH	R2, R2
0x29D2	0x2128    MOVS	R1, #40
0x29D4	0xB209    SXTH	R1, R1
0x29D6	0x20D7    MOVS	R0, #215
0x29D8	0xB200    SXTH	R0, R0
0x29DA	0xF7FFFB0D  BL	_TFT_Rectangle+0
;Transmitter.c, 72 :: 		}
L_end_display_on_screen:
0x29DE	0xF8DDE000  LDR	LR, [SP, #0]
0x29E2	0xB001    ADD	SP, SP, #4
0x29E4	0x4770    BX	LR
0x29E6	0xBF00    NOP
0x29E8	0x00022000  	_sendByteThree+0
0x29EC	0x00862000  	_txt+0
0x29F0	0x00832000  	_button1+0
0x29F4	0x00842000  	_button2+0
0x29F8	0x00042000  	_adc_result+0
; end of _display_on_screen
_ByteToStr:
;__Lib_Conversions.c, 82 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x1E98	0xB081    SUB	SP, SP, #4
0x1E9A	0x460A    MOV	R2, R1
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 0 (R0)
; output start address is: 8 (R2)
;__Lib_Conversions.c, 85 :: 		
; DigitPos start address is: 4 (R1)
0x1E9C	0x2100    MOVS	R1, #0
; input end address is: 0 (R0)
; output end address is: 8 (R2)
; DigitPos end address is: 4 (R1)
0x1E9E	0xB2C5    UXTB	R5, R0
0x1EA0	0x4610    MOV	R0, R2
L_ByteToStr0:
; DigitPos start address is: 4 (R1)
; output start address is: 0 (R0)
; input start address is: 20 (R5)
0x1EA2	0x2903    CMP	R1, #3
0x1EA4	0xD205    BCS	L_ByteToStr1
;__Lib_Conversions.c, 86 :: 		
0x1EA6	0x1843    ADDS	R3, R0, R1
0x1EA8	0x2220    MOVS	R2, #32
0x1EAA	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 85 :: 		
0x1EAC	0x1C49    ADDS	R1, R1, #1
0x1EAE	0xB2C9    UXTB	R1, R1
;__Lib_Conversions.c, 86 :: 		
0x1EB0	0xE7F7    B	L_ByteToStr0
L_ByteToStr1:
;__Lib_Conversions.c, 88 :: 		
0x1EB2	0x1843    ADDS	R3, R0, R1
0x1EB4	0x2200    MOVS	R2, #0
0x1EB6	0x701A    STRB	R2, [R3, #0]
0x1EB8	0x1E49    SUBS	R1, R1, #1
0x1EBA	0xB2C9    UXTB	R1, R1
; output end address is: 0 (R0)
; DigitPos end address is: 4 (R1)
;__Lib_Conversions.c, 90 :: 		
L_ByteToStr3:
;__Lib_Conversions.c, 91 :: 		
; DigitPos start address is: 4 (R1)
; input start address is: 20 (R5)
; output start address is: 0 (R0)
0x1EBC	0x1844    ADDS	R4, R0, R1
0x1EBE	0x230A    MOVS	R3, #10
0x1EC0	0xFBB5F2F3  UDIV	R2, R5, R3
0x1EC4	0xFB035212  MLS	R2, R3, R2, R5
0x1EC8	0xB2D2    UXTB	R2, R2
0x1ECA	0x3230    ADDS	R2, #48
0x1ECC	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 92 :: 		
0x1ECE	0x220A    MOVS	R2, #10
0x1ED0	0xFBB5F2F2  UDIV	R2, R5, R2
0x1ED4	0xB2D2    UXTB	R2, R2
0x1ED6	0xB2D5    UXTB	R5, R2
; input end address is: 20 (R5)
;__Lib_Conversions.c, 93 :: 		
0x1ED8	0xB902    CBNZ	R2, L_ByteToStr5
; output end address is: 0 (R0)
; input end address is: 20 (R5)
; DigitPos end address is: 4 (R1)
;__Lib_Conversions.c, 94 :: 		
0x1EDA	0xE002    B	L_ByteToStr4
L_ByteToStr5:
;__Lib_Conversions.c, 95 :: 		
; DigitPos start address is: 4 (R1)
; input start address is: 20 (R5)
; output start address is: 0 (R0)
0x1EDC	0x1E49    SUBS	R1, R1, #1
0x1EDE	0xB2C9    UXTB	R1, R1
;__Lib_Conversions.c, 96 :: 		
; output end address is: 0 (R0)
; input end address is: 20 (R5)
; DigitPos end address is: 4 (R1)
0x1EE0	0xE7EC    B	L_ByteToStr3
L_ByteToStr4:
;__Lib_Conversions.c, 97 :: 		
L_end_ByteToStr:
0x1EE2	0xB001    ADD	SP, SP, #4
0x1EE4	0x4770    BX	LR
; end of _ByteToStr
_IntToStr:
;__Lib_Conversions.c, 211 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x24C4	0xB081    SUB	SP, SP, #4
0x24C6	0xF8CDE000  STR	LR, [SP, #0]
0x24CA	0x460E    MOV	R6, R1
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 0 (R0)
; output start address is: 24 (R6)
;__Lib_Conversions.c, 217 :: 		
; negative start address is: 4 (R1)
0x24CC	0x2100    MOVS	R1, #0
;__Lib_Conversions.c, 218 :: 		
; inword start address is: 12 (R3)
0x24CE	0xB283    UXTH	R3, R0
;__Lib_Conversions.c, 219 :: 		
0x24D0	0x2800    CMP	R0, #0
0x24D2	0xDA05    BGE	L__IntToStr165
; inword end address is: 12 (R3)
;__Lib_Conversions.c, 220 :: 		
0x24D4	0x2101    MOVS	R1, #1
;__Lib_Conversions.c, 221 :: 		
0x24D6	0x4240    RSBS	R0, R0, #0
0x24D8	0xB280    UXTH	R0, R0
; input end address is: 0 (R0)
; inword start address is: 0 (R0)
0x24DA	0xB280    UXTH	R0, R0
; negative end address is: 4 (R1)
; inword end address is: 0 (R0)
0x24DC	0xB28F    UXTH	R7, R1
;__Lib_Conversions.c, 222 :: 		
0x24DE	0xE001    B	L_IntToStr37
L__IntToStr165:
;__Lib_Conversions.c, 219 :: 		
0x24E0	0xB298    UXTH	R0, R3
0x24E2	0xB28F    UXTH	R7, R1
;__Lib_Conversions.c, 222 :: 		
L_IntToStr37:
;__Lib_Conversions.c, 223 :: 		
; inword start address is: 0 (R0)
; negative start address is: 28 (R7)
0x24E4	0x4631    MOV	R1, R6
; inword end address is: 0 (R0)
0x24E6	0xF7FEFA95  BL	_WordToStr+0
;__Lib_Conversions.c, 225 :: 		
; i start address is: 4 (R1)
0x24EA	0x2106    MOVS	R1, #6
; output end address is: 24 (R6)
; negative end address is: 28 (R7)
; i end address is: 4 (R1)
0x24EC	0x4634    MOV	R4, R6
0x24EE	0xB2B8    UXTH	R0, R7
;__Lib_Conversions.c, 226 :: 		
L_IntToStr38:
; i start address is: 4 (R1)
; negative start address is: 0 (R0)
; output start address is: 16 (R4)
0x24F0	0x2900    CMP	R1, #0
0x24F2	0xD908    BLS	L_IntToStr39
;__Lib_Conversions.c, 227 :: 		
0x24F4	0x1863    ADDS	R3, R4, R1
0x24F6	0x1E4A    SUBS	R2, R1, #1
0x24F8	0xB292    UXTH	R2, R2
0x24FA	0x18A2    ADDS	R2, R4, R2
0x24FC	0x7812    LDRB	R2, [R2, #0]
0x24FE	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 228 :: 		
0x2500	0x1E49    SUBS	R1, R1, #1
0x2502	0xB289    UXTH	R1, R1
;__Lib_Conversions.c, 229 :: 		
; i end address is: 4 (R1)
0x2504	0xE7F4    B	L_IntToStr38
L_IntToStr39:
;__Lib_Conversions.c, 230 :: 		
0x2506	0x2220    MOVS	R2, #32
0x2508	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 231 :: 		
0x250A	0xB170    CBZ	R0, L_IntToStr40
; negative end address is: 0 (R0)
;__Lib_Conversions.c, 232 :: 		
; i start address is: 0 (R0)
0x250C	0x2000    MOVS	R0, #0
; output end address is: 16 (R4)
; i end address is: 0 (R0)
0x250E	0xB281    UXTH	R1, R0
0x2510	0x4620    MOV	R0, R4
;__Lib_Conversions.c, 233 :: 		
L_IntToStr41:
; i start address is: 4 (R1)
; output start address is: 0 (R0)
0x2512	0x1842    ADDS	R2, R0, R1
0x2514	0x7812    LDRB	R2, [R2, #0]
0x2516	0x2A20    CMP	R2, #32
0x2518	0xD102    BNE	L_IntToStr42
0x251A	0x1C49    ADDS	R1, R1, #1
0x251C	0xB289    UXTH	R1, R1
0x251E	0xE7F8    B	L_IntToStr41
L_IntToStr42:
;__Lib_Conversions.c, 234 :: 		
0x2520	0x1E4A    SUBS	R2, R1, #1
0x2522	0xB292    UXTH	R2, R2
; i end address is: 4 (R1)
;__Lib_Conversions.c, 235 :: 		
0x2524	0x1883    ADDS	R3, R0, R2
; output end address is: 0 (R0)
0x2526	0x222D    MOVS	R2, #45
0x2528	0x701A    STRB	R2, [R3, #0]
L_IntToStr40:
;__Lib_Conversions.c, 236 :: 		
L_end_IntToStr:
0x252A	0xF8DDE000  LDR	LR, [SP, #0]
0x252E	0xB001    ADD	SP, SP, #4
0x2530	0x4770    BX	LR
; end of _IntToStr
_WordToStr:
;__Lib_Conversions.c, 114 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x0A14	0xB081    SUB	SP, SP, #4
0x0A16	0x460A    MOV	R2, R1
0x0A18	0xB281    UXTH	R1, R0
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 4 (R1)
; output start address is: 8 (R2)
;__Lib_Conversions.c, 119 :: 		
; len start address is: 0 (R0)
0x0A1A	0x2000    MOVS	R0, #0
; input end address is: 4 (R1)
; output end address is: 8 (R2)
; len end address is: 0 (R0)
0x0A1C	0xB28D    UXTH	R5, R1
0x0A1E	0x4611    MOV	R1, R2
L_WordToStr11:
; len start address is: 0 (R0)
; output start address is: 4 (R1)
; input start address is: 20 (R5)
0x0A20	0x2805    CMP	R0, #5
0x0A22	0xD205    BCS	L_WordToStr12
;__Lib_Conversions.c, 120 :: 		
0x0A24	0x180B    ADDS	R3, R1, R0
0x0A26	0x2220    MOVS	R2, #32
0x0A28	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 119 :: 		
0x0A2A	0x1C40    ADDS	R0, R0, #1
0x0A2C	0xB2C0    UXTB	R0, R0
;__Lib_Conversions.c, 120 :: 		
0x0A2E	0xE7F7    B	L_WordToStr11
L_WordToStr12:
;__Lib_Conversions.c, 121 :: 		
0x0A30	0x180B    ADDS	R3, R1, R0
0x0A32	0x2200    MOVS	R2, #0
0x0A34	0x701A    STRB	R2, [R3, #0]
0x0A36	0x1E40    SUBS	R0, R0, #1
0x0A38	0xB2C0    UXTB	R0, R0
; output end address is: 4 (R1)
; len end address is: 0 (R0)
;__Lib_Conversions.c, 123 :: 		
L_WordToStr14:
;__Lib_Conversions.c, 124 :: 		
; len start address is: 0 (R0)
; input start address is: 20 (R5)
; output start address is: 4 (R1)
0x0A3A	0x180C    ADDS	R4, R1, R0
0x0A3C	0x230A    MOVS	R3, #10
0x0A3E	0xFBB5F2F3  UDIV	R2, R5, R3
0x0A42	0xFB035212  MLS	R2, R3, R2, R5
0x0A46	0xB292    UXTH	R2, R2
0x0A48	0x3230    ADDS	R2, #48
0x0A4A	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 125 :: 		
0x0A4C	0x220A    MOVS	R2, #10
0x0A4E	0xFBB5F2F2  UDIV	R2, R5, R2
0x0A52	0xB292    UXTH	R2, R2
0x0A54	0xB295    UXTH	R5, R2
; input end address is: 20 (R5)
;__Lib_Conversions.c, 126 :: 		
0x0A56	0xB902    CBNZ	R2, L_WordToStr16
; output end address is: 4 (R1)
; input end address is: 20 (R5)
; len end address is: 0 (R0)
;__Lib_Conversions.c, 127 :: 		
0x0A58	0xE002    B	L_WordToStr15
L_WordToStr16:
;__Lib_Conversions.c, 128 :: 		
; len start address is: 0 (R0)
; input start address is: 20 (R5)
; output start address is: 4 (R1)
0x0A5A	0x1E40    SUBS	R0, R0, #1
0x0A5C	0xB2C0    UXTB	R0, R0
;__Lib_Conversions.c, 129 :: 		
; output end address is: 4 (R1)
; input end address is: 20 (R5)
; len end address is: 0 (R0)
0x0A5E	0xE7EC    B	L_WordToStr14
L_WordToStr15:
;__Lib_Conversions.c, 130 :: 		
L_end_WordToStr:
0x0A60	0xB001    ADD	SP, SP, #4
0x0A62	0x4770    BX	LR
; end of _WordToStr
_TFT_Rectangle:
;__Lib_TFT.c, 916 :: 		
0x1FF8	0xB088    SUB	SP, SP, #32
0x1FFA	0xF8CDE000  STR	LR, [SP, #0]
0x1FFE	0xF8AD0010  STRH	R0, [SP, #16]
0x2002	0xF8AD1014  STRH	R1, [SP, #20]
0x2006	0xF8AD2018  STRH	R2, [SP, #24]
0x200A	0xF8AD301C  STRH	R3, [SP, #28]
;__Lib_TFT.c, 922 :: 		
0x200E	0x4C8C    LDR	R4, [PC, #560]
0x2010	0x7824    LDRB	R4, [R4, #0]
0x2012	0x0865    LSRS	R5, R4, #1
0x2014	0xB2ED    UXTB	R5, R5
0x2016	0xF9BD4010  LDRSH	R4, [SP, #16]
0x201A	0x1B64    SUB	R4, R4, R5
0x201C	0xB224    SXTH	R4, R4
; loc_x_up_lft start address is: 12 (R3)
0x201E	0xB223    SXTH	R3, R4
;__Lib_TFT.c, 923 :: 		
0x2020	0x2C00    CMP	R4, #0
0x2022	0xDA03    BGE	L_TFT_Rectangle103
;__Lib_TFT.c, 924 :: 		
0x2024	0x2300    MOVS	R3, #0
0x2026	0xB21B    SXTH	R3, R3
0x2028	0xB218    SXTH	R0, R3
0x202A	0xE009    B	L_TFT_Rectangle104
L_TFT_Rectangle103:
;__Lib_TFT.c, 925 :: 		
0x202C	0x4C85    LDR	R4, [PC, #532]
0x202E	0x8824    LDRH	R4, [R4, #0]
0x2030	0x42A3    CMP	R3, R4
0x2032	0xD304    BCC	L__TFT_Rectangle965
; loc_x_up_lft end address is: 12 (R3)
;__Lib_TFT.c, 926 :: 		
0x2034	0x4C83    LDR	R4, [PC, #524]
0x2036	0x8824    LDRH	R4, [R4, #0]
0x2038	0x1E63    SUBS	R3, R4, #1
0x203A	0xB21B    SXTH	R3, R3
; loc_x_up_lft start address is: 12 (R3)
; loc_x_up_lft end address is: 12 (R3)
0x203C	0xE7FF    B	L_TFT_Rectangle105
L__TFT_Rectangle965:
;__Lib_TFT.c, 925 :: 		
;__Lib_TFT.c, 926 :: 		
L_TFT_Rectangle105:
; loc_x_up_lft start address is: 12 (R3)
0x203E	0xB218    SXTH	R0, R3
; loc_x_up_lft end address is: 12 (R3)
L_TFT_Rectangle104:
;__Lib_TFT.c, 928 :: 		
; loc_x_up_lft start address is: 0 (R0)
0x2040	0x4C7F    LDR	R4, [PC, #508]
0x2042	0x7824    LDRB	R4, [R4, #0]
0x2044	0x1E64    SUBS	R4, R4, #1
0x2046	0xB224    SXTH	R4, R4
0x2048	0x1065    ASRS	R5, R4, #1
0x204A	0xB22D    SXTH	R5, R5
0x204C	0xF9BD4018  LDRSH	R4, [SP, #24]
0x2050	0x1964    ADDS	R4, R4, R5
0x2052	0xB224    SXTH	R4, R4
; loc_x_bt_rght start address is: 20 (R5)
0x2054	0xB225    SXTH	R5, R4
;__Lib_TFT.c, 929 :: 		
0x2056	0x2C00    CMP	R4, #0
0x2058	0xDA03    BGE	L_TFT_Rectangle106
;__Lib_TFT.c, 930 :: 		
0x205A	0x2500    MOVS	R5, #0
0x205C	0xB22D    SXTH	R5, R5
0x205E	0xB229    SXTH	R1, R5
0x2060	0xE009    B	L_TFT_Rectangle107
L_TFT_Rectangle106:
;__Lib_TFT.c, 931 :: 		
0x2062	0x4C78    LDR	R4, [PC, #480]
0x2064	0x8824    LDRH	R4, [R4, #0]
0x2066	0x42A5    CMP	R5, R4
0x2068	0xD304    BCC	L__TFT_Rectangle966
; loc_x_bt_rght end address is: 20 (R5)
;__Lib_TFT.c, 932 :: 		
0x206A	0x4C76    LDR	R4, [PC, #472]
0x206C	0x8824    LDRH	R4, [R4, #0]
0x206E	0x1E65    SUBS	R5, R4, #1
0x2070	0xB22D    SXTH	R5, R5
; loc_x_bt_rght start address is: 20 (R5)
; loc_x_bt_rght end address is: 20 (R5)
0x2072	0xE7FF    B	L_TFT_Rectangle108
L__TFT_Rectangle966:
;__Lib_TFT.c, 931 :: 		
;__Lib_TFT.c, 932 :: 		
L_TFT_Rectangle108:
; loc_x_bt_rght start address is: 20 (R5)
0x2074	0xB229    SXTH	R1, R5
; loc_x_bt_rght end address is: 20 (R5)
L_TFT_Rectangle107:
;__Lib_TFT.c, 934 :: 		
; loc_x_bt_rght start address is: 4 (R1)
0x2076	0x4C72    LDR	R4, [PC, #456]
0x2078	0x7824    LDRB	R4, [R4, #0]
0x207A	0xB1FC    CBZ	R4, L_TFT_Rectangle109
;__Lib_TFT.c, 935 :: 		
0x207C	0xF8AD1004  STRH	R1, [SP, #4]
0x2080	0xF8AD0006  STRH	R0, [SP, #6]
0x2084	0xF9BD2014  LDRSH	R2, [SP, #20]
0x2088	0xF7FEFA86  BL	_TFT_H_Line+0
0x208C	0xF9BD0006  LDRSH	R0, [SP, #6]
0x2090	0xF9BD1004  LDRSH	R1, [SP, #4]
;__Lib_TFT.c, 936 :: 		
0x2094	0xF9BD201C  LDRSH	R2, [SP, #28]
; loc_x_bt_rght end address is: 4 (R1)
; loc_x_up_lft end address is: 0 (R0)
0x2098	0xF7FEFA7E  BL	_TFT_H_Line+0
;__Lib_TFT.c, 937 :: 		
0x209C	0xF9BD2010  LDRSH	R2, [SP, #16]
0x20A0	0xF9BD101C  LDRSH	R1, [SP, #28]
0x20A4	0xF9BD0014  LDRSH	R0, [SP, #20]
0x20A8	0xF7FEF918  BL	_TFT_V_Line+0
;__Lib_TFT.c, 938 :: 		
0x20AC	0xF9BD2018  LDRSH	R2, [SP, #24]
0x20B0	0xF9BD101C  LDRSH	R1, [SP, #28]
0x20B4	0xF9BD0014  LDRSH	R0, [SP, #20]
0x20B8	0xF7FEF910  BL	_TFT_V_Line+0
;__Lib_TFT.c, 939 :: 		
L_TFT_Rectangle109:
;__Lib_TFT.c, 941 :: 		
0x20BC	0x4C62    LDR	R4, [PC, #392]
0x20BE	0x7824    LDRB	R4, [R4, #0]
0x20C0	0x2C00    CMP	R4, #0
0x20C2	0xF00080B8  BEQ	L_TFT_Rectangle110
;__Lib_TFT.c, 942 :: 		
0x20C6	0x4C61    LDR	R4, [PC, #388]
0x20C8	0x8824    LDRH	R4, [R4, #0]
0x20CA	0xF8AD400C  STRH	R4, [SP, #12]
;__Lib_TFT.c, 943 :: 		
0x20CE	0x4F5C    LDR	R7, [PC, #368]
0x20D0	0x783C    LDRB	R4, [R7, #0]
0x20D2	0xF88D400E  STRB	R4, [SP, #14]
;__Lib_TFT.c, 945 :: 		
0x20D6	0x463C    MOV	R4, R7
0x20D8	0x7824    LDRB	R4, [R4, #0]
0x20DA	0x1C64    ADDS	R4, R4, #1
0x20DC	0xB224    SXTH	R4, R4
0x20DE	0x1066    ASRS	R6, R4, #1
;__Lib_TFT.c, 946 :: 		
0x20E0	0xB2B5    UXTH	R5, R6
0x20E2	0xF9BD4010  LDRSH	R4, [SP, #16]
0x20E6	0x1964    ADDS	R4, R4, R5
0x20E8	0xF8AD4010  STRH	R4, [SP, #16]
;__Lib_TFT.c, 947 :: 		
0x20EC	0xB2B5    UXTH	R5, R6
0x20EE	0xF9BD4014  LDRSH	R4, [SP, #20]
0x20F2	0x1964    ADDS	R4, R4, R5
0x20F4	0xF8AD4014  STRH	R4, [SP, #20]
;__Lib_TFT.c, 949 :: 		
0x20F8	0x463C    MOV	R4, R7
0x20FA	0x7824    LDRB	R4, [R4, #0]
0x20FC	0x1CA4    ADDS	R4, R4, #2
0x20FE	0xB224    SXTH	R4, R4
0x2100	0x1066    ASRS	R6, R4, #1
;__Lib_TFT.c, 950 :: 		
0x2102	0xB2B5    UXTH	R5, R6
0x2104	0xF9BD4018  LDRSH	R4, [SP, #24]
0x2108	0x1B64    SUB	R4, R4, R5
0x210A	0xF8AD4018  STRH	R4, [SP, #24]
;__Lib_TFT.c, 951 :: 		
0x210E	0xB2B5    UXTH	R5, R6
0x2110	0xF9BD401C  LDRSH	R4, [SP, #28]
0x2114	0x1B64    SUB	R4, R4, R5
0x2116	0xF8AD401C  STRH	R4, [SP, #28]
;__Lib_TFT.c, 953 :: 		
0x211A	0x4C4D    LDR	R4, [PC, #308]
0x211C	0x7824    LDRB	R4, [R4, #0]
0x211E	0x2C00    CMP	R4, #0
0x2120	0xF0008063  BEQ	L_TFT_Rectangle111
;__Lib_TFT.c, 954 :: 		
0x2124	0x4C4B    LDR	R4, [PC, #300]
0x2126	0x7824    LDRB	R4, [R4, #0]
0x2128	0xBB7C    CBNZ	R4, L_TFT_Rectangle112
;__Lib_TFT.c, 955 :: 		
0x212A	0xF9BD4014  LDRSH	R4, [SP, #20]
0x212E	0xF8AD400A  STRH	R4, [SP, #10]
L_TFT_Rectangle113:
0x2132	0xF9BD501C  LDRSH	R5, [SP, #28]
0x2136	0xF8BD400A  LDRH	R4, [SP, #10]
0x213A	0x42AC    CMP	R4, R5
0x213C	0xD824    BHI	L_TFT_Rectangle114
;__Lib_TFT.c, 956 :: 		
0x213E	0xF9BD5014  LDRSH	R5, [SP, #20]
0x2142	0xF9BD401C  LDRSH	R4, [SP, #28]
0x2146	0x1B67    SUB	R7, R4, R5
0x2148	0xF9BD5014  LDRSH	R5, [SP, #20]
0x214C	0xF8BD400A  LDRH	R4, [SP, #10]
0x2150	0x1B66    SUB	R6, R4, R5
0x2152	0x4C41    LDR	R4, [PC, #260]
0x2154	0x8825    LDRH	R5, [R4, #0]
0x2156	0x4C41    LDR	R4, [PC, #260]
0x2158	0x8824    LDRH	R4, [R4, #0]
0x215A	0xB2BB    UXTH	R3, R7
0x215C	0xB2B2    UXTH	R2, R6
0x215E	0xB2A9    UXTH	R1, R5
0x2160	0xB2A0    UXTH	R0, R4
0x2162	0xF7FEF935  BL	_TFT_GetCurrentColor+0
;__Lib_TFT.c, 957 :: 		
0x2166	0x2101    MOVS	R1, #1
0x2168	0xF000F998  BL	_TFT_Set_Pen+0
;__Lib_TFT.c, 958 :: 		
0x216C	0xF8BD200A  LDRH	R2, [SP, #10]
0x2170	0xF9BD1018  LDRSH	R1, [SP, #24]
0x2174	0xF9BD0010  LDRSH	R0, [SP, #16]
0x2178	0xF7FEFA0E  BL	_TFT_H_Line+0
;__Lib_TFT.c, 955 :: 		
0x217C	0xF8BD400A  LDRH	R4, [SP, #10]
0x2180	0x1C64    ADDS	R4, R4, #1
0x2182	0xF8AD400A  STRH	R4, [SP, #10]
;__Lib_TFT.c, 959 :: 		
0x2186	0xE7D4    B	L_TFT_Rectangle113
L_TFT_Rectangle114:
;__Lib_TFT.c, 960 :: 		
0x2188	0xE02E    B	L_TFT_Rectangle116
L_TFT_Rectangle112:
;__Lib_TFT.c, 961 :: 		
0x218A	0xF9BD4010  LDRSH	R4, [SP, #16]
0x218E	0xF8AD4008  STRH	R4, [SP, #8]
L_TFT_Rectangle117:
0x2192	0xF9BD5018  LDRSH	R5, [SP, #24]
0x2196	0xF8BD4008  LDRH	R4, [SP, #8]
0x219A	0x42AC    CMP	R4, R5
0x219C	0xD824    BHI	L_TFT_Rectangle118
;__Lib_TFT.c, 962 :: 		
0x219E	0xF9BD5010  LDRSH	R5, [SP, #16]
0x21A2	0xF9BD4018  LDRSH	R4, [SP, #24]
0x21A6	0x1B67    SUB	R7, R4, R5
0x21A8	0xF9BD5010  LDRSH	R5, [SP, #16]
0x21AC	0xF8BD4008  LDRH	R4, [SP, #8]
0x21B0	0x1B66    SUB	R6, R4, R5
0x21B2	0x4C29    LDR	R4, [PC, #164]
0x21B4	0x8825    LDRH	R5, [R4, #0]
0x21B6	0x4C29    LDR	R4, [PC, #164]
0x21B8	0x8824    LDRH	R4, [R4, #0]
0x21BA	0xB2BB    UXTH	R3, R7
0x21BC	0xB2B2    UXTH	R2, R6
0x21BE	0xB2A9    UXTH	R1, R5
0x21C0	0xB2A0    UXTH	R0, R4
0x21C2	0xF7FEF905  BL	_TFT_GetCurrentColor+0
;__Lib_TFT.c, 963 :: 		
0x21C6	0x2101    MOVS	R1, #1
0x21C8	0xF000F968  BL	_TFT_Set_Pen+0
;__Lib_TFT.c, 964 :: 		
0x21CC	0xF8BD2008  LDRH	R2, [SP, #8]
0x21D0	0xF9BD101C  LDRSH	R1, [SP, #28]
0x21D4	0xF9BD0014  LDRSH	R0, [SP, #20]
0x21D8	0xF7FEF880  BL	_TFT_V_Line+0
;__Lib_TFT.c, 961 :: 		
0x21DC	0xF8BD4008  LDRH	R4, [SP, #8]
0x21E0	0x1C64    ADDS	R4, R4, #1
0x21E2	0xF8AD4008  STRH	R4, [SP, #8]
;__Lib_TFT.c, 965 :: 		
0x21E6	0xE7D4    B	L_TFT_Rectangle117
L_TFT_Rectangle118:
;__Lib_TFT.c, 966 :: 		
L_TFT_Rectangle116:
;__Lib_TFT.c, 967 :: 		
0x21E8	0xE01D    B	L_TFT_Rectangle120
L_TFT_Rectangle111:
;__Lib_TFT.c, 968 :: 		
0x21EA	0x4C1D    LDR	R4, [PC, #116]
0x21EC	0x8824    LDRH	R4, [R4, #0]
0x21EE	0x2101    MOVS	R1, #1
0x21F0	0xB2A0    UXTH	R0, R4
0x21F2	0xF000F953  BL	_TFT_Set_Pen+0
;__Lib_TFT.c, 969 :: 		
0x21F6	0xF9BD4014  LDRSH	R4, [SP, #20]
0x21FA	0xF8AD400A  STRH	R4, [SP, #10]
L_TFT_Rectangle121:
0x21FE	0xF9BD501C  LDRSH	R5, [SP, #28]
0x2202	0xF8BD400A  LDRH	R4, [SP, #10]
0x2206	0x42AC    CMP	R4, R5
0x2208	0xD80D    BHI	L_TFT_Rectangle122
;__Lib_TFT.c, 970 :: 		
0x220A	0xF8BD200A  LDRH	R2, [SP, #10]
0x220E	0xF9BD1018  LDRSH	R1, [SP, #24]
0x2212	0xF9BD0010  LDRSH	R0, [SP, #16]
0x2216	0xF7FEF9BF  BL	_TFT_H_Line+0
;__Lib_TFT.c, 969 :: 		
0x221A	0xF8BD400A  LDRH	R4, [SP, #10]
0x221E	0x1C64    ADDS	R4, R4, #1
0x2220	0xF8AD400A  STRH	R4, [SP, #10]
;__Lib_TFT.c, 970 :: 		
0x2224	0xE7EB    B	L_TFT_Rectangle121
L_TFT_Rectangle122:
;__Lib_TFT.c, 971 :: 		
L_TFT_Rectangle120:
;__Lib_TFT.c, 973 :: 		
0x2226	0xF8BD500C  LDRH	R5, [SP, #12]
0x222A	0x4C08    LDR	R4, [PC, #32]
0x222C	0x8025    STRH	R5, [R4, #0]
;__Lib_TFT.c, 974 :: 		
0x222E	0xF89D500E  LDRB	R5, [SP, #14]
0x2232	0x4C03    LDR	R4, [PC, #12]
0x2234	0x7025    STRB	R5, [R4, #0]
;__Lib_TFT.c, 975 :: 		
L_TFT_Rectangle110:
;__Lib_TFT.c, 976 :: 		
L_end_TFT_Rectangle:
0x2236	0xF8DDE000  LDR	LR, [SP, #0]
0x223A	0xB008    ADD	SP, SP, #32
0x223C	0x4770    BX	LR
0x223E	0xBF00    NOP
0x2240	0x00B22000  	__Lib_TFT_PenWidth+0
0x2244	0x00AE2000  	_TFT_DISP_WIDTH+0
0x2248	0x00B32000  	__Lib_TFT_BrushEnabled+0
0x224C	0x00C02000  	__Lib_TFT_PenColor+0
0x2250	0x00C22000  	__Lib_TFT_GradientEnabled+0
0x2254	0x00C32000  	__Lib_TFT_GradientOrientation+0
0x2258	0x00C62000  	__Lib_TFT_GradColorTo+0
0x225C	0x00C42000  	__Lib_TFT_GradColorFrom+0
0x2260	0x00C82000  	__Lib_TFT_BrushColor+0
; end of _TFT_Rectangle
_TFT_H_Line:
;__Lib_TFT.c, 562 :: 		
0x0598	0xB086    SUB	SP, SP, #24
0x059A	0xF8CDE000  STR	LR, [SP, #0]
0x059E	0xF8AD000C  STRH	R0, [SP, #12]
0x05A2	0xF8AD1010  STRH	R1, [SP, #16]
0x05A6	0xF8AD2014  STRH	R2, [SP, #20]
;__Lib_TFT.c, 567 :: 		
0x05AA	0xF9BD4010  LDRSH	R4, [SP, #16]
0x05AE	0xF9BD300C  LDRSH	R3, [SP, #12]
0x05B2	0x42A3    CMP	R3, R4
0x05B4	0xDD07    BLE	L_TFT_H_Line12
;__Lib_TFT.c, 568 :: 		
; loc start address is: 0 (R0)
0x05B6	0xF9BD000C  LDRSH	R0, [SP, #12]
;__Lib_TFT.c, 569 :: 		
0x05BA	0xF9BD3010  LDRSH	R3, [SP, #16]
0x05BE	0xF8AD300C  STRH	R3, [SP, #12]
;__Lib_TFT.c, 570 :: 		
0x05C2	0xF8AD0010  STRH	R0, [SP, #16]
; loc end address is: 0 (R0)
;__Lib_TFT.c, 571 :: 		
L_TFT_H_Line12:
;__Lib_TFT.c, 573 :: 		
0x05C6	0xF9BD300C  LDRSH	R3, [SP, #12]
0x05CA	0x2B00    CMP	R3, #0
0x05CC	0xDA04    BGE	L_TFT_H_Line13
;__Lib_TFT.c, 574 :: 		
0x05CE	0x2300    MOVS	R3, #0
0x05D0	0xB21B    SXTH	R3, R3
0x05D2	0xF8AD300C  STRH	R3, [SP, #12]
0x05D6	0xE006    B	L_TFT_H_Line14
L_TFT_H_Line13:
;__Lib_TFT.c, 575 :: 		
0x05D8	0x4B4B    LDR	R3, [PC, #300]
0x05DA	0x881C    LDRH	R4, [R3, #0]
0x05DC	0xF9BD300C  LDRSH	R3, [SP, #12]
0x05E0	0x42A3    CMP	R3, R4
0x05E2	0xD300    BCC	L_TFT_H_Line15
;__Lib_TFT.c, 576 :: 		
0x05E4	0xE08C    B	L_end_TFT_H_Line
L_TFT_H_Line15:
L_TFT_H_Line14:
;__Lib_TFT.c, 578 :: 		
0x05E6	0xF9BD3010  LDRSH	R3, [SP, #16]
0x05EA	0x2B00    CMP	R3, #0
0x05EC	0xDA00    BGE	L_TFT_H_Line16
;__Lib_TFT.c, 579 :: 		
0x05EE	0xE087    B	L_end_TFT_H_Line
L_TFT_H_Line16:
;__Lib_TFT.c, 580 :: 		
0x05F0	0x4B45    LDR	R3, [PC, #276]
0x05F2	0x881C    LDRH	R4, [R3, #0]
0x05F4	0xF9BD3010  LDRSH	R3, [SP, #16]
0x05F8	0x42A3    CMP	R3, R4
0x05FA	0xD304    BCC	L_TFT_H_Line18
;__Lib_TFT.c, 581 :: 		
0x05FC	0x4B42    LDR	R3, [PC, #264]
0x05FE	0x881B    LDRH	R3, [R3, #0]
0x0600	0x1E5B    SUBS	R3, R3, #1
0x0602	0xF8AD3010  STRH	R3, [SP, #16]
L_TFT_H_Line18:
;__Lib_TFT.c, 583 :: 		
0x0606	0x2301    MOVS	R3, #1
0x0608	0xF88D3008  STRB	R3, [SP, #8]
L_TFT_H_Line19:
0x060C	0x4B3F    LDR	R3, [PC, #252]
0x060E	0x781C    LDRB	R4, [R3, #0]
0x0610	0xF89D3008  LDRB	R3, [SP, #8]
0x0614	0x42A3    CMP	R3, R4
0x0616	0xF2008073  BHI	L_TFT_H_Line20
;__Lib_TFT.c, 584 :: 		
; offset start address is: 0 (R0)
0x061A	0xF89D0008  LDRB	R0, [SP, #8]
;__Lib_TFT.c, 585 :: 		
0x061E	0xF0000301  AND	R3, R0, #1
0x0622	0xB21B    SXTH	R3, R3
0x0624	0xB91B    CBNZ	R3, L__TFT_H_Line955
;__Lib_TFT.c, 586 :: 		
0x0626	0x4241    RSBS	R1, R0, #0
0x0628	0xB209    SXTH	R1, R1
; offset end address is: 0 (R0)
; offset start address is: 4 (R1)
; offset end address is: 4 (R1)
0x062A	0xB208    SXTH	R0, R1
0x062C	0xE7FF    B	L_TFT_H_Line22
L__TFT_H_Line955:
;__Lib_TFT.c, 585 :: 		
;__Lib_TFT.c, 586 :: 		
L_TFT_H_Line22:
;__Lib_TFT.c, 587 :: 		
; offset start address is: 0 (R0)
0x062E	0x1044    ASRS	R4, R0, #1
0x0630	0xB224    SXTH	R4, R4
; offset end address is: 0 (R0)
; offset start address is: 4 (R1)
0x0632	0xB221    SXTH	R1, R4
;__Lib_TFT.c, 589 :: 		
0x0634	0xF9BD3014  LDRSH	R3, [SP, #20]
0x0638	0x191B    ADDS	R3, R3, R4
0x063A	0xB21B    SXTH	R3, R3
0x063C	0x2B00    CMP	R3, #0
0x063E	0xDB08    BLT	L__TFT_H_Line954
0x0640	0xF9BD3014  LDRSH	R3, [SP, #20]
0x0644	0x185C    ADDS	R4, R3, R1
0x0646	0xB224    SXTH	R4, R4
0x0648	0x4B31    LDR	R3, [PC, #196]
0x064A	0x881B    LDRH	R3, [R3, #0]
0x064C	0x429C    CMP	R4, R3
0x064E	0xD200    BCS	L__TFT_H_Line953
0x0650	0xE000    B	L_TFT_H_Line25
; offset end address is: 4 (R1)
L__TFT_H_Line954:
L__TFT_H_Line953:
;__Lib_TFT.c, 590 :: 		
0x0652	0xE04F    B	L_TFT_H_Line21
L_TFT_H_Line25:
;__Lib_TFT.c, 592 :: 		
; offset start address is: 4 (R1)
0x0654	0x4B2F    LDR	R3, [PC, #188]
0x0656	0x781B    LDRB	R3, [R3, #0]
0x0658	0x2B00    CMP	R3, #0
0x065A	0xD135    BNE	L_TFT_H_Line26
;__Lib_TFT.c, 593 :: 		
0x065C	0x2400    MOVS	R4, #0
0x065E	0xB264    SXTB	R4, R4
0x0660	0x4B2D    LDR	R3, [PC, #180]
0x0662	0x601C    STR	R4, [R3, #0]
;__Lib_TFT.c, 594 :: 		
0x0664	0xF000FC06  BL	__Lib_TFT_Is_SSD1963_Set+0
0x0668	0xB160    CBZ	R0, L_TFT_H_Line27
;__Lib_TFT.c, 595 :: 		
0x066A	0xF9BD3014  LDRSH	R3, [SP, #20]
0x066E	0x185C    ADDS	R4, R3, R1
; offset end address is: 4 (R1)
0x0670	0xB2A3    UXTH	R3, R4
0x0672	0xF9BD2010  LDRSH	R2, [SP, #16]
0x0676	0xB2A1    UXTH	R1, R4
0x0678	0xF9BD000C  LDRSH	R0, [SP, #12]
0x067C	0x4C27    LDR	R4, [PC, #156]
0x067E	0x6824    LDR	R4, [R4, #0]
0x0680	0x47A0    BLX	R4
0x0682	0xE008    B	L_TFT_H_Line28
L_TFT_H_Line27:
;__Lib_TFT.c, 597 :: 		
; offset start address is: 4 (R1)
0x0684	0xF9BD3014  LDRSH	R3, [SP, #20]
0x0688	0x185C    ADDS	R4, R3, R1
; offset end address is: 4 (R1)
0x068A	0xB2A1    UXTH	R1, R4
0x068C	0xF9BD000C  LDRSH	R0, [SP, #12]
0x0690	0x4C23    LDR	R4, [PC, #140]
0x0692	0x6824    LDR	R4, [R4, #0]
0x0694	0x47A0    BLX	R4
L_TFT_H_Line28:
;__Lib_TFT.c, 598 :: 		
; loc start address is: 0 (R0)
0x0696	0xF9BD000C  LDRSH	R0, [SP, #12]
; loc end address is: 0 (R0)
L_TFT_H_Line29:
; loc start address is: 0 (R0)
0x069A	0xF9BD3010  LDRSH	R3, [SP, #16]
0x069E	0x4298    CMP	R0, R3
0x06A0	0xD80D    BHI	L_TFT_H_Line30
;__Lib_TFT.c, 599 :: 		
0x06A2	0x4B20    LDR	R3, [PC, #128]
0x06A4	0x881C    LDRH	R4, [R3, #0]
0x06A6	0xF8AD0004  STRH	R0, [SP, #4]
0x06AA	0xB2A0    UXTH	R0, R4
0x06AC	0x4C1E    LDR	R4, [PC, #120]
0x06AE	0x6824    LDR	R4, [R4, #0]
0x06B0	0x47A0    BLX	R4
0x06B2	0xF8BD0004  LDRH	R0, [SP, #4]
;__Lib_TFT.c, 598 :: 		
0x06B6	0x1C41    ADDS	R1, R0, #1
0x06B8	0xB289    UXTH	R1, R1
; loc end address is: 0 (R0)
; loc start address is: 4 (R1)
;__Lib_TFT.c, 600 :: 		
0x06BA	0xB288    UXTH	R0, R1
; loc end address is: 4 (R1)
0x06BC	0xE7ED    B	L_TFT_H_Line29
L_TFT_H_Line30:
;__Lib_TFT.c, 601 :: 		
0x06BE	0x2401    MOVS	R4, #1
0x06C0	0xB264    SXTB	R4, R4
0x06C2	0x4B15    LDR	R3, [PC, #84]
0x06C4	0x601C    STR	R4, [R3, #0]
;__Lib_TFT.c, 602 :: 		
0x06C6	0xE015    B	L_TFT_H_Line32
L_TFT_H_Line26:
;__Lib_TFT.c, 603 :: 		
; loc start address is: 0 (R0)
0x06C8	0xF9BD000C  LDRSH	R0, [SP, #12]
; loc end address is: 0 (R0)
L_TFT_H_Line33:
; loc start address is: 0 (R0)
0x06CC	0xF9BD3010  LDRSH	R3, [SP, #16]
0x06D0	0x4298    CMP	R0, R3
0x06D2	0xD80F    BHI	L_TFT_H_Line34
;__Lib_TFT.c, 604 :: 		
0x06D4	0x4B13    LDR	R3, [PC, #76]
0x06D6	0x881B    LDRH	R3, [R3, #0]
0x06D8	0xF8AD0004  STRH	R0, [SP, #4]
0x06DC	0xB29A    UXTH	R2, R3
0x06DE	0xF9BD1014  LDRSH	R1, [SP, #20]
0x06E2	0xB200    SXTH	R0, R0
0x06E4	0xF000F9BE  BL	_TFT_Dot+0
0x06E8	0xF8BD0004  LDRH	R0, [SP, #4]
;__Lib_TFT.c, 603 :: 		
0x06EC	0x1C43    ADDS	R3, R0, #1
; loc end address is: 0 (R0)
; loc start address is: 4 (R1)
0x06EE	0xB299    UXTH	R1, R3
;__Lib_TFT.c, 605 :: 		
0x06F0	0xB288    UXTH	R0, R1
; loc end address is: 4 (R1)
0x06F2	0xE7EB    B	L_TFT_H_Line33
L_TFT_H_Line34:
;__Lib_TFT.c, 606 :: 		
L_TFT_H_Line32:
;__Lib_TFT.c, 607 :: 		
L_TFT_H_Line21:
;__Lib_TFT.c, 583 :: 		
0x06F4	0xF89D3008  LDRB	R3, [SP, #8]
0x06F8	0x1C5B    ADDS	R3, R3, #1
0x06FA	0xF88D3008  STRB	R3, [SP, #8]
;__Lib_TFT.c, 607 :: 		
0x06FE	0xE785    B	L_TFT_H_Line19
L_TFT_H_Line20:
;__Lib_TFT.c, 608 :: 		
L_end_TFT_H_Line:
0x0700	0xF8DDE000  LDR	LR, [SP, #0]
0x0704	0xB006    ADD	SP, SP, #24
0x0706	0x4770    BX	LR
0x0708	0x00AE2000  	_TFT_DISP_WIDTH+0
0x070C	0x00B22000  	__Lib_TFT_PenWidth+0
0x0710	0x00B02000  	_TFT_DISP_HEIGHT+0
0x0714	0x00322000  	__Lib_TFT___no_acceleration+0
0x0718	0x01BC4223  	TFT_CS+0
0x071C	0x00B42000  	_TFT_SSD1963_Set_Address_Ptr+0
0x0720	0x00B82000  	_TFT_Set_Address_Ptr+0
0x0724	0x00C02000  	__Lib_TFT_PenColor+0
0x0728	0x00BC2000  	_TFT_Write_Data_Ptr+0
; end of _TFT_H_Line
_TFT_V_Line:
;__Lib_TFT.c, 612 :: 		
; x_pos start address is: 8 (R2)
; y_end start address is: 4 (R1)
; y_start start address is: 0 (R0)
0x02DC	0xB086    SUB	SP, SP, #24
0x02DE	0xF8CDE000  STR	LR, [SP, #0]
0x02E2	0xF8AD1004  STRH	R1, [SP, #4]
0x02E6	0xB201    SXTH	R1, R0
0x02E8	0xF9BD0004  LDRSH	R0, [SP, #4]
; x_pos end address is: 8 (R2)
; y_end end address is: 4 (R1)
; y_start end address is: 0 (R0)
; y_start start address is: 4 (R1)
; y_end start address is: 0 (R0)
; x_pos start address is: 8 (R2)
;__Lib_TFT.c, 617 :: 		
0x02EC	0x4281    CMP	R1, R0
0x02EE	0xDD03    BLE	L__TFT_V_Line959
;__Lib_TFT.c, 618 :: 		
; loc start address is: 12 (R3)
0x02F0	0xB28B    UXTH	R3, R1
;__Lib_TFT.c, 619 :: 		
0x02F2	0xB201    SXTH	R1, R0
;__Lib_TFT.c, 620 :: 		
0x02F4	0xB218    SXTH	R0, R3
; loc end address is: 12 (R3)
; y_start end address is: 4 (R1)
; y_end end address is: 0 (R0)
;__Lib_TFT.c, 621 :: 		
0x02F6	0xE7FF    B	L_TFT_V_Line36
L__TFT_V_Line959:
;__Lib_TFT.c, 617 :: 		
;__Lib_TFT.c, 621 :: 		
L_TFT_V_Line36:
;__Lib_TFT.c, 623 :: 		
; y_end start address is: 0 (R0)
; y_start start address is: 4 (R1)
0x02F8	0x2900    CMP	R1, #0
0x02FA	0xDA02    BGE	L_TFT_V_Line37
;__Lib_TFT.c, 624 :: 		
0x02FC	0x2100    MOVS	R1, #0
0x02FE	0xB209    SXTH	R1, R1
0x0300	0xE004    B	L_TFT_V_Line38
L_TFT_V_Line37:
;__Lib_TFT.c, 625 :: 		
0x0302	0x4B2F    LDR	R3, [PC, #188]
0x0304	0x881B    LDRH	R3, [R3, #0]
0x0306	0x4299    CMP	R1, R3
0x0308	0xD300    BCC	L_TFT_V_Line39
; x_pos end address is: 8 (R2)
; y_start end address is: 4 (R1)
; y_end end address is: 0 (R0)
;__Lib_TFT.c, 626 :: 		
0x030A	0xE055    B	L_end_TFT_V_Line
L_TFT_V_Line39:
; y_end start address is: 0 (R0)
; y_start start address is: 4 (R1)
; y_start end address is: 4 (R1)
; x_pos start address is: 8 (R2)
L_TFT_V_Line38:
;__Lib_TFT.c, 628 :: 		
; y_start start address is: 4 (R1)
0x030C	0x2800    CMP	R0, #0
0x030E	0xDA00    BGE	L_TFT_V_Line40
; x_pos end address is: 8 (R2)
; y_start end address is: 4 (R1)
; y_end end address is: 0 (R0)
;__Lib_TFT.c, 629 :: 		
0x0310	0xE052    B	L_end_TFT_V_Line
L_TFT_V_Line40:
;__Lib_TFT.c, 630 :: 		
; y_end start address is: 0 (R0)
; y_start start address is: 4 (R1)
; x_pos start address is: 8 (R2)
0x0312	0x4B2B    LDR	R3, [PC, #172]
0x0314	0x881B    LDRH	R3, [R3, #0]
0x0316	0x4298    CMP	R0, R3
0x0318	0xD305    BCC	L__TFT_V_Line960
; y_end end address is: 0 (R0)
;__Lib_TFT.c, 631 :: 		
0x031A	0x4B29    LDR	R3, [PC, #164]
0x031C	0x881B    LDRH	R3, [R3, #0]
0x031E	0x1E5B    SUBS	R3, R3, #1
; y_end start address is: 0 (R0)
0x0320	0xB218    SXTH	R0, R3
; y_end end address is: 0 (R0)
0x0322	0xB203    SXTH	R3, R0
0x0324	0xE000    B	L_TFT_V_Line42
L__TFT_V_Line960:
;__Lib_TFT.c, 630 :: 		
0x0326	0xB203    SXTH	R3, R0
;__Lib_TFT.c, 631 :: 		
L_TFT_V_Line42:
;__Lib_TFT.c, 633 :: 		
; y_end start address is: 12 (R3)
; thick start address is: 0 (R0)
0x0328	0x2001    MOVS	R0, #1
; x_pos end address is: 8 (R2)
; y_start end address is: 4 (R1)
; y_end end address is: 12 (R3)
; thick end address is: 0 (R0)
0x032A	0xB215    SXTH	R5, R2
0x032C	0xB20A    SXTH	R2, R1
0x032E	0xB219    SXTH	R1, R3
L_TFT_V_Line43:
; thick start address is: 0 (R0)
; y_end start address is: 4 (R1)
; y_start start address is: 8 (R2)
; x_pos start address is: 20 (R5)
0x0330	0x4B24    LDR	R3, [PC, #144]
0x0332	0x781B    LDRB	R3, [R3, #0]
0x0334	0x4298    CMP	R0, R3
0x0336	0xD83F    BHI	L_TFT_V_Line44
;__Lib_TFT.c, 634 :: 		
; offset start address is: 16 (R4)
0x0338	0xB2C4    UXTB	R4, R0
;__Lib_TFT.c, 635 :: 		
0x033A	0xF0040301  AND	R3, R4, #1
0x033E	0xB21B    SXTH	R3, R3
0x0340	0xB913    CBNZ	R3, L__TFT_V_Line961
;__Lib_TFT.c, 636 :: 		
0x0342	0x4264    RSBS	R4, R4, #0
0x0344	0xB224    SXTH	R4, R4
; offset end address is: 16 (R4)
0x0346	0xE7FF    B	L_TFT_V_Line46
L__TFT_V_Line961:
;__Lib_TFT.c, 635 :: 		
;__Lib_TFT.c, 636 :: 		
L_TFT_V_Line46:
;__Lib_TFT.c, 637 :: 		
; offset start address is: 16 (R4)
0x0348	0x1063    ASRS	R3, R4, #1
0x034A	0xB21B    SXTH	R3, R3
; offset end address is: 16 (R4)
; offset start address is: 24 (R6)
0x034C	0xB21E    SXTH	R6, R3
;__Lib_TFT.c, 639 :: 		
0x034E	0x18EB    ADDS	R3, R5, R3
0x0350	0xB21B    SXTH	R3, R3
0x0352	0x2B00    CMP	R3, #0
0x0354	0xDB06    BLT	L__TFT_V_Line958
0x0356	0x19AC    ADDS	R4, R5, R6
0x0358	0xB224    SXTH	R4, R4
0x035A	0x4B1B    LDR	R3, [PC, #108]
0x035C	0x881B    LDRH	R3, [R3, #0]
0x035E	0x429C    CMP	R4, R3
0x0360	0xD200    BCS	L__TFT_V_Line957
0x0362	0xE000    B	L_TFT_V_Line49
; offset end address is: 24 (R6)
L__TFT_V_Line958:
L__TFT_V_Line957:
;__Lib_TFT.c, 640 :: 		
0x0364	0xE025    B	L_TFT_V_Line45
L_TFT_V_Line49:
;__Lib_TFT.c, 642 :: 		
; loc start address is: 28 (R7)
; offset start address is: 24 (R6)
0x0366	0xB297    UXTH	R7, R2
; loc end address is: 28 (R7)
; x_pos end address is: 20 (R5)
; y_start end address is: 8 (R2)
; y_end end address is: 4 (R1)
; thick end address is: 0 (R0)
L_TFT_V_Line50:
; loc start address is: 28 (R7)
; offset start address is: 24 (R6)
; offset end address is: 24 (R6)
; x_pos start address is: 20 (R5)
; y_start start address is: 8 (R2)
; y_end start address is: 4 (R1)
; thick start address is: 0 (R0)
0x0368	0x428F    CMP	R7, R1
0x036A	0xD822    BHI	L_TFT_V_Line51
; offset end address is: 24 (R6)
;__Lib_TFT.c, 643 :: 		
; offset start address is: 24 (R6)
0x036C	0x4B17    LDR	R3, [PC, #92]
0x036E	0x881C    LDRH	R4, [R3, #0]
0x0370	0x19AB    ADDS	R3, R5, R6
0x0372	0xF88D0004  STRB	R0, [SP, #4]
0x0376	0xF8AD1008  STRH	R1, [SP, #8]
0x037A	0xF8AD200C  STRH	R2, [SP, #12]
0x037E	0xF8AD5010  STRH	R5, [SP, #16]
0x0382	0xF8AD6012  STRH	R6, [SP, #18]
0x0386	0xF8AD7014  STRH	R7, [SP, #20]
0x038A	0xB2A2    UXTH	R2, R4
0x038C	0xB239    SXTH	R1, R7
0x038E	0xB218    SXTH	R0, R3
0x0390	0xF000FB68  BL	_TFT_Dot+0
0x0394	0xF8BD7014  LDRH	R7, [SP, #20]
0x0398	0xF9BD6012  LDRSH	R6, [SP, #18]
0x039C	0xF9BD5010  LDRSH	R5, [SP, #16]
0x03A0	0xF9BD200C  LDRSH	R2, [SP, #12]
0x03A4	0xF9BD1008  LDRSH	R1, [SP, #8]
0x03A8	0xF89D0004  LDRB	R0, [SP, #4]
;__Lib_TFT.c, 642 :: 		
0x03AC	0x1C7F    ADDS	R7, R7, #1
0x03AE	0xB2BF    UXTH	R7, R7
;__Lib_TFT.c, 644 :: 		
; offset end address is: 24 (R6)
; loc end address is: 28 (R7)
0x03B0	0xE7DA    B	L_TFT_V_Line50
L_TFT_V_Line51:
;__Lib_TFT.c, 645 :: 		
; y_start end address is: 8 (R2)
; y_end end address is: 4 (R1)
; thick end address is: 0 (R0)
L_TFT_V_Line45:
; x_pos end address is: 20 (R5)
;__Lib_TFT.c, 633 :: 		
; x_pos start address is: 20 (R5)
; y_start start address is: 8 (R2)
; y_end start address is: 4 (R1)
; thick start address is: 0 (R0)
0x03B2	0x1C40    ADDS	R0, R0, #1
0x03B4	0xB2C0    UXTB	R0, R0
;__Lib_TFT.c, 645 :: 		
; x_pos end address is: 20 (R5)
; y_start end address is: 8 (R2)
; y_end end address is: 4 (R1)
; thick end address is: 0 (R0)
0x03B6	0xE7BB    B	L_TFT_V_Line43
L_TFT_V_Line44:
;__Lib_TFT.c, 646 :: 		
L_end_TFT_V_Line:
0x03B8	0xF8DDE000  LDR	LR, [SP, #0]
0x03BC	0xB006    ADD	SP, SP, #24
0x03BE	0x4770    BX	LR
0x03C0	0x00B02000  	_TFT_DISP_HEIGHT+0
0x03C4	0x00B22000  	__Lib_TFT_PenWidth+0
0x03C8	0x00AE2000  	_TFT_DISP_WIDTH+0
0x03CC	0x00C02000  	__Lib_TFT_PenColor+0
; end of _TFT_V_Line
_TFT_GetCurrentColor:
;__Lib_TFT.c, 222 :: 		
; range start address is: 12 (R3)
; distance start address is: 8 (R2)
; end_color start address is: 4 (R1)
; start_color start address is: 0 (R0)
0x03D0	0xB083    SUB	SP, SP, #12
0x03D2	0xF8CDE000  STR	LR, [SP, #0]
0x03D6	0xB287    UXTH	R7, R0
0x03D8	0xFA1FF881  UXTH	R8, R1
0x03DC	0xFA1FF982  UXTH	R9, R2
0x03E0	0xFA1FFA83  UXTH	R10, R3
; range end address is: 12 (R3)
; distance end address is: 8 (R2)
; end_color end address is: 4 (R1)
; start_color end address is: 0 (R0)
; start_color start address is: 28 (R7)
; end_color start address is: 32 (R8)
; distance start address is: 36 (R9)
; range start address is: 40 (R10)
;__Lib_TFT.c, 228 :: 		
0x03E4	0xF1B90F00  CMP	R9, #0
0x03E8	0xD101    BNE	L_TFT_GetCurrentColor0
; end_color end address is: 32 (R8)
; distance end address is: 36 (R9)
; range end address is: 40 (R10)
;__Lib_TFT.c, 229 :: 		
0x03EA	0xB2B8    UXTH	R0, R7
; start_color end address is: 28 (R7)
0x03EC	0xE04C    B	L_end_TFT_GetCurrentColor
L_TFT_GetCurrentColor0:
;__Lib_TFT.c, 230 :: 		
; range start address is: 40 (R10)
; distance start address is: 36 (R9)
; end_color start address is: 32 (R8)
; start_color start address is: 28 (R7)
0x03EE	0x45D1    CMP	R9, R10
0x03F0	0xD102    BNE	L_TFT_GetCurrentColor2
; start_color end address is: 28 (R7)
; distance end address is: 36 (R9)
; range end address is: 40 (R10)
;__Lib_TFT.c, 231 :: 		
0x03F2	0xFA1FF088  UXTH	R0, R8
; end_color end address is: 32 (R8)
0x03F6	0xE047    B	L_end_TFT_GetCurrentColor
L_TFT_GetCurrentColor2:
;__Lib_TFT.c, 233 :: 		
; range start address is: 40 (R10)
; distance start address is: 36 (R9)
; end_color start address is: 32 (R8)
; start_color start address is: 28 (R7)
0x03F8	0xAE02    ADD	R6, SP, #8
0x03FA	0xF10D0506  ADD	R5, SP, #6
0x03FE	0xAC01    ADD	R4, SP, #4
0x0400	0x4633    MOV	R3, R6
0x0402	0x462A    MOV	R2, R5
0x0404	0x4621    MOV	R1, R4
0x0406	0xB2B8    UXTH	R0, R7
; start_color end address is: 28 (R7)
0x0408	0xF7FFFEDA  BL	_TFT_Color16bitToRGB+0
;__Lib_TFT.c, 234 :: 		
0x040C	0xF10D0609  ADD	R6, SP, #9
0x0410	0xF10D0507  ADD	R5, SP, #7
0x0414	0xF10D0405  ADD	R4, SP, #5
0x0418	0x4633    MOV	R3, R6
0x041A	0x462A    MOV	R2, R5
0x041C	0x4621    MOV	R1, R4
0x041E	0xFA1FF088  UXTH	R0, R8
; end_color end address is: 32 (R8)
0x0422	0xF7FFFECD  BL	_TFT_Color16bitToRGB+0
;__Lib_TFT.c, 236 :: 		
0x0426	0xFA1FF689  UXTH	R6, R9
0x042A	0xF89D5005  LDRB	R5, [SP, #5]
0x042E	0xF89D4004  LDRB	R4, [SP, #4]
0x0432	0x1B2C    SUB	R4, R5, R4
0x0434	0xB224    SXTH	R4, R4
0x0436	0x4374    MULS	R4, R6, R4
0x0438	0xFB94F5FA  SDIV	R5, R4, R10
0x043C	0xF89D4004  LDRB	R4, [SP, #4]
0x0440	0xEB040805  ADD	R8, R4, R5, LSL #0
;__Lib_TFT.c, 237 :: 		
0x0444	0xFA1FF689  UXTH	R6, R9
0x0448	0xF89D5007  LDRB	R5, [SP, #7]
0x044C	0xF89D4006  LDRB	R4, [SP, #6]
0x0450	0x1B2C    SUB	R4, R5, R4
0x0452	0xB224    SXTH	R4, R4
0x0454	0x4374    MULS	R4, R6, R4
0x0456	0xFB94F5FA  SDIV	R5, R4, R10
0x045A	0xF89D4006  LDRB	R4, [SP, #6]
0x045E	0x1967    ADDS	R7, R4, R5
;__Lib_TFT.c, 238 :: 		
0x0460	0xFA1FF689  UXTH	R6, R9
; distance end address is: 36 (R9)
0x0464	0xF89D5009  LDRB	R5, [SP, #9]
0x0468	0xF89D4008  LDRB	R4, [SP, #8]
0x046C	0x1B2C    SUB	R4, R5, R4
0x046E	0xB224    SXTH	R4, R4
0x0470	0x4374    MULS	R4, R6, R4
0x0472	0xFB94F5FA  SDIV	R5, R4, R10
; range end address is: 40 (R10)
0x0476	0xF89D4008  LDRB	R4, [SP, #8]
0x047A	0x1964    ADDS	R4, R4, R5
;__Lib_TFT.c, 239 :: 		
0x047C	0xB2E2    UXTB	R2, R4
0x047E	0xB2F9    UXTB	R1, R7
0x0480	0xFA5FF088  UXTB	R0, R8
0x0484	0xF7FFFEEE  BL	_TFT_RGBToColor16bit+0
;__Lib_TFT.c, 241 :: 		
L_end_TFT_GetCurrentColor:
0x0488	0xF8DDE000  LDR	LR, [SP, #0]
0x048C	0xB003    ADD	SP, SP, #12
0x048E	0x4770    BX	LR
; end of _TFT_GetCurrentColor
_TFT_Color16bitToRGB:
;__Lib_TFT.c, 215 :: 		
; rgb_blue start address is: 12 (R3)
; rgb_green start address is: 8 (R2)
; rgb_red start address is: 4 (R1)
; color start address is: 0 (R0)
0x01C0	0xB081    SUB	SP, SP, #4
; rgb_blue end address is: 12 (R3)
; rgb_green end address is: 8 (R2)
; rgb_red end address is: 4 (R1)
; color end address is: 0 (R0)
; color start address is: 0 (R0)
; rgb_red start address is: 4 (R1)
; rgb_green start address is: 8 (R2)
; rgb_blue start address is: 12 (R3)
;__Lib_TFT.c, 216 :: 		
0x01C2	0x0AC4    LSRS	R4, R0, #11
0x01C4	0xB2A4    UXTH	R4, R4
0x01C6	0x00E4    LSLS	R4, R4, #3
0x01C8	0x700C    STRB	R4, [R1, #0]
; rgb_red end address is: 4 (R1)
;__Lib_TFT.c, 217 :: 		
0x01CA	0x0944    LSRS	R4, R0, #5
0x01CC	0xB2A4    UXTH	R4, R4
0x01CE	0x00A4    LSLS	R4, R4, #2
0x01D0	0x7014    STRB	R4, [R2, #0]
; rgb_green end address is: 8 (R2)
;__Lib_TFT.c, 218 :: 		
0x01D2	0x00C4    LSLS	R4, R0, #3
; color end address is: 0 (R0)
0x01D4	0x701C    STRB	R4, [R3, #0]
; rgb_blue end address is: 12 (R3)
;__Lib_TFT.c, 219 :: 		
L_end_TFT_Color16bitToRGB:
0x01D6	0xB001    ADD	SP, SP, #4
0x01D8	0x4770    BX	LR
; end of _TFT_Color16bitToRGB
_TFT_RGBToColor16bit:
;__Lib_TFT.c, 199 :: 		
; rgb_blue start address is: 8 (R2)
; rgb_green start address is: 4 (R1)
; rgb_red start address is: 0 (R0)
0x0264	0xB081    SUB	SP, SP, #4
; rgb_blue end address is: 8 (R2)
; rgb_green end address is: 4 (R1)
; rgb_red end address is: 0 (R0)
; rgb_red start address is: 0 (R0)
; rgb_green start address is: 4 (R1)
; rgb_blue start address is: 8 (R2)
;__Lib_TFT.c, 202 :: 		
0x0266	0x08C3    LSRS	R3, R0, #3
0x0268	0xB2DB    UXTB	R3, R3
; rgb_red end address is: 0 (R0)
;__Lib_TFT.c, 203 :: 		
0x026A	0x02DC    LSLS	R4, R3, #11
0x026C	0xB2A4    UXTH	R4, R4
;__Lib_TFT.c, 205 :: 		
0x026E	0x088B    LSRS	R3, R1, #2
0x0270	0xB2DB    UXTB	R3, R3
; rgb_green end address is: 4 (R1)
;__Lib_TFT.c, 206 :: 		
0x0272	0x015B    LSLS	R3, R3, #5
0x0274	0xB29B    UXTH	R3, R3
0x0276	0x431C    ORRS	R4, R3
0x0278	0xB2A4    UXTH	R4, R4
;__Lib_TFT.c, 209 :: 		
0x027A	0x08D3    LSRS	R3, R2, #3
0x027C	0xB2DB    UXTB	R3, R3
; rgb_blue end address is: 8 (R2)
;__Lib_TFT.c, 211 :: 		
0x027E	0xEA440303  ORR	R3, R4, R3, LSL #0
;__Lib_TFT.c, 212 :: 		
0x0282	0xB298    UXTH	R0, R3
;__Lib_TFT.c, 213 :: 		
L_end_TFT_RGBToColor16bit:
0x0284	0xB001    ADD	SP, SP, #4
0x0286	0x4770    BX	LR
; end of _TFT_RGBToColor16bit
__Lib_System_105_107_InitialSetUpRCCRCC2:
;__Lib_System_105_107.c, 374 :: 		
0x3A60	0xB081    SUB	SP, SP, #4
0x3A62	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_105_107.c, 377 :: 		
; ulRCC_CR start address is: 8 (R2)
0x3A66	0x4A46    LDR	R2, [PC, #280]
;__Lib_System_105_107.c, 378 :: 		
; ulRCC_CFGR start address is: 12 (R3)
0x3A68	0x4B46    LDR	R3, [PC, #280]
;__Lib_System_105_107.c, 379 :: 		
; ulRCC_CFGR2 start address is: 16 (R4)
0x3A6A	0x4C47    LDR	R4, [PC, #284]
;__Lib_System_105_107.c, 380 :: 		
; Fosc_kHz start address is: 4 (R1)
0x3A6C	0x4947    LDR	R1, [PC, #284]
;__Lib_System_105_107.c, 387 :: 		
0x3A6E	0xF64B3080  MOVW	R0, #48000
0x3A72	0x4281    CMP	R1, R0
0x3A74	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC231
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_105_107.c, 388 :: 		
0x3A76	0x4846    LDR	R0, [PC, #280]
0x3A78	0x6800    LDR	R0, [R0, #0]
0x3A7A	0xF0400102  ORR	R1, R0, #2
0x3A7E	0x4844    LDR	R0, [PC, #272]
0x3A80	0x6001    STR	R1, [R0, #0]
0x3A82	0xE011    B	L___Lib_System_105_107_InitialSetUpRCCRCC232
L___Lib_System_105_107_InitialSetUpRCCRCC231:
;__Lib_System_105_107.c, 389 :: 		
; Fosc_kHz start address is: 4 (R1)
0x3A84	0xF64550C0  MOVW	R0, #24000
0x3A88	0x4281    CMP	R1, R0
0x3A8A	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC233
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_105_107.c, 390 :: 		
0x3A8C	0x4840    LDR	R0, [PC, #256]
0x3A8E	0x6800    LDR	R0, [R0, #0]
0x3A90	0xF0400101  ORR	R1, R0, #1
0x3A94	0x483E    LDR	R0, [PC, #248]
0x3A96	0x6001    STR	R1, [R0, #0]
0x3A98	0xE006    B	L___Lib_System_105_107_InitialSetUpRCCRCC234
L___Lib_System_105_107_InitialSetUpRCCRCC233:
;__Lib_System_105_107.c, 392 :: 		
0x3A9A	0x483D    LDR	R0, [PC, #244]
0x3A9C	0x6801    LDR	R1, [R0, #0]
0x3A9E	0xF06F0007  MVN	R0, #7
0x3AA2	0x4001    ANDS	R1, R0
0x3AA4	0x483A    LDR	R0, [PC, #232]
0x3AA6	0x6001    STR	R1, [R0, #0]
L___Lib_System_105_107_InitialSetUpRCCRCC234:
L___Lib_System_105_107_InitialSetUpRCCRCC232:
;__Lib_System_105_107.c, 394 :: 		
0x3AA8	0xF7FFFDF0  BL	__Lib_System_105_107_SystemClockSetDefault+0
;__Lib_System_105_107.c, 396 :: 		
0x3AAC	0x4839    LDR	R0, [PC, #228]
0x3AAE	0x6003    STR	R3, [R0, #0]
;__Lib_System_105_107.c, 397 :: 		
0x3AB0	0x4839    LDR	R0, [PC, #228]
0x3AB2	0x6004    STR	R4, [R0, #0]
; ulRCC_CFGR2 end address is: 16 (R4)
;__Lib_System_105_107.c, 398 :: 		
0x3AB4	0x4839    LDR	R0, [PC, #228]
0x3AB6	0xEA020100  AND	R1, R2, R0, LSL #0
0x3ABA	0x4839    LDR	R0, [PC, #228]
0x3ABC	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 400 :: 		
0x3ABE	0xF0020001  AND	R0, R2, #1
0x3AC2	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC252
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x3AC4	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 401 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC236:
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x3AC6	0x4836    LDR	R0, [PC, #216]
0x3AC8	0x6800    LDR	R0, [R0, #0]
0x3ACA	0xF0000002  AND	R0, R0, #2
0x3ACE	0x2800    CMP	R0, #0
0x3AD0	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC237
;__Lib_System_105_107.c, 402 :: 		
0x3AD2	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC236
L___Lib_System_105_107_InitialSetUpRCCRCC237:
;__Lib_System_105_107.c, 403 :: 		
; ulRCC_CFGR end address is: 4 (R1)
0x3AD4	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC235
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC252:
;__Lib_System_105_107.c, 400 :: 		
0x3AD6	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 403 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC235:
;__Lib_System_105_107.c, 405 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x3AD8	0xF4023080  AND	R0, R2, #65536
0x3ADC	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC253
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 4 (R1)
0x3ADE	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 406 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC239:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x3AE0	0x482F    LDR	R0, [PC, #188]
0x3AE2	0x6800    LDR	R0, [R0, #0]
0x3AE4	0xF4003000  AND	R0, R0, #131072
0x3AE8	0x2800    CMP	R0, #0
0x3AEA	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC240
;__Lib_System_105_107.c, 407 :: 		
0x3AEC	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC239
L___Lib_System_105_107_InitialSetUpRCCRCC240:
;__Lib_System_105_107.c, 408 :: 		
; ulRCC_CR end address is: 8 (R2)
0x3AEE	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC238
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC253:
;__Lib_System_105_107.c, 405 :: 		
0x3AF0	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 408 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC238:
;__Lib_System_105_107.c, 410 :: 		
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x3AF2	0xF0025080  AND	R0, R2, #268435456
0x3AF6	0xB168    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC254
;__Lib_System_105_107.c, 411 :: 		
0x3AF8	0x4829    LDR	R0, [PC, #164]
0x3AFA	0x6800    LDR	R0, [R0, #0]
0x3AFC	0xF0405180  ORR	R1, R0, #268435456
0x3B00	0x4827    LDR	R0, [PC, #156]
0x3B02	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
;__Lib_System_105_107.c, 412 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC242:
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x3B04	0x4826    LDR	R0, [PC, #152]
0x3B06	0x6800    LDR	R0, [R0, #0]
0x3B08	0xF0005000  AND	R0, R0, #536870912
0x3B0C	0x2800    CMP	R0, #0
0x3B0E	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC243
;__Lib_System_105_107.c, 413 :: 		
0x3B10	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC242
L___Lib_System_105_107_InitialSetUpRCCRCC243:
;__Lib_System_105_107.c, 414 :: 		
; ulRCC_CR end address is: 8 (R2)
0x3B12	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC241
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC254:
;__Lib_System_105_107.c, 410 :: 		
;__Lib_System_105_107.c, 414 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC241:
;__Lib_System_105_107.c, 416 :: 		
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x3B14	0xF0026080  AND	R0, R2, #67108864
0x3B18	0xB178    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC255
;__Lib_System_105_107.c, 417 :: 		
0x3B1A	0x4821    LDR	R0, [PC, #132]
0x3B1C	0x6800    LDR	R0, [R0, #0]
0x3B1E	0xF0406180  ORR	R1, R0, #67108864
0x3B22	0x481F    LDR	R0, [PC, #124]
0x3B24	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x3B26	0x4611    MOV	R1, R2
0x3B28	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 418 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC245:
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x3B2A	0x481D    LDR	R0, [PC, #116]
0x3B2C	0x6800    LDR	R0, [R0, #0]
0x3B2E	0xF0006000  AND	R0, R0, #134217728
0x3B32	0x2800    CMP	R0, #0
0x3B34	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC246
;__Lib_System_105_107.c, 419 :: 		
0x3B36	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC245
L___Lib_System_105_107_InitialSetUpRCCRCC246:
;__Lib_System_105_107.c, 420 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x3B38	0xE001    B	L___Lib_System_105_107_InitialSetUpRCCRCC244
; ulRCC_CR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC255:
;__Lib_System_105_107.c, 416 :: 		
0x3B3A	0x4611    MOV	R1, R2
0x3B3C	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 420 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC244:
;__Lib_System_105_107.c, 422 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x3B3E	0xF0017080  AND	R0, R1, #16777216
; ulRCC_CR end address is: 4 (R1)
0x3B42	0xB170    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC256
;__Lib_System_105_107.c, 423 :: 		
0x3B44	0x4816    LDR	R0, [PC, #88]
0x3B46	0x6800    LDR	R0, [R0, #0]
0x3B48	0xF0407180  ORR	R1, R0, #16777216
0x3B4C	0x4814    LDR	R0, [PC, #80]
0x3B4E	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
0x3B50	0x4611    MOV	R1, R2
;__Lib_System_105_107.c, 424 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC248:
; ulRCC_CFGR start address is: 4 (R1)
0x3B52	0x4813    LDR	R0, [PC, #76]
0x3B54	0x6800    LDR	R0, [R0, #0]
0x3B56	0xF0007000  AND	R0, R0, #33554432
0x3B5A	0xB900    CBNZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC249
;__Lib_System_105_107.c, 425 :: 		
0x3B5C	0xE7F9    B	L___Lib_System_105_107_InitialSetUpRCCRCC248
L___Lib_System_105_107_InitialSetUpRCCRCC249:
;__Lib_System_105_107.c, 426 :: 		
0x3B5E	0x460A    MOV	R2, R1
0x3B60	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC247
; ulRCC_CFGR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC256:
;__Lib_System_105_107.c, 422 :: 		
;__Lib_System_105_107.c, 426 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC247:
;__Lib_System_105_107.c, 430 :: 		
; ulRCC_CFGR start address is: 8 (R2)
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC250:
; ulRCC_CFGR start address is: 8 (R2)
0x3B62	0x480C    LDR	R0, [PC, #48]
0x3B64	0x6800    LDR	R0, [R0, #0]
0x3B66	0xF000010C  AND	R1, R0, #12
0x3B6A	0x0090    LSLS	R0, R2, #2
0x3B6C	0xF000000C  AND	R0, R0, #12
0x3B70	0x4281    CMP	R1, R0
0x3B72	0xD000    BEQ	L___Lib_System_105_107_InitialSetUpRCCRCC251
;__Lib_System_105_107.c, 431 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x3B74	0xE7F5    B	L___Lib_System_105_107_InitialSetUpRCCRCC250
L___Lib_System_105_107_InitialSetUpRCCRCC251:
;__Lib_System_105_107.c, 432 :: 		
L_end_InitialSetUpRCCRCC2:
0x3B76	0xF8DDE000  LDR	LR, [SP, #0]
0x3B7A	0xB001    ADD	SP, SP, #4
0x3B7C	0x4770    BX	LR
0x3B7E	0xBF00    NOP
0x3B80	0x00810501  	#83951745
0x3B84	0x0402001D  	#1901570
0x3B88	0x06440001  	#67140
0x3B8C	0x19400001  	#72000
0x3B90	0x20004002  	FLASH_ACR+0
0x3B94	0x10044002  	RCC_CFGR+0
0x3B98	0x102C4002  	RCC_CFGR2+0
0x3B9C	0xFFFF000F  	#1048575
0x3BA0	0x10004002  	RCC_CR+0
; end of __Lib_System_105_107_InitialSetUpRCCRCC2
__Lib_System_105_107_SystemClockSetDefault:
;__Lib_System_105_107.c, 347 :: 		
0x368C	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 350 :: 		
0x368E	0x4815    LDR	R0, [PC, #84]
0x3690	0x6800    LDR	R0, [R0, #0]
0x3692	0xF0400101  ORR	R1, R0, #1
0x3696	0x4813    LDR	R0, [PC, #76]
0x3698	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 353 :: 		
0x369A	0x4913    LDR	R1, [PC, #76]
0x369C	0x4813    LDR	R0, [PC, #76]
0x369E	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 356 :: 		
0x36A0	0x4810    LDR	R0, [PC, #64]
0x36A2	0x6801    LDR	R1, [R0, #0]
0x36A4	0x4812    LDR	R0, [PC, #72]
0x36A6	0x4001    ANDS	R1, R0
0x36A8	0x480E    LDR	R0, [PC, #56]
0x36AA	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 359 :: 		
0x36AC	0x480D    LDR	R0, [PC, #52]
0x36AE	0x6801    LDR	R1, [R0, #0]
0x36B0	0xF46F2080  MVN	R0, #262144
0x36B4	0x4001    ANDS	R1, R0
0x36B6	0x480B    LDR	R0, [PC, #44]
0x36B8	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 362 :: 		
0x36BA	0x480C    LDR	R0, [PC, #48]
0x36BC	0x6801    LDR	R1, [R0, #0]
0x36BE	0xF46F00FE  MVN	R0, #8323072
0x36C2	0x4001    ANDS	R1, R0
0x36C4	0x4809    LDR	R0, [PC, #36]
0x36C6	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 365 :: 		
0x36C8	0x4806    LDR	R0, [PC, #24]
0x36CA	0x6801    LDR	R1, [R0, #0]
0x36CC	0xF06F50A0  MVN	R0, #335544320
0x36D0	0x4001    ANDS	R1, R0
0x36D2	0x4804    LDR	R0, [PC, #16]
0x36D4	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 368 :: 		
0x36D6	0xF04F0100  MOV	R1, #0
0x36DA	0x4806    LDR	R0, [PC, #24]
0x36DC	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 372 :: 		
L_end_SystemClockSetDefault:
0x36DE	0xB001    ADD	SP, SP, #4
0x36E0	0x4770    BX	LR
0x36E2	0xBF00    NOP
0x36E4	0x10004002  	RCC_CR+0
0x36E8	0x0000F0FF  	#-251723776
0x36EC	0x10044002  	RCC_CFGR+0
0x36F0	0xFFFFFEF6  	#-17367041
0x36F4	0x102C4002  	RCC_CFGR2+0
; end of __Lib_System_105_107_SystemClockSetDefault
__Lib_System_105_107_InitialSetUpFosc:
;__Lib_System_105_107.c, 434 :: 		
0x39C8	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 435 :: 		
0x39CA	0x4902    LDR	R1, [PC, #8]
0x39CC	0x4802    LDR	R0, [PC, #8]
0x39CE	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 436 :: 		
L_end_InitialSetUpFosc:
0x39D0	0xB001    ADD	SP, SP, #4
0x39D2	0x4770    BX	LR
0x39D4	0x19400001  	#72000
0x39D8	0x00982000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_105_107_InitialSetUpFosc
___GenExcept:
;__Lib_System_105_107.c, 298 :: 		
0x39DC	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 299 :: 		
L___GenExcept27:
0x39DE	0xE7FE    B	L___GenExcept27
;__Lib_System_105_107.c, 300 :: 		
L_end___GenExcept:
0x39E0	0xB001    ADD	SP, SP, #4
0x39E2	0x4770    BX	LR
; end of ___GenExcept
0x44C4	0xB500    PUSH	(R14)
0x44C6	0xF8DFB014  LDR	R11, [PC, #20]
0x44CA	0xF8DFA014  LDR	R10, [PC, #20]
0x44CE	0xF8DFC014  LDR	R12, [PC, #20]
0x44D2	0xF7FFF911  BL	14072
0x44D6	0xBD00    POP	(R15)
0x44D8	0x4770    BX	LR
0x44DA	0xBF00    NOP
0x44DC	0x00002000  	#536870912
0x44E0	0x003A2000  	#536870970
0x44E4	0x44880000  	#17544
0x4544	0xB500    PUSH	(R14)
0x4546	0xF8DFB010  LDR	R11, [PC, #16]
0x454A	0xF8DFA010  LDR	R10, [PC, #16]
0x454E	0xF7FFF8DD  BL	14092
0x4552	0xBD00    POP	(R15)
0x4554	0x4770    BX	LR
0x4556	0xBF00    NOP
0x4558	0x00002000  	#536870912
0x455C	0x00E42000  	#536871140
;__Lib_TFT.c,4303 :: _TFT_defaultFont [2168]
0x3BA4	0x00200000 ;_TFT_defaultFont+0
0x3BA8	0x0010007F ;_TFT_defaultFont+4
0x3BAC	0x00018801 ;_TFT_defaultFont+8
0x3BB0	0x00019803 ;_TFT_defaultFont+12
0x3BB4	0x0001A805 ;_TFT_defaultFont+16
0x3BB8	0x0001B808 ;_TFT_defaultFont+20
0x3BBC	0x0001C807 ;_TFT_defaultFont+24
0x3BC0	0x0001D80D ;_TFT_defaultFont+28
0x3BC4	0x0001F80A ;_TFT_defaultFont+32
0x3BC8	0x00021803 ;_TFT_defaultFont+36
0x3BCC	0x00022805 ;_TFT_defaultFont+40
0x3BD0	0x00023805 ;_TFT_defaultFont+44
0x3BD4	0x00024807 ;_TFT_defaultFont+48
0x3BD8	0x00025809 ;_TFT_defaultFont+52
0x3BDC	0x00027803 ;_TFT_defaultFont+56
0x3BE0	0x00028805 ;_TFT_defaultFont+60
0x3BE4	0x00029803 ;_TFT_defaultFont+64
0x3BE8	0x0002A806 ;_TFT_defaultFont+68
0x3BEC	0x0002B807 ;_TFT_defaultFont+72
0x3BF0	0x0002C807 ;_TFT_defaultFont+76
0x3BF4	0x0002D807 ;_TFT_defaultFont+80
0x3BF8	0x0002E807 ;_TFT_defaultFont+84
0x3BFC	0x0002F807 ;_TFT_defaultFont+88
0x3C00	0x00030807 ;_TFT_defaultFont+92
0x3C04	0x00031807 ;_TFT_defaultFont+96
0x3C08	0x00032807 ;_TFT_defaultFont+100
0x3C0C	0x00033807 ;_TFT_defaultFont+104
0x3C10	0x00034807 ;_TFT_defaultFont+108
0x3C14	0x00035803 ;_TFT_defaultFont+112
0x3C18	0x00036803 ;_TFT_defaultFont+116
0x3C1C	0x00037809 ;_TFT_defaultFont+120
0x3C20	0x00039809 ;_TFT_defaultFont+124
0x3C24	0x0003B809 ;_TFT_defaultFont+128
0x3C28	0x0003D806 ;_TFT_defaultFont+132
0x3C2C	0x0003E809 ;_TFT_defaultFont+136
0x3C30	0x00040809 ;_TFT_defaultFont+140
0x3C34	0x00042807 ;_TFT_defaultFont+144
0x3C38	0x00043807 ;_TFT_defaultFont+148
0x3C3C	0x00044808 ;_TFT_defaultFont+152
0x3C40	0x00045806 ;_TFT_defaultFont+156
0x3C44	0x00046806 ;_TFT_defaultFont+160
0x3C48	0x00047807 ;_TFT_defaultFont+164
0x3C4C	0x00048808 ;_TFT_defaultFont+168
0x3C50	0x00049804 ;_TFT_defaultFont+172
0x3C54	0x0004A805 ;_TFT_defaultFont+176
0x3C58	0x0004B807 ;_TFT_defaultFont+180
0x3C5C	0x0004C806 ;_TFT_defaultFont+184
0x3C60	0x0004D80A ;_TFT_defaultFont+188
0x3C64	0x0004F807 ;_TFT_defaultFont+192
0x3C68	0x00050808 ;_TFT_defaultFont+196
0x3C6C	0x00051807 ;_TFT_defaultFont+200
0x3C70	0x00052808 ;_TFT_defaultFont+204
0x3C74	0x00053808 ;_TFT_defaultFont+208
0x3C78	0x00054807 ;_TFT_defaultFont+212
0x3C7C	0x00055806 ;_TFT_defaultFont+216
0x3C80	0x00056807 ;_TFT_defaultFont+220
0x3C84	0x00057808 ;_TFT_defaultFont+224
0x3C88	0x0005880C ;_TFT_defaultFont+228
0x3C8C	0x0005A808 ;_TFT_defaultFont+232
0x3C90	0x0005B808 ;_TFT_defaultFont+236
0x3C94	0x0005C806 ;_TFT_defaultFont+240
0x3C98	0x0005D805 ;_TFT_defaultFont+244
0x3C9C	0x0005E806 ;_TFT_defaultFont+248
0x3CA0	0x0005F805 ;_TFT_defaultFont+252
0x3CA4	0x00060809 ;_TFT_defaultFont+256
0x3CA8	0x00062808 ;_TFT_defaultFont+260
0x3CAC	0x00063805 ;_TFT_defaultFont+264
0x3CB0	0x00064807 ;_TFT_defaultFont+268
0x3CB4	0x00065807 ;_TFT_defaultFont+272
0x3CB8	0x00066806 ;_TFT_defaultFont+276
0x3CBC	0x00067807 ;_TFT_defaultFont+280
0x3CC0	0x00068807 ;_TFT_defaultFont+284
0x3CC4	0x00069805 ;_TFT_defaultFont+288
0x3CC8	0x0006A807 ;_TFT_defaultFont+292
0x3CCC	0x0006B807 ;_TFT_defaultFont+296
0x3CD0	0x0006C802 ;_TFT_defaultFont+300
0x3CD4	0x0006D803 ;_TFT_defaultFont+304
0x3CD8	0x0006E806 ;_TFT_defaultFont+308
0x3CDC	0x0006F802 ;_TFT_defaultFont+312
0x3CE0	0x0007080A ;_TFT_defaultFont+316
0x3CE4	0x00072807 ;_TFT_defaultFont+320
0x3CE8	0x00073807 ;_TFT_defaultFont+324
0x3CEC	0x00074807 ;_TFT_defaultFont+328
0x3CF0	0x00075807 ;_TFT_defaultFont+332
0x3CF4	0x00076805 ;_TFT_defaultFont+336
0x3CF8	0x00077806 ;_TFT_defaultFont+340
0x3CFC	0x00078805 ;_TFT_defaultFont+344
0x3D00	0x00079807 ;_TFT_defaultFont+348
0x3D04	0x0007A807 ;_TFT_defaultFont+352
0x3D08	0x0007B80A ;_TFT_defaultFont+356
0x3D0C	0x0007D806 ;_TFT_defaultFont+360
0x3D10	0x0007E807 ;_TFT_defaultFont+364
0x3D14	0x0007F806 ;_TFT_defaultFont+368
0x3D18	0x00080806 ;_TFT_defaultFont+372
0x3D1C	0x00081804 ;_TFT_defaultFont+376
0x3D20	0x00082806 ;_TFT_defaultFont+380
0x3D24	0x0008380A ;_TFT_defaultFont+384
0x3D28	0x0008580B ;_TFT_defaultFont+388
0x3D2C	0x00000000 ;_TFT_defaultFont+392
0x3D30	0x00000000 ;_TFT_defaultFont+396
0x3D34	0x00000000 ;_TFT_defaultFont+400
0x3D38	0x00000000 ;_TFT_defaultFont+404
0x3D3C	0x00000000 ;_TFT_defaultFont+408
0x3D40	0x06060606 ;_TFT_defaultFont+412
0x3D44	0x06000606 ;_TFT_defaultFont+416
0x3D48	0x00000006 ;_TFT_defaultFont+420
0x3D4C	0x1B000000 ;_TFT_defaultFont+424
0x3D50	0x001B1B1B ;_TFT_defaultFont+428
0x3D54	0x00000000 ;_TFT_defaultFont+432
0x3D58	0x00000000 ;_TFT_defaultFont+436
0x3D5C	0x00000000 ;_TFT_defaultFont+440
0x3D60	0xFEFE4848 ;_TFT_defaultFont+444
0x3D64	0x127F7F24 ;_TFT_defaultFont+448
0x3D68	0x00000012 ;_TFT_defaultFont+452
0x3D6C	0x08080000 ;_TFT_defaultFont+456
0x3D70	0x0B0B4B3E ;_TFT_defaultFont+460
0x3D74	0x6968683E ;_TFT_defaultFont+464
0x3D78	0x0008083E ;_TFT_defaultFont+468
0x3D7C	0x00000000 ;_TFT_defaultFont+472
0x3D80	0x00000000 ;_TFT_defaultFont+476
0x3D84	0x0233001E ;_TFT_defaultFont+480
0x3D88	0x00B30133 ;_TFT_defaultFont+484
0x3D8C	0x19A00F5E ;_TFT_defaultFont+488
0x3D90	0x19881990 ;_TFT_defaultFont+492
0x3D94	0x00000F00 ;_TFT_defaultFont+496
0x3D98	0x00000000 ;_TFT_defaultFont+500
0x3D9C	0x00000000 ;_TFT_defaultFont+504
0x3DA0	0x00000000 ;_TFT_defaultFont+508
0x3DA4	0x0066003C ;_TFT_defaultFont+512
0x3DA8	0x00660066 ;_TFT_defaultFont+516
0x3DAC	0x0366033C ;_TFT_defaultFont+520
0x3DB0	0x00C601C6 ;_TFT_defaultFont+524
0x3DB4	0x000003BC ;_TFT_defaultFont+528
0x3DB8	0x00000000 ;_TFT_defaultFont+532
0x3DBC	0x06000000 ;_TFT_defaultFont+536
0x3DC0	0x00060606 ;_TFT_defaultFont+540
0x3DC4	0x00000000 ;_TFT_defaultFont+544
0x3DC8	0x00000000 ;_TFT_defaultFont+548
0x3DCC	0x18000000 ;_TFT_defaultFont+552
0x3DD0	0x06060C0C ;_TFT_defaultFont+556
0x3DD4	0x06060606 ;_TFT_defaultFont+560
0x3DD8	0x180C0C06 ;_TFT_defaultFont+564
0x3DDC	0x06000000 ;_TFT_defaultFont+568
0x3DE0	0x18180C0C ;_TFT_defaultFont+572
0x3DE4	0x18181818 ;_TFT_defaultFont+576
0x3DE8	0x060C0C18 ;_TFT_defaultFont+580
0x3DEC	0x18000000 ;_TFT_defaultFont+584
0x3DF0	0x185A3C5A ;_TFT_defaultFont+588
0x3DF4	0x00000000 ;_TFT_defaultFont+592
0x3DF8	0x00000000 ;_TFT_defaultFont+596
0x3DFC	0x00000000 ;_TFT_defaultFont+600
0x3E00	0x00000000 ;_TFT_defaultFont+604
0x3E04	0x00200000 ;_TFT_defaultFont+608
0x3E08	0x00200020 ;_TFT_defaultFont+612
0x3E0C	0x002001FC ;_TFT_defaultFont+616
0x3E10	0x00200020 ;_TFT_defaultFont+620
0x3E14	0x00000000 ;_TFT_defaultFont+624
0x3E18	0x00000000 ;_TFT_defaultFont+628
0x3E1C	0x00000000 ;_TFT_defaultFont+632
0x3E20	0x00000000 ;_TFT_defaultFont+636
0x3E24	0x06000000 ;_TFT_defaultFont+640
0x3E28	0x00030306 ;_TFT_defaultFont+644
0x3E2C	0x00000000 ;_TFT_defaultFont+648
0x3E30	0x00000000 ;_TFT_defaultFont+652
0x3E34	0x0000001F ;_TFT_defaultFont+656
0x3E38	0x00000000 ;_TFT_defaultFont+660
0x3E3C	0x00000000 ;_TFT_defaultFont+664
0x3E40	0x00000000 ;_TFT_defaultFont+668
0x3E44	0x06000000 ;_TFT_defaultFont+672
0x3E48	0x00000006 ;_TFT_defaultFont+676
0x3E4C	0x20000000 ;_TFT_defaultFont+680
0x3E50	0x08101020 ;_TFT_defaultFont+684
0x3E54	0x02040408 ;_TFT_defaultFont+688
0x3E58	0x00010102 ;_TFT_defaultFont+692
0x3E5C	0x00000000 ;_TFT_defaultFont+696
0x3E60	0x6363633E ;_TFT_defaultFont+700
0x3E64	0x63636363 ;_TFT_defaultFont+704
0x3E68	0x0000003E ;_TFT_defaultFont+708
0x3E6C	0x00000000 ;_TFT_defaultFont+712
0x3E70	0x18181E18 ;_TFT_defaultFont+716
0x3E74	0x18181818 ;_TFT_defaultFont+720
0x3E78	0x0000007E ;_TFT_defaultFont+724
0x3E7C	0x00000000 ;_TFT_defaultFont+728
0x3E80	0x6061613E ;_TFT_defaultFont+732
0x3E84	0x060C1830 ;_TFT_defaultFont+736
0x3E88	0x0000007F ;_TFT_defaultFont+740
0x3E8C	0x00000000 ;_TFT_defaultFont+744
0x3E90	0x6060613E ;_TFT_defaultFont+748
0x3E94	0x6160603C ;_TFT_defaultFont+752
0x3E98	0x0000003E ;_TFT_defaultFont+756
0x3E9C	0x00000000 ;_TFT_defaultFont+760
0x3EA0	0x32343830 ;_TFT_defaultFont+764
0x3EA4	0x30307F31 ;_TFT_defaultFont+768
0x3EA8	0x00000030 ;_TFT_defaultFont+772
0x3EAC	0x00000000 ;_TFT_defaultFont+776
0x3EB0	0x3E06067E ;_TFT_defaultFont+780
0x3EB4	0x61606060 ;_TFT_defaultFont+784
0x3EB8	0x0000003E ;_TFT_defaultFont+788
0x3EBC	0x00000000 ;_TFT_defaultFont+792
0x3EC0	0x3F03063C ;_TFT_defaultFont+796
0x3EC4	0x63636363 ;_TFT_defaultFont+800
0x3EC8	0x0000003E ;_TFT_defaultFont+804
0x3ECC	0x00000000 ;_TFT_defaultFont+808
0x3ED0	0x3030607F ;_TFT_defaultFont+812
0x3ED4	0x0C0C1818 ;_TFT_defaultFont+816
0x3ED8	0x0000000C ;_TFT_defaultFont+820
0x3EDC	0x00000000 ;_TFT_defaultFont+824
0x3EE0	0x6363633E ;_TFT_defaultFont+828
0x3EE4	0x6363633E ;_TFT_defaultFont+832
0x3EE8	0x0000003E ;_TFT_defaultFont+836
0x3EEC	0x00000000 ;_TFT_defaultFont+840
0x3EF0	0x6363633E ;_TFT_defaultFont+844
0x3EF4	0x30607E63 ;_TFT_defaultFont+848
0x3EF8	0x0000001E ;_TFT_defaultFont+852
0x3EFC	0x00000000 ;_TFT_defaultFont+856
0x3F00	0x06060000 ;_TFT_defaultFont+860
0x3F04	0x06000000 ;_TFT_defaultFont+864
0x3F08	0x00000006 ;_TFT_defaultFont+868
0x3F0C	0x00000000 ;_TFT_defaultFont+872
0x3F10	0x06060000 ;_TFT_defaultFont+876
0x3F14	0x06000000 ;_TFT_defaultFont+880
0x3F18	0x00030306 ;_TFT_defaultFont+884
0x3F1C	0x00000000 ;_TFT_defaultFont+888
0x3F20	0x00000000 ;_TFT_defaultFont+892
0x3F24	0x01800000 ;_TFT_defaultFont+896
0x3F28	0x00180060 ;_TFT_defaultFont+900
0x3F2C	0x00060006 ;_TFT_defaultFont+904
0x3F30	0x00600018 ;_TFT_defaultFont+908
0x3F34	0x00000180 ;_TFT_defaultFont+912
0x3F38	0x00000000 ;_TFT_defaultFont+916
0x3F3C	0x00000000 ;_TFT_defaultFont+920
0x3F40	0x00000000 ;_TFT_defaultFont+924
0x3F44	0x00000000 ;_TFT_defaultFont+928
0x3F48	0x000001FE ;_TFT_defaultFont+932
0x3F4C	0x01FE0000 ;_TFT_defaultFont+936
0x3F50	0x00000000 ;_TFT_defaultFont+940
0x3F54	0x00000000 ;_TFT_defaultFont+944
0x3F58	0x00000000 ;_TFT_defaultFont+948
0x3F5C	0x00000000 ;_TFT_defaultFont+952
0x3F60	0x00000000 ;_TFT_defaultFont+956
0x3F64	0x00060000 ;_TFT_defaultFont+960
0x3F68	0x00600018 ;_TFT_defaultFont+964
0x3F6C	0x01800180 ;_TFT_defaultFont+968
0x3F70	0x00180060 ;_TFT_defaultFont+972
0x3F74	0x00000006 ;_TFT_defaultFont+976
0x3F78	0x00000000 ;_TFT_defaultFont+980
0x3F7C	0x00000000 ;_TFT_defaultFont+984
0x3F80	0x1830311E ;_TFT_defaultFont+988
0x3F84	0x0C000C0C ;_TFT_defaultFont+992
0x3F88	0x0000000C ;_TFT_defaultFont+996
0x3F8C	0x00000000 ;_TFT_defaultFont+1000
0x3F90	0x00000000 ;_TFT_defaultFont+1004
0x3F94	0x0082007C ;_TFT_defaultFont+1008
0x3F98	0x016D0179 ;_TFT_defaultFont+1012
0x3F9C	0x016D016D ;_TFT_defaultFont+1016
0x3FA0	0x00D9016D ;_TFT_defaultFont+1020
0x3FA4	0x00FC0002 ;_TFT_defaultFont+1024
0x3FA8	0x00000000 ;_TFT_defaultFont+1028
0x3FAC	0x00000000 ;_TFT_defaultFont+1032
0x3FB0	0x00000000 ;_TFT_defaultFont+1036
0x3FB4	0x00380038 ;_TFT_defaultFont+1040
0x3FB8	0x006C006C ;_TFT_defaultFont+1044
0x3FBC	0x00FE00C6 ;_TFT_defaultFont+1048
0x3FC0	0x018300C6 ;_TFT_defaultFont+1052
0x3FC4	0x00000183 ;_TFT_defaultFont+1056
0x3FC8	0x00000000 ;_TFT_defaultFont+1060
0x3FCC	0x00000000 ;_TFT_defaultFont+1064
0x3FD0	0x6363633F ;_TFT_defaultFont+1068
0x3FD4	0x6363633F ;_TFT_defaultFont+1072
0x3FD8	0x0000003F ;_TFT_defaultFont+1076
0x3FDC	0x00000000 ;_TFT_defaultFont+1080
0x3FE0	0x0343433E ;_TFT_defaultFont+1084
0x3FE4	0x43430303 ;_TFT_defaultFont+1088
0x3FE8	0x0000003E ;_TFT_defaultFont+1092
0x3FEC	0x00000000 ;_TFT_defaultFont+1096
0x3FF0	0xC3C3633F ;_TFT_defaultFont+1100
0x3FF4	0x63C3C3C3 ;_TFT_defaultFont+1104
0x3FF8	0x0000003F ;_TFT_defaultFont+1108
0x3FFC	0x00000000 ;_TFT_defaultFont+1112
0x4000	0x0303033F ;_TFT_defaultFont+1116
0x4004	0x0303031F ;_TFT_defaultFont+1120
0x4008	0x0000003F ;_TFT_defaultFont+1124
0x400C	0x00000000 ;_TFT_defaultFont+1128
0x4010	0x0303033F ;_TFT_defaultFont+1132
0x4014	0x0303031F ;_TFT_defaultFont+1136
0x4018	0x00000003 ;_TFT_defaultFont+1140
0x401C	0x00000000 ;_TFT_defaultFont+1144
0x4020	0x0343433E ;_TFT_defaultFont+1148
0x4024	0x63636373 ;_TFT_defaultFont+1152
0x4028	0x0000007E ;_TFT_defaultFont+1156
0x402C	0x00000000 ;_TFT_defaultFont+1160
0x4030	0xC3C3C3C3 ;_TFT_defaultFont+1164
0x4034	0xC3C3C3FF ;_TFT_defaultFont+1168
0x4038	0x000000C3 ;_TFT_defaultFont+1172
0x403C	0x00000000 ;_TFT_defaultFont+1176
0x4040	0x0606060F ;_TFT_defaultFont+1180
0x4044	0x06060606 ;_TFT_defaultFont+1184
0x4048	0x0000000F ;_TFT_defaultFont+1188
0x404C	0x00000000 ;_TFT_defaultFont+1192
0x4050	0x1818181E ;_TFT_defaultFont+1196
0x4054	0x18181818 ;_TFT_defaultFont+1200
0x4058	0x0000000F ;_TFT_defaultFont+1204
0x405C	0x00000000 ;_TFT_defaultFont+1208
0x4060	0x0F1B3363 ;_TFT_defaultFont+1212
0x4064	0x331B0F07 ;_TFT_defaultFont+1216
0x4068	0x00000063 ;_TFT_defaultFont+1220
0x406C	0x00000000 ;_TFT_defaultFont+1224
0x4070	0x03030303 ;_TFT_defaultFont+1228
0x4074	0x03030303 ;_TFT_defaultFont+1232
0x4078	0x0000003F ;_TFT_defaultFont+1236
0x407C	0x00000000 ;_TFT_defaultFont+1240
0x4080	0x00000000 ;_TFT_defaultFont+1244
0x4084	0x03870387 ;_TFT_defaultFont+1248
0x4088	0x034D034D ;_TFT_defaultFont+1252
0x408C	0x03390339 ;_TFT_defaultFont+1256
0x4090	0x03110311 ;_TFT_defaultFont+1260
0x4094	0x00000301 ;_TFT_defaultFont+1264
0x4098	0x00000000 ;_TFT_defaultFont+1268
0x409C	0x00000000 ;_TFT_defaultFont+1272
0x40A0	0x4D4D4747 ;_TFT_defaultFont+1276
0x40A4	0x71715959 ;_TFT_defaultFont+1280
0x40A8	0x00000061 ;_TFT_defaultFont+1284
0x40AC	0x00000000 ;_TFT_defaultFont+1288
0x40B0	0xC3C3C37E ;_TFT_defaultFont+1292
0x40B4	0xC3C3C3C3 ;_TFT_defaultFont+1296
0x40B8	0x0000007E ;_TFT_defaultFont+1300
0x40BC	0x00000000 ;_TFT_defaultFont+1304
0x40C0	0x6363633F ;_TFT_defaultFont+1308
0x40C4	0x03033F63 ;_TFT_defaultFont+1312
0x40C8	0x00000003 ;_TFT_defaultFont+1316
0x40CC	0x00000000 ;_TFT_defaultFont+1320
0x40D0	0xC3C3C37E ;_TFT_defaultFont+1324
0x40D4	0xC3C3C3C3 ;_TFT_defaultFont+1328
0x40D8	0x00C0607E ;_TFT_defaultFont+1332
0x40DC	0x00000000 ;_TFT_defaultFont+1336
0x40E0	0x6363633F ;_TFT_defaultFont+1340
0x40E4	0x63331B3F ;_TFT_defaultFont+1344
0x40E8	0x000000C3 ;_TFT_defaultFont+1348
0x40EC	0x00000000 ;_TFT_defaultFont+1352
0x40F0	0x0343433E ;_TFT_defaultFont+1356
0x40F4	0x6161603E ;_TFT_defaultFont+1360
0x40F8	0x0000003E ;_TFT_defaultFont+1364
0x40FC	0x00000000 ;_TFT_defaultFont+1368
0x4100	0x0C0C0C3F ;_TFT_defaultFont+1372
0x4104	0x0C0C0C0C ;_TFT_defaultFont+1376
0x4108	0x0000000C ;_TFT_defaultFont+1380
0x410C	0x00000000 ;_TFT_defaultFont+1384
0x4110	0x63636363 ;_TFT_defaultFont+1388
0x4114	0x63636363 ;_TFT_defaultFont+1392
0x4118	0x0000003E ;_TFT_defaultFont+1396
0x411C	0x00000000 ;_TFT_defaultFont+1400
0x4120	0x66C3C3C3 ;_TFT_defaultFont+1404
0x4124	0x183C3C66 ;_TFT_defaultFont+1408
0x4128	0x00000018 ;_TFT_defaultFont+1412
0x412C	0x00000000 ;_TFT_defaultFont+1416
0x4130	0x00000000 ;_TFT_defaultFont+1420
0x4134	0x0C630C63 ;_TFT_defaultFont+1424
0x4138	0x0CF30C63 ;_TFT_defaultFont+1428
0x413C	0x079E06F6 ;_TFT_defaultFont+1432
0x4140	0x030C079E ;_TFT_defaultFont+1436
0x4144	0x0000030C ;_TFT_defaultFont+1440
0x4148	0x00000000 ;_TFT_defaultFont+1444
0x414C	0x00000000 ;_TFT_defaultFont+1448
0x4150	0x3C66C3C3 ;_TFT_defaultFont+1452
0x4154	0xC3663C18 ;_TFT_defaultFont+1456
0x4158	0x000000C3 ;_TFT_defaultFont+1460
0x415C	0x00000000 ;_TFT_defaultFont+1464
0x4160	0x6666C3C3 ;_TFT_defaultFont+1468
0x4164	0x1818183C ;_TFT_defaultFont+1472
0x4168	0x00000018 ;_TFT_defaultFont+1476
0x416C	0x00000000 ;_TFT_defaultFont+1480
0x4170	0x1830303F ;_TFT_defaultFont+1484
0x4174	0x0303060C ;_TFT_defaultFont+1488
0x4178	0x0000003F ;_TFT_defaultFont+1492
0x417C	0x1E000000 ;_TFT_defaultFont+1496
0x4180	0x06060606 ;_TFT_defaultFont+1500
0x4184	0x06060606 ;_TFT_defaultFont+1504
0x4188	0x001E0606 ;_TFT_defaultFont+1508
0x418C	0x01000000 ;_TFT_defaultFont+1512
0x4190	0x04020201 ;_TFT_defaultFont+1516
0x4194	0x10080804 ;_TFT_defaultFont+1520
0x4198	0x00202010 ;_TFT_defaultFont+1524
0x419C	0x1E000000 ;_TFT_defaultFont+1528
0x41A0	0x18181818 ;_TFT_defaultFont+1532
0x41A4	0x18181818 ;_TFT_defaultFont+1536
0x41A8	0x001E1818 ;_TFT_defaultFont+1540
0x41AC	0x00000000 ;_TFT_defaultFont+1544
0x41B0	0x00000000 ;_TFT_defaultFont+1548
0x41B4	0x00480030 ;_TFT_defaultFont+1552
0x41B8	0x01020084 ;_TFT_defaultFont+1556
0x41BC	0x00000000 ;_TFT_defaultFont+1560
0x41C0	0x00000000 ;_TFT_defaultFont+1564
0x41C4	0x00000000 ;_TFT_defaultFont+1568
0x41C8	0x00000000 ;_TFT_defaultFont+1572
0x41CC	0x00000000 ;_TFT_defaultFont+1576
0x41D0	0x00000000 ;_TFT_defaultFont+1580
0x41D4	0x00000000 ;_TFT_defaultFont+1584
0x41D8	0x00FF0000 ;_TFT_defaultFont+1588
0x41DC	0x0C000000 ;_TFT_defaultFont+1592
0x41E0	0x00000018 ;_TFT_defaultFont+1596
0x41E4	0x00000000 ;_TFT_defaultFont+1600
0x41E8	0x00000000 ;_TFT_defaultFont+1604
0x41EC	0x00000000 ;_TFT_defaultFont+1608
0x41F0	0x623C0000 ;_TFT_defaultFont+1612
0x41F4	0x63637E60 ;_TFT_defaultFont+1616
0x41F8	0x0000007E ;_TFT_defaultFont+1620
0x41FC	0x03000000 ;_TFT_defaultFont+1624
0x4200	0x673B0303 ;_TFT_defaultFont+1628
0x4204	0x63636363 ;_TFT_defaultFont+1632
0x4208	0x0000003F ;_TFT_defaultFont+1636
0x420C	0x00000000 ;_TFT_defaultFont+1640
0x4210	0x231E0000 ;_TFT_defaultFont+1644
0x4214	0x23030303 ;_TFT_defaultFont+1648
0x4218	0x0000001E ;_TFT_defaultFont+1652
0x421C	0x60000000 ;_TFT_defaultFont+1656
0x4220	0x637E6060 ;_TFT_defaultFont+1660
0x4224	0x73636363 ;_TFT_defaultFont+1664
0x4228	0x0000006E ;_TFT_defaultFont+1668
0x422C	0x00000000 ;_TFT_defaultFont+1672
0x4230	0x633E0000 ;_TFT_defaultFont+1676
0x4234	0x43037F63 ;_TFT_defaultFont+1680
0x4238	0x0000003E ;_TFT_defaultFont+1684
0x423C	0x1C000000 ;_TFT_defaultFont+1688
0x4240	0x060F0606 ;_TFT_defaultFont+1692
0x4244	0x06060606 ;_TFT_defaultFont+1696
0x4248	0x00000006 ;_TFT_defaultFont+1700
0x424C	0x00000000 ;_TFT_defaultFont+1704
0x4250	0x637E0000 ;_TFT_defaultFont+1708
0x4254	0x73636363 ;_TFT_defaultFont+1712
0x4258	0x3E61606E ;_TFT_defaultFont+1716
0x425C	0x03000000 ;_TFT_defaultFont+1720
0x4260	0x673B0303 ;_TFT_defaultFont+1724
0x4264	0x63636363 ;_TFT_defaultFont+1728
0x4268	0x00000063 ;_TFT_defaultFont+1732
0x426C	0x03000000 ;_TFT_defaultFont+1736
0x4270	0x03030003 ;_TFT_defaultFont+1740
0x4274	0x03030303 ;_TFT_defaultFont+1744
0x4278	0x00000003 ;_TFT_defaultFont+1748
0x427C	0x06000000 ;_TFT_defaultFont+1752
0x4280	0x06070006 ;_TFT_defaultFont+1756
0x4284	0x06060606 ;_TFT_defaultFont+1760
0x4288	0x03060606 ;_TFT_defaultFont+1764
0x428C	0x03000000 ;_TFT_defaultFont+1768
0x4290	0x1B330303 ;_TFT_defaultFont+1772
0x4294	0x1B0F070F ;_TFT_defaultFont+1776
0x4298	0x00000033 ;_TFT_defaultFont+1780
0x429C	0x03000000 ;_TFT_defaultFont+1784
0x42A0	0x03030303 ;_TFT_defaultFont+1788
0x42A4	0x03030303 ;_TFT_defaultFont+1792
0x42A8	0x00000003 ;_TFT_defaultFont+1796
0x42AC	0x00000000 ;_TFT_defaultFont+1800
0x42B0	0x00000000 ;_TFT_defaultFont+1804
0x42B4	0x00000000 ;_TFT_defaultFont+1808
0x42B8	0x033301DF ;_TFT_defaultFont+1812
0x42BC	0x03330333 ;_TFT_defaultFont+1816
0x42C0	0x03330333 ;_TFT_defaultFont+1820
0x42C4	0x00000333 ;_TFT_defaultFont+1824
0x42C8	0x00000000 ;_TFT_defaultFont+1828
0x42CC	0x00000000 ;_TFT_defaultFont+1832
0x42D0	0x673B0000 ;_TFT_defaultFont+1836
0x42D4	0x63636363 ;_TFT_defaultFont+1840
0x42D8	0x00000063 ;_TFT_defaultFont+1844
0x42DC	0x00000000 ;_TFT_defaultFont+1848
0x42E0	0x633E0000 ;_TFT_defaultFont+1852
0x42E4	0x63636363 ;_TFT_defaultFont+1856
0x42E8	0x0000003E ;_TFT_defaultFont+1860
0x42EC	0x00000000 ;_TFT_defaultFont+1864
0x42F0	0x673B0000 ;_TFT_defaultFont+1868
0x42F4	0x63636363 ;_TFT_defaultFont+1872
0x42F8	0x0303033F ;_TFT_defaultFont+1876
0x42FC	0x00000000 ;_TFT_defaultFont+1880
0x4300	0x637E0000 ;_TFT_defaultFont+1884
0x4304	0x73636363 ;_TFT_defaultFont+1888
0x4308	0x6060606E ;_TFT_defaultFont+1892
0x430C	0x00000000 ;_TFT_defaultFont+1896
0x4310	0x1F1B0000 ;_TFT_defaultFont+1900
0x4314	0x03030303 ;_TFT_defaultFont+1904
0x4318	0x00000003 ;_TFT_defaultFont+1908
0x431C	0x00000000 ;_TFT_defaultFont+1912
0x4320	0x231E0000 ;_TFT_defaultFont+1916
0x4324	0x31381E07 ;_TFT_defaultFont+1920
0x4328	0x0000001E ;_TFT_defaultFont+1924
0x432C	0x00000000 ;_TFT_defaultFont+1928
0x4330	0x061F0606 ;_TFT_defaultFont+1932
0x4334	0x06060606 ;_TFT_defaultFont+1936
0x4338	0x0000001C ;_TFT_defaultFont+1940
0x433C	0x00000000 ;_TFT_defaultFont+1944
0x4340	0x63630000 ;_TFT_defaultFont+1948
0x4344	0x73636363 ;_TFT_defaultFont+1952
0x4348	0x0000006E ;_TFT_defaultFont+1956
0x434C	0x00000000 ;_TFT_defaultFont+1960
0x4350	0x63630000 ;_TFT_defaultFont+1964
0x4354	0x1C363663 ;_TFT_defaultFont+1968
0x4358	0x0000001C ;_TFT_defaultFont+1972
0x435C	0x00000000 ;_TFT_defaultFont+1976
0x4360	0x00000000 ;_TFT_defaultFont+1980
0x4364	0x00000000 ;_TFT_defaultFont+1984
0x4368	0x03330333 ;_TFT_defaultFont+1988
0x436C	0x01B601B6 ;_TFT_defaultFont+1992
0x4370	0x00CC01CE ;_TFT_defaultFont+1996
0x4374	0x000000CC ;_TFT_defaultFont+2000
0x4378	0x00000000 ;_TFT_defaultFont+2004
0x437C	0x00000000 ;_TFT_defaultFont+2008
0x4380	0x33330000 ;_TFT_defaultFont+2012
0x4384	0x331E0C1E ;_TFT_defaultFont+2016
0x4388	0x00000033 ;_TFT_defaultFont+2020
0x438C	0x00000000 ;_TFT_defaultFont+2024
0x4390	0x63630000 ;_TFT_defaultFont+2028
0x4394	0x1C363663 ;_TFT_defaultFont+2032
0x4398	0x0C0C181C ;_TFT_defaultFont+2036
0x439C	0x00000000 ;_TFT_defaultFont+2040
0x43A0	0x303F0000 ;_TFT_defaultFont+2044
0x43A4	0x03060C18 ;_TFT_defaultFont+2048
0x43A8	0x0000003F ;_TFT_defaultFont+2052
0x43AC	0x38000000 ;_TFT_defaultFont+2056
0x43B0	0x0C0C0C0C ;_TFT_defaultFont+2060
0x43B4	0x0C0C0C07 ;_TFT_defaultFont+2064
0x43B8	0x00380C0C ;_TFT_defaultFont+2068
0x43BC	0x0C000000 ;_TFT_defaultFont+2072
0x43C0	0x0C0C0C0C ;_TFT_defaultFont+2076
0x43C4	0x0C0C0C0C ;_TFT_defaultFont+2080
0x43C8	0x000C0C0C ;_TFT_defaultFont+2084
0x43CC	0x07000000 ;_TFT_defaultFont+2088
0x43D0	0x0C0C0C0C ;_TFT_defaultFont+2092
0x43D4	0x0C0C0C38 ;_TFT_defaultFont+2096
0x43D8	0x00070C0C ;_TFT_defaultFont+2100
0x43DC	0x00000000 ;_TFT_defaultFont+2104
0x43E0	0x00000000 ;_TFT_defaultFont+2108
0x43E4	0x00000000 ;_TFT_defaultFont+2112
0x43E8	0x021E0000 ;_TFT_defaultFont+2116
0x43EC	0x03F1023F ;_TFT_defaultFont+2120
0x43F0	0x000001E1 ;_TFT_defaultFont+2124
0x43F4	0x00000000 ;_TFT_defaultFont+2128
0x43F8	0x00000000 ;_TFT_defaultFont+2132
0x43FC	0x00000000 ;_TFT_defaultFont+2136
0x4400	0x07FE0000 ;_TFT_defaultFont+2140
0x4404	0x04020402 ;_TFT_defaultFont+2144
0x4408	0x04020402 ;_TFT_defaultFont+2148
0x440C	0x04020402 ;_TFT_defaultFont+2152
0x4410	0x04020402 ;_TFT_defaultFont+2156
0x4414	0x000007FE ;_TFT_defaultFont+2160
0x4418	0x00000000 ;_TFT_defaultFont+2164
; end of _TFT_defaultFont
;__Lib_GPIO_32F10x_Defs.c,675 :: __GPIO_MODULE_SPI3_PC10_11_12 [108]
0x441C	0x0000002A ;__GPIO_MODULE_SPI3_PC10_11_12+0
0x4420	0x0000002B ;__GPIO_MODULE_SPI3_PC10_11_12+4
0x4424	0x0000002C ;__GPIO_MODULE_SPI3_PC10_11_12+8
0x4428	0xFFFFFFFF ;__GPIO_MODULE_SPI3_PC10_11_12+12
0x442C	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+16
0x4430	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+20
0x4434	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+24
0x4438	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+28
0x443C	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+32
0x4440	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+36
0x4444	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+40
0x4448	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+44
0x444C	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+48
0x4450	0x00000818 ;__GPIO_MODULE_SPI3_PC10_11_12+52
0x4454	0x00000818 ;__GPIO_MODULE_SPI3_PC10_11_12+56
0x4458	0x00000818 ;__GPIO_MODULE_SPI3_PC10_11_12+60
0x445C	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+64
0x4460	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+68
0x4464	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+72
0x4468	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+76
0x446C	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+80
0x4470	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+84
0x4474	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+88
0x4478	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+92
0x447C	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+96
0x4480	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+100
0x4484	0x08201100 ;__GPIO_MODULE_SPI3_PC10_11_12+104
; end of __GPIO_MODULE_SPI3_PC10_11_12
;,0 :: _initBlock_2 [2]
; Containing: ?ICS_sendByteOne [1]
;             ?ICS_sendByteTwo [1]
0x4488	0x0000 ;_initBlock_2+0 : ?ICS_sendByteOne at 0x4488 : ?ICS_sendByteTwo at 0x4489
; end of _initBlock_2
;,0 :: _initBlock_3 [2]
; Containing: ?ICS_sendByteThree [1]
;             ?ICS__Lib_TFT_FontInitialized [1]
0x448A	0x0000 ;_initBlock_3+0 : ?ICS_sendByteThree at 0x448A : ?ICS__Lib_TFT_FontInitialized at 0x448B
; end of _initBlock_3
;Transmitter.c,0 :: ?ICS_adc_result [2]
0x448C	0x0000 ;?ICS_adc_result+0
; end of ?ICS_adc_result
;,0 :: _initBlock_5 [22]
; Containing: ?ICS?lstr1_Transmitter [11]
;             ?ICS?lstr2_Transmitter [11]
0x448E	0x52414F42 ;_initBlock_5+0 : ?ICS?lstr1_Transmitter at 0x448E
0x4492	0x44492044 ;_initBlock_5+4
0x4496	0x42003A20 ;_initBlock_5+8 : ?ICS?lstr2_Transmitter at 0x4499
0x449A	0x6F747475 ;_initBlock_5+12
0x449E	0x2031206E ;_initBlock_5+16
0x44A2	0x003A ;_initBlock_5+20
; end of _initBlock_5
;,0 :: _initBlock_6 [22]
; Containing: ?ICS?lstr3_Transmitter [11]
;             ?ICS?lstr4_Transmitter [11]
0x44A4	0x74747542 ;_initBlock_6+0 : ?ICS?lstr3_Transmitter at 0x44A4
0x44A8	0x32206E6F ;_initBlock_6+4
0x44AC	0x41003A20 ;_initBlock_6+8 : ?ICS?lstr4_Transmitter at 0x44AF
0x44B0	0x4F4C414E ;_initBlock_6+12
0x44B4	0x20312047 ;_initBlock_6+16
0x44B8	0x003A ;_initBlock_6+20
; end of _initBlock_6
;,0 :: _initBlock_7 [2]
; Containing: ?ICS__Lib_TFT___no_acceleration [1]
;             ?ICS__Lib_TFT___SSD1963_controller [1]
0x44BA	0x0000 ;_initBlock_7+0 : ?ICS__Lib_TFT___no_acceleration at 0x44BA : ?ICS__Lib_TFT___SSD1963_controller at 0x44BB
; end of _initBlock_7
;__Lib_TFT.c,0 :: ?ICS__Lib_TFT_Ptr_Set [2]
0x44BC	0x0000 ;?ICS__Lib_TFT_Ptr_Set+0
; end of ?ICS__Lib_TFT_Ptr_Set
;,0 :: _initBlock_9 [2]
; Containing: ?ICS__Lib_TFT_Defs_TFT_Rotated_180 [1]
;             ?ICS__Lib_TFT_Defs_TFT_Disp_Rotation [1]
0x44BE	0x0000 ;_initBlock_9+0 : ?ICS__Lib_TFT_Defs_TFT_Rotated_180 at 0x44BE : ?ICS__Lib_TFT_Defs_TFT_Disp_Rotation at 0x44BF
; end of _initBlock_9
;__Lib_TFT_Defs.c,0 :: ?ICS__Lib_TFT_Defs___controller [2]
0x44C0	0x00FF ;?ICS__Lib_TFT_Defs___controller+0
; end of ?ICS__Lib_TFT_Defs___controller
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0150      [28]    __Lib_TFT_Defs_Write_to_Port
0x0170      [28]    _Delay_1us
0x018C      [52]    _TFT_Write_Command
0x01C0      [26]    _TFT_Color16bitToRGB
0x01DC      [52]    _TFT_Set_Index
0x0210      [84]    _TFT_SSD1963YT_8bit_Write_Command
0x0264      [36]    _TFT_RGBToColor16bit
0x0288      [84]    _TFT_SSD1963_8bit_Set_Index
0x02DC     [244]    _TFT_V_Line
0x03D0     [192]    _TFT_GetCurrentColor
0x0490      [16]    _Is_TFT_Rotated_180
0x04A0     [140]    _GPIO_Clk_Enable
0x052C     [108]    _TFT_Set_Font
0x0598     [404]    _TFT_H_Line
0x0730      [28]    _Delay_5ms
0x074C     [150]    __Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample
0x07E4      [28]    _SPI3_Read
0x0800      [34]    __Lib_SPI_123_SPIx_Read
0x0828      [28]    _Delay_10ms
0x0844      [28]    _enable_PLL
0x0860      [88]    _write_ZIGBEE_long
0x08B8      [64]    _TFT_Set_Reg
0x08F8     [100]    __Lib_TFT__TFT_getHeader
0x0960      [28]    _Delay_500us
0x097C     [152]    __Lib_GPIO_32F10x_GPIO_Configure_Pin
0x0A14      [80]    _WordToStr
0x0A64     [136]    _TFT_Dot
0x0AF0      [28]    _Delay_100ms
0x0B0C     [196]    __Lib_TFT_Defs_TFT_Set_Pin_Directions
0x0BD0     [512]    __Lib_TFT__TFT_Write_Char
0x0DD0      [92]    _parse_analog
0x0E2C      [36]    _set_not_ACK
0x0E50      [36]    _start_transmit
0x0E74      [16]    __Lib_TFT_Is_SSD1963_Set
0x0E84      [64]    _write_ZIGBEE_short
0x0EC4      [64]    _read_ZIGBEE_short
0x0F04      [36]    _set_not_encrypt
0x0F28     [976]    __Lib_TFT_Defs_TFT_Reset_ILI9341
0x12F8      [62]    _set_RSSI_mode
0x1338      [88]    _read_ZIGBEE_long
0x1390     [356]    _set_channel
0x14F4     [106]    _Button
0x1560     [112]    _init_ZIGBEE_basic
0x15D0      [28]    _ADC1_Get_Sample
0x15EC      [26]    _enable_interrupt
0x1608     [190]    _set_CCA_mode
0x16C8     [788]    __Lib_TFT__TFT_Write_Char_E
0x19DC      [48]    __Lib_TFT_Defs_TFT_Set_DataPort_Direction
0x1A0C      [24]    _TFT_Move_Cursor
0x1A24      [64]    _TFT_Set_Brush
0x1A64     [628]    __Lib_TFT_Defs_TFT_Reset_Device
0x1CD8     [120]    _TFT_Set_Address
0x1D50     [328]    _TFT_Set_Address_SSD1963II
0x1E98      [78]    _ByteToStr
0x1EE8     [272]    _GPIO_Alternate_Function_Enable
0x1FF8     [620]    _TFT_Rectangle
0x2264     [500]    _GPIO_Config
0x2458      [66]    __Lib_SPI_123_SPIx_Init_Advanced
0x249C      [24]    _TFT_Set_Pen
0x24B4      [16]    _Is_TFT_Set
0x24C4     [110]    _IntToStr
0x2534      [48]    _TFT_16bit_Write_Data
0x2564      [28]    _SPI1_Write
0x2580     [104]    _TFT_Set_Address_ILI9340
0x25E8      [28]    _SPI2_Write
0x2604      [28]    _SPI3_Write
0x2620      [96]    _TFT_Write_Data
0x2680     [104]    _TFT_Set_Address_R61526
0x26E8     [212]    _TFT_Set_Address_HX8352A
0x27BC     [104]    _TFT_Set_Address_SST7715R
0x2824     [104]    _TFT_Set_Address_ILI9481
0x288C      [96]    _TFT_SSD1963_8bit_Write_Data
0x28EC     [104]    _TFT_Set_Address_ILI9342
0x2958     [164]    _display_on_screen
0x29FC      [24]    _GPIO_Analog_Input
0x2A14     [216]    _read_sensors
0x2AEC     [332]    _write_TX_normal_FIFO
0x2C38     [224]    _read_RX_FIFO
0x2D18     [296]    __Lib_ADC_12_32F10x_16ch_ADCx_Init
0x2E40      [48]    _Debounce_INT
0x2E70      [68]    _set_wake_from_pin
0x2EB8      [82]    _RF_reset
0x2F0C      [26]    _software_reset
0x2F28      [44]    _set_PAN_ID
0x2F54      [44]    _set_short_address
0x2F80      [62]    _set_long_address
0x2FC0      [84]    _SPI3_Init_Advanced
0x3014      [24]    _GPIO_Digital_Input
0x302C      [28]    _GPIO_Digital_Output
0x3048      [68]    _pin_reset
0x308C     [144]    _TFT_Fill_Screen
0x311C     [192]    _TFT_Init
0x31DC      [50]    _init_ZIGBEE_nonbeacon
0x3210      [40]    _pin_wake
0x3238     [106]    _set_reception_mode
0x32A4     [136]    _TFT_Write_Text
0x332C     [192]    _TFT_Init_ILI9341_8bit
0x33EC      [58]    _set_TX_power
0x3428     [138]    _set_frame_format_filter
0x34B4      [70]    _nonbeacon_PAN_coordinator_device
0x3500     [396]    _Initialize
0x368C     [108]    __Lib_System_105_107_SystemClockSetDefault
0x36F8      [20]    ___CC2DW
0x370C      [58]    ___FillZeros
0x3748     [288]    _ADC_Set_Input_Channel
0x3868     [144]    _draw_frame
0x38F8      [76]    _run_transmitter
0x3944      [52]    _ADC1_Init
0x3978      [80]    _listen_for_id
0x39C8      [20]    __Lib_System_105_107_InitialSetUpFosc
0x39DC       [8]    ___GenExcept
0x39E8     [120]    _main
0x3A60     [324]    __Lib_System_105_107_InitialSetUpRCCRCC2
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000       [1]    _sendByteOne
0x20000001       [1]    _sendByteTwo
0x20000002       [1]    _sendByteThree
0x20000003       [1]    __Lib_TFT_FontInitialized
0x20000004       [2]    _adc_result
0x20000006      [11]    ?lstr1_Transmitter
0x20000011      [11]    ?lstr2_Transmitter
0x2000001C      [11]    ?lstr3_Transmitter
0x20000027      [11]    ?lstr4_Transmitter
0x20000032       [1]    __Lib_TFT___no_acceleration
0x20000033       [1]    __Lib_TFT___SSD1963_controller
0x20000034       [2]    __Lib_TFT_Ptr_Set
0x20000036       [1]    __Lib_TFT_Defs_TFT_Rotated_180
0x20000037       [1]    __Lib_TFT_Defs_TFT_Disp_Rotation
0x20000038       [2]    __Lib_TFT_Defs___controller
0x2000003A       [1]    _LQI
0x2000003B       [1]    _RSSI2
0x2000003C       [1]    _SEQ_NUMBER
0x2000003D       [1]    _lost_data
0x2000003E       [2]    _address_RX_FIFO
0x20000040       [2]    _address_TX_normal_FIFO
0x20000042       [2]    _ADDRESS_short_1
0x20000044       [2]    _ADDRESS_short_2
0x20000046       [2]    _PAN_ID_1
0x20000048       [2]    _PAN_ID_2
0x2000004A       [8]    _ADDRESS_long_1
0x20000052       [8]    _ADDRESS_long_2
0x2000005A       [3]    _DATA_TX
0x2000005D      [19]    _data_RX_FIFO
0x20000070       [3]    _DATA_RX
0x20000073      [16]    _data_TX_normal_FIFO
0x20000083       [1]    _button1
0x20000084       [1]    _button2
0x20000085       [1]    _temp1
0x20000086       [4]    _txt
0x2000008A       [1]    _adc_l
0x2000008B       [1]    _adc_h
0x2000008C       [4]    _ADC_Get_Sample_Ptr
0x20000090       [4]    _SPI_Rd_Ptr
0x20000094       [4]    _SPI_Wr_Ptr
0x20000098       [4]    ___System_CLOCK_IN_KHZ
0x2000009C       [4]    __Lib_TFT__font
0x200000A0       [2]    __Lib_TFT__fontFirstChar
0x200000A2       [2]    __Lib_TFT__fontLastChar
0x200000A4       [2]    __Lib_TFT__fontHeight
0x200000A6       [2]    __Lib_TFT_FontColor
0x200000A8       [1]    __Lib_TFT_FontOrientation
0x200000A9       [1]    _ExternalFontSet
0x200000AA       [2]    __Lib_TFT_y_cord
0x200000AC       [2]    __Lib_TFT_x_cord
0x200000AE       [2]    _TFT_DISP_WIDTH
0x200000B0       [2]    _TFT_DISP_HEIGHT
0x200000B2       [1]    __Lib_TFT_PenWidth
0x200000B3       [1]    __Lib_TFT_BrushEnabled
0x200000B4       [4]    _TFT_SSD1963_Set_Address_Ptr
0x200000B8       [4]    _TFT_Set_Address_Ptr
0x200000BC       [4]    _TFT_Write_Data_Ptr
0x200000C0       [2]    __Lib_TFT_PenColor
0x200000C2       [1]    __Lib_TFT_GradientEnabled
0x200000C3       [1]    __Lib_TFT_GradientOrientation
0x200000C4       [2]    __Lib_TFT_GradColorFrom
0x200000C6       [2]    __Lib_TFT_GradColorTo
0x200000C8       [2]    __Lib_TFT_BrushColor
0x200000CA      [10]    __Lib_TFT_headerBuffer
0x200000D4       [4]    _TFT_Get_Ext_Data_Ptr
0x200000D8       [4]    __Lib_TFT_activeExtFont
0x200000DC       [4]    _TFT_Set_Index_Ptr
0x200000E0       [4]    _TFT_Write_Command_Ptr
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x3BA4    [2168]    _TFT_defaultFont
0x441C     [108]    __GPIO_MODULE_SPI3_PC10_11_12
0x4488       [1]    ?ICS_sendByteOne
0x4489       [1]    ?ICS_sendByteTwo
0x448A       [1]    ?ICS_sendByteThree
0x448B       [1]    ?ICS__Lib_TFT_FontInitialized
0x448C       [2]    ?ICS_adc_result
0x448E      [11]    ?ICS?lstr1_Transmitter
0x4499      [11]    ?ICS?lstr2_Transmitter
0x44A4      [11]    ?ICS?lstr3_Transmitter
0x44AF      [11]    ?ICS?lstr4_Transmitter
0x44BA       [1]    ?ICS__Lib_TFT___no_acceleration
0x44BB       [1]    ?ICS__Lib_TFT___SSD1963_controller
0x44BC       [2]    ?ICS__Lib_TFT_Ptr_Set
0x44BE       [1]    ?ICS__Lib_TFT_Defs_TFT_Rotated_180
0x44BF       [1]    ?ICS__Lib_TFT_Defs_TFT_Disp_Rotation
0x44C0       [2]    ?ICS__Lib_TFT_Defs___controller
