;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 7/6/2016 3:21:57 PM
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0xFFFC2000  	536936444
0x0004	0x2FE10000  	12257
0x0008	0x2FD90000  	12249
0x000C	0x2FD90000  	12249
0x0010	0x2FD90000  	12249
0x0014	0x2FD90000  	12249
0x0018	0x2FD90000  	12249
0x001C	0x2FD90000  	12249
0x0020	0x2FD90000  	12249
0x0024	0x2FD90000  	12249
0x0028	0x2FD90000  	12249
0x002C	0x2FD90000  	12249
0x0030	0x2FD90000  	12249
0x0034	0x2FD90000  	12249
0x0038	0x2FD90000  	12249
0x003C	0x2FD90000  	12249
0x0040	0x2FD90000  	12249
0x0044	0x2FD90000  	12249
0x0048	0x2FD90000  	12249
0x004C	0x2FD90000  	12249
0x0050	0x2FD90000  	12249
0x0054	0x2FD90000  	12249
0x0058	0x2FD90000  	12249
0x005C	0x2FD90000  	12249
0x0060	0x2FD90000  	12249
0x0064	0x2FD90000  	12249
0x0068	0x2FD90000  	12249
0x006C	0x2FD90000  	12249
0x0070	0x2FD90000  	12249
0x0074	0x2FD90000  	12249
0x0078	0x2FD90000  	12249
0x007C	0x2FD90000  	12249
0x0080	0x2FD90000  	12249
0x0084	0x2FD90000  	12249
0x0088	0x2FD90000  	12249
0x008C	0x2FD90000  	12249
0x0090	0x2FD90000  	12249
0x0094	0x2FD90000  	12249
0x0098	0x2FD90000  	12249
0x009C	0x2FD90000  	12249
0x00A0	0x2FD90000  	12249
0x00A4	0x2FD90000  	12249
0x00A8	0x2FD90000  	12249
0x00AC	0x2FD90000  	12249
0x00B0	0x2FD90000  	12249
0x00B4	0x2FD90000  	12249
0x00B8	0x2FD90000  	12249
0x00BC	0x2FD90000  	12249
0x00C0	0x2FD90000  	12249
0x00C4	0x2FD90000  	12249
0x00C8	0x2FD90000  	12249
0x00CC	0x2FD90000  	12249
0x00D0	0x2FD90000  	12249
0x00D4	0x2FD90000  	12249
0x00D8	0x2FD90000  	12249
0x00DC	0x2FD90000  	12249
0x00E0	0x2FD90000  	12249
0x00E4	0x2FD90000  	12249
0x00E8	0x2FD90000  	12249
0x00EC	0x2FD90000  	12249
0x00F0	0x2FD90000  	12249
0x00F4	0x2FD90000  	12249
0x00F8	0x2FD90000  	12249
0x00FC	0x2FD90000  	12249
0x0100	0x2FD90000  	12249
0x0104	0x2FD90000  	12249
0x0108	0x2FD90000  	12249
0x010C	0x2FD90000  	12249
0x0110	0x2FD90000  	12249
0x0114	0x2FD90000  	12249
0x0118	0x2FD90000  	12249
0x011C	0x2FD90000  	12249
0x0120	0x2FD90000  	12249
0x0124	0x2FD90000  	12249
0x0128	0x2FD90000  	12249
0x012C	0x2FD90000  	12249
0x0130	0x2FD90000  	12249
0x0134	0x2FD90000  	12249
0x0138	0x2FD90000  	12249
0x013C	0x2FD90000  	12249
0x0140	0x2FD90000  	12249
0x0144	0x2FD90000  	12249
0x0148	0x2FD90000  	12249
0x014C	0x2FD90000  	12249
; end of ____SysVT
_main:
;Reciver.c, 136 :: 		void main() {
0x2FE0	0xF000F84A  BL	12408
0x2FE4	0xF000FDC6  BL	15220
0x2FE8	0xF7FFFFEC  BL	12228
0x2FEC	0xF000FD74  BL	15064
;Reciver.c, 137 :: 		Initialize();                      // Initialize MCU and Bee click board
0x2FF0	0xF7FFFF22  BL	_Initialize+0
;Reciver.c, 138 :: 		draw_frame();
0x2FF4	0xF7FFFEF2  BL	_draw_frame+0
;Reciver.c, 140 :: 		GPIO_Digital_Input(&GPIOD_IDR, _GPIO_PINMASK_0);
0x2FF8	0xF2400101  MOVW	R1, #1
0x2FFC	0x481B    LDR	R0, [PC, #108]
0x2FFE	0xF7FFFAD7  BL	_GPIO_Digital_Input+0
;Reciver.c, 141 :: 		Delay_ms(100);
0x3002	0xF644777F  MOVW	R7, #20351
0x3006	0xF2C00712  MOVT	R7, #18
L_main7:
0x300A	0x1E7F    SUBS	R7, R7, #1
0x300C	0xD1FD    BNE	L_main7
0x300E	0xBF00    NOP
0x3010	0xBF00    NOP
0x3012	0xBF00    NOP
0x3014	0xBF00    NOP
0x3016	0xBF00    NOP
;Reciver.c, 143 :: 		while (deviceIdByte == 0) {
L_main9:
0x3018	0x4815    LDR	R0, [PC, #84]
0x301A	0x7800    LDRB	R0, [R0, #0]
0x301C	0xB968    CBNZ	R0, L_main10
;Reciver.c, 144 :: 		listen_for_id();
0x301E	0xF7FFFEAB  BL	_listen_for_id+0
;Reciver.c, 146 :: 		Delay_ms(50);
0x3022	0xF24277BF  MOVW	R7, #10175
0x3026	0xF2C00709  MOVT	R7, #9
L_main11:
0x302A	0x1E7F    SUBS	R7, R7, #1
0x302C	0xD1FD    BNE	L_main11
0x302E	0xBF00    NOP
0x3030	0xBF00    NOP
0x3032	0xBF00    NOP
0x3034	0xBF00    NOP
0x3036	0xBF00    NOP
;Reciver.c, 147 :: 		}
0x3038	0xE7EE    B	L_main9
L_main10:
;Reciver.c, 148 :: 		while (1) {
L_main13:
;Reciver.c, 149 :: 		beeReciveData();
0x303A	0xF7FFFE71  BL	_beeReciveData+0
;Reciver.c, 151 :: 		Delay_ms(10);
0x303E	0xF24D47BF  MOVW	R7, #54463
0x3042	0xF2C00701  MOVT	R7, #1
0x3046	0xBF00    NOP
0x3048	0xBF00    NOP
L_main15:
0x304A	0x1E7F    SUBS	R7, R7, #1
0x304C	0xD1FD    BNE	L_main15
0x304E	0xBF00    NOP
0x3050	0xBF00    NOP
0x3052	0xBF00    NOP
;Reciver.c, 152 :: 		life_notifyer_counter++;
0x3054	0x4907    LDR	R1, [PC, #28]
0x3056	0xF9B10000  LDRSH	R0, [R1, #0]
0x305A	0x1C40    ADDS	R0, R0, #1
0x305C	0xB200    SXTH	R0, R0
0x305E	0x8008    STRH	R0, [R1, #0]
;Reciver.c, 153 :: 		if (life_notifyer_counter == 50) {
0x3060	0x2832    CMP	R0, #50
0x3062	0xD101    BNE	L_main17
;Reciver.c, 154 :: 		brodcast_id_request();
0x3064	0xF7FFF9B8  BL	_brodcast_id_request+0
;Reciver.c, 155 :: 		}
L_main17:
;Reciver.c, 156 :: 		}
0x3068	0xE7E7    B	L_main13
;Reciver.c, 157 :: 		}
L_end_main:
L__main_end_loop:
0x306A	0xE7FE    B	L__main_end_loop
0x306C	0x14084001  	GPIOD_IDR+0
0x3070	0x00002000  	_deviceIdByte+0
0x3074	0x00022000  	_life_notifyer_counter+0
; end of _main
___CC2DW:
;__Lib_System_105_107.c, 27 :: 		
0x2D0C	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 29 :: 		
L_loopDW:
;__Lib_System_105_107.c, 30 :: 		
0x2D0E	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_105_107.c, 31 :: 		
0x2D12	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_105_107.c, 32 :: 		
0x2D16	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 33 :: 		
0x2D1A	0xD1F8    BNE	L_loopDW
;__Lib_System_105_107.c, 35 :: 		
L_end___CC2DW:
0x2D1C	0xB001    ADD	SP, SP, #4
0x2D1E	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_105_107.c, 69 :: 		
0x2CD0	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 71 :: 		
0x2CD2	0xF04F0900  MOV	R9, #0
;__Lib_System_105_107.c, 72 :: 		
0x2CD6	0xF04F0C00  MOV	R12, #0
;__Lib_System_105_107.c, 73 :: 		
0x2CDA	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_105_107.c, 74 :: 		
0x2CDE	0xDC04    BGT	L_loopFZs
;__Lib_System_105_107.c, 75 :: 		
0x2CE0	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_105_107.c, 76 :: 		
0x2CE4	0xDB01    BLT	L_loopFZs
;__Lib_System_105_107.c, 77 :: 		
0x2CE6	0x46D4    MOV	R12, R10
;__Lib_System_105_107.c, 78 :: 		
0x2CE8	0x46EA    MOV	R10, SP
;__Lib_System_105_107.c, 79 :: 		
L_loopFZs:
;__Lib_System_105_107.c, 80 :: 		
0x2CEA	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_105_107.c, 81 :: 		
0x2CEE	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 82 :: 		
0x2CF2	0xD1FA    BNE	L_loopFZs
;__Lib_System_105_107.c, 83 :: 		
0x2CF4	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_105_107.c, 84 :: 		
0x2CF8	0xDD05    BLE	L_norep
;__Lib_System_105_107.c, 85 :: 		
0x2CFA	0x46E2    MOV	R10, R12
;__Lib_System_105_107.c, 86 :: 		
0x2CFC	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_105_107.c, 87 :: 		
0x2D00	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_105_107.c, 88 :: 		
0x2D04	0xE7F1    B	L_loopFZs
;__Lib_System_105_107.c, 89 :: 		
L_norep:
;__Lib_System_105_107.c, 91 :: 		
L_end___FillZeros:
0x2D06	0xB001    ADD	SP, SP, #4
0x2D08	0x4770    BX	LR
; end of ___FillZeros
_Initialize:
;Init_Routines.c, 12 :: 		void Initialize() {
0x2E38	0xB081    SUB	SP, SP, #4
0x2E3A	0xF8CDE000  STR	LR, [SP, #0]
;Init_Routines.c, 13 :: 		short int i = 0;
;Init_Routines.c, 15 :: 		LQI = 0;
0x2E3E	0x2100    MOVS	R1, #0
0x2E40	0xB249    SXTB	R1, R1
0x2E42	0x484F    LDR	R0, [PC, #316]
0x2E44	0x7001    STRB	R1, [R0, #0]
;Init_Routines.c, 16 :: 		RSSI2 = 0;
0x2E46	0x2100    MOVS	R1, #0
0x2E48	0xB249    SXTB	R1, R1
0x2E4A	0x484E    LDR	R0, [PC, #312]
0x2E4C	0x7001    STRB	R1, [R0, #0]
;Init_Routines.c, 17 :: 		SEQ_NUMBER = 0x23;
0x2E4E	0x2123    MOVS	R1, #35
0x2E50	0xB249    SXTB	R1, R1
0x2E52	0x484D    LDR	R0, [PC, #308]
0x2E54	0x7001    STRB	R1, [R0, #0]
;Init_Routines.c, 18 :: 		lost_data = 0;
0x2E56	0x2100    MOVS	R1, #0
0x2E58	0xB249    SXTB	R1, R1
0x2E5A	0x484C    LDR	R0, [PC, #304]
0x2E5C	0x7001    STRB	R1, [R0, #0]
;Init_Routines.c, 19 :: 		address_RX_FIFO = 0x300;
0x2E5E	0xF2403100  MOVW	R1, #768
0x2E62	0xB209    SXTH	R1, R1
0x2E64	0x484A    LDR	R0, [PC, #296]
0x2E66	0x8001    STRH	R1, [R0, #0]
;Init_Routines.c, 20 :: 		address_TX_normal_FIFO = 0;
0x2E68	0x2100    MOVS	R1, #0
0x2E6A	0xB209    SXTH	R1, R1
0x2E6C	0x4849    LDR	R0, [PC, #292]
0x2E6E	0x8001    STRH	R1, [R0, #0]
;Init_Routines.c, 22 :: 		for (i = 0; i < 2; i++) {
; i start address is: 8 (R2)
0x2E70	0x2200    MOVS	R2, #0
0x2E72	0xB252    SXTB	R2, R2
; i end address is: 8 (R2)
L_Initialize0:
; i start address is: 8 (R2)
0x2E74	0x2A02    CMP	R2, #2
0x2E76	0xDA16    BGE	L_Initialize1
;Init_Routines.c, 23 :: 		ADDRESS_short_1[i] = 1;
0x2E78	0x4847    LDR	R0, [PC, #284]
0x2E7A	0x1881    ADDS	R1, R0, R2
0x2E7C	0x2001    MOVS	R0, #1
0x2E7E	0xB240    SXTB	R0, R0
0x2E80	0x7008    STRB	R0, [R1, #0]
;Init_Routines.c, 24 :: 		ADDRESS_short_2[i] = 2;
0x2E82	0x4846    LDR	R0, [PC, #280]
0x2E84	0x1881    ADDS	R1, R0, R2
0x2E86	0x2002    MOVS	R0, #2
0x2E88	0xB240    SXTB	R0, R0
0x2E8A	0x7008    STRB	R0, [R1, #0]
;Init_Routines.c, 25 :: 		PAN_ID_1[i] = 3;
0x2E8C	0x4844    LDR	R0, [PC, #272]
0x2E8E	0x1881    ADDS	R1, R0, R2
0x2E90	0x2003    MOVS	R0, #3
0x2E92	0xB240    SXTB	R0, R0
0x2E94	0x7008    STRB	R0, [R1, #0]
;Init_Routines.c, 26 :: 		PAN_ID_2[i] = 3;
0x2E96	0x4843    LDR	R0, [PC, #268]
0x2E98	0x1881    ADDS	R1, R0, R2
0x2E9A	0x2003    MOVS	R0, #3
0x2E9C	0xB240    SXTB	R0, R0
0x2E9E	0x7008    STRB	R0, [R1, #0]
;Init_Routines.c, 22 :: 		for (i = 0; i < 2; i++) {
0x2EA0	0x1C52    ADDS	R2, R2, #1
0x2EA2	0xB252    SXTB	R2, R2
;Init_Routines.c, 27 :: 		}
; i end address is: 8 (R2)
0x2EA4	0xE7E6    B	L_Initialize0
L_Initialize1:
;Init_Routines.c, 29 :: 		for (i = 0; i < 8; i++) {
; i start address is: 8 (R2)
0x2EA6	0x2200    MOVS	R2, #0
0x2EA8	0xB252    SXTB	R2, R2
; i end address is: 8 (R2)
L_Initialize3:
; i start address is: 8 (R2)
0x2EAA	0x2A08    CMP	R2, #8
0x2EAC	0xDA0C    BGE	L_Initialize4
;Init_Routines.c, 30 :: 		ADDRESS_long_1[i] = 1;
0x2EAE	0x483E    LDR	R0, [PC, #248]
0x2EB0	0x1881    ADDS	R1, R0, R2
0x2EB2	0x2001    MOVS	R0, #1
0x2EB4	0xB240    SXTB	R0, R0
0x2EB6	0x7008    STRB	R0, [R1, #0]
;Init_Routines.c, 31 :: 		ADDRESS_long_2[i] = 2;
0x2EB8	0x483C    LDR	R0, [PC, #240]
0x2EBA	0x1881    ADDS	R1, R0, R2
0x2EBC	0x2002    MOVS	R0, #2
0x2EBE	0xB240    SXTB	R0, R0
0x2EC0	0x7008    STRB	R0, [R1, #0]
;Init_Routines.c, 29 :: 		for (i = 0; i < 8; i++) {
0x2EC2	0x1C52    ADDS	R2, R2, #1
0x2EC4	0xB252    SXTB	R2, R2
;Init_Routines.c, 32 :: 		}
; i end address is: 8 (R2)
0x2EC6	0xE7F0    B	L_Initialize3
L_Initialize4:
;Init_Routines.c, 35 :: 		GPIO_Digital_Output(&GPIOD_BASE, _GPIO_PINMASK_13);
0x2EC8	0xF2420100  MOVW	R1, #8192
0x2ECC	0x4838    LDR	R0, [PC, #224]
0x2ECE	0xF7FFFAEF  BL	_GPIO_Digital_Output+0
;Init_Routines.c, 36 :: 		GPIO_Digital_Output(&GPIOD_BASE, _GPIO_PINMASK_10);
0x2ED2	0xF2404100  MOVW	R1, #1024
0x2ED6	0x4836    LDR	R0, [PC, #216]
0x2ED8	0xF7FFFAEA  BL	_GPIO_Digital_Output+0
;Init_Routines.c, 37 :: 		GPIO_Digital_Output(&GPIOC_BASE, _GPIO_PINMASK_2);
0x2EDC	0xF2400104  MOVW	R1, #4
0x2EE0	0x4834    LDR	R0, [PC, #208]
0x2EE2	0xF7FFFAE5  BL	_GPIO_Digital_Output+0
;Init_Routines.c, 40 :: 		GPIO_Digital_Input(&GPIOD_BASE, _GPIO_PINMASK_0);
0x2EE6	0xF2400101  MOVW	R1, #1
0x2EEA	0x4831    LDR	R0, [PC, #196]
0x2EEC	0xF7FFFB60  BL	_GPIO_Digital_Input+0
;Init_Routines.c, 42 :: 		DATA_TX[0] = 0;        // Initialize first byte
0x2EF0	0x2100    MOVS	R1, #0
0x2EF2	0xB249    SXTB	R1, R1
0x2EF4	0x4830    LDR	R0, [PC, #192]
0x2EF6	0x7001    STRB	R1, [R0, #0]
;Init_Routines.c, 44 :: 		Delay_ms(5);
0x2EF8	0xF64E275F  MOVW	R7, #59999
0x2EFC	0xF2C00700  MOVT	R7, #0
L_Initialize6:
0x2F00	0x1E7F    SUBS	R7, R7, #1
0x2F02	0xD1FD    BNE	L_Initialize6
0x2F04	0xBF00    NOP
0x2F06	0xBF00    NOP
0x2F08	0xBF00    NOP
0x2F0A	0xBF00    NOP
0x2F0C	0xBF00    NOP
;Init_Routines.c, 50 :: 		&_GPIO_MODULE_SPI3_PC10_11_12);
0x2F0E	0x4A2B    LDR	R2, [PC, #172]
;Init_Routines.c, 49 :: 		_SPI_MSB_FIRST | _SPI_SS_DISABLE | _SPI_SSM_ENABLE | _SPI_SSI_1,
0x2F10	0xF2403104  MOVW	R1, #772
;Init_Routines.c, 47 :: 		SPI3_Init_Advanced(_SPI_FPCLK_DIV4, _SPI_MASTER  | _SPI_8_BIT |
0x2F14	0x2001    MOVS	R0, #1
;Init_Routines.c, 50 :: 		&_GPIO_MODULE_SPI3_PC10_11_12);
0x2F16	0xF7FFFB57  BL	_SPI3_Init_Advanced+0
;Init_Routines.c, 51 :: 		TFT_BLED = 1;                             // Turn on TFT Backlight
0x2F1A	0x2101    MOVS	R1, #1
0x2F1C	0xB249    SXTB	R1, R1
0x2F1E	0x4828    LDR	R0, [PC, #160]
0x2F20	0x6001    STR	R1, [R0, #0]
;Init_Routines.c, 53 :: 		TFT_Init(320, 240);                       // Initialize TFT display
0x2F22	0x21F0    MOVS	R1, #240
0x2F24	0xF2401040  MOVW	R0, #320
0x2F28	0xF7FFF9F6  BL	_TFT_Init+0
;Init_Routines.c, 54 :: 		TFT_Fill_Screen(CL_WHITE);                // Clear Screen
0x2F2C	0xF64F70FF  MOVW	R0, #65535
0x2F30	0xF7FFFD20  BL	_TFT_Fill_Screen+0
;Init_Routines.c, 56 :: 		pin_reset();                              // Activate reset from pin
0x2F34	0xF7FFFCB0  BL	_pin_reset+0
;Init_Routines.c, 57 :: 		software_reset();                         // Activate software reset
0x2F38	0xF7FFFCA0  BL	_software_reset+0
;Init_Routines.c, 58 :: 		RF_reset();                               // RF reset
0x2F3C	0xF7FFFCF0  BL	_RF_reset+0
;Init_Routines.c, 59 :: 		set_WAKE_from_pin();                      // Set wake from pin
0x2F40	0xF7FFFCCA  BL	_set_wake_from_pin+0
;Init_Routines.c, 61 :: 		set_long_address(ADDRESS_long_1);         // Set long address
0x2F44	0x4818    LDR	R0, [PC, #96]
0x2F46	0xF7FFFC49  BL	_set_long_address+0
;Init_Routines.c, 62 :: 		set_short_address(ADDRESS_short_1);       // Set short address
0x2F4A	0x4813    LDR	R0, [PC, #76]
0x2F4C	0xF7FFFC30  BL	_set_short_address+0
;Init_Routines.c, 63 :: 		set_PAN_ID(PAN_ID_1);                     // Set PAN_ID
0x2F50	0x4813    LDR	R0, [PC, #76]
0x2F52	0xF7FFFC7D  BL	_set_PAN_ID+0
;Init_Routines.c, 65 :: 		init_ZIGBEE_nonbeacon();                  // Initialize ZigBee module
0x2F56	0xF7FFFC61  BL	_init_ZIGBEE_nonbeacon+0
;Init_Routines.c, 66 :: 		nonbeacon_PAN_coordinator_device();
0x2F5A	0xF7FFFE5F  BL	_nonbeacon_PAN_coordinator_device+0
;Init_Routines.c, 67 :: 		set_TX_power(31);                         // Set max TX power
0x2F5E	0x201F    MOVS	R0, #31
0x2F60	0xF7FFFE3E  BL	_set_TX_power+0
;Init_Routines.c, 68 :: 		set_frame_format_filter(1);               // 1 all frames, 3 data frame only
0x2F64	0x2001    MOVS	R0, #1
0x2F66	0xB240    SXTB	R0, R0
0x2F68	0xF7FFFDF4  BL	_set_frame_format_filter+0
;Init_Routines.c, 69 :: 		set_reception_mode(1);                    // 1 normal mode
0x2F6C	0x2001    MOVS	R0, #1
0x2F6E	0xB240    SXTB	R0, R0
0x2F70	0xF7FFFD48  BL	_set_reception_mode+0
;Init_Routines.c, 71 :: 		pin_wake();                               // Wake from pin
0x2F74	0xF7FFFD7C  BL	_pin_wake+0
;Init_Routines.c, 72 :: 		}
L_end_Initialize:
0x2F78	0xF8DDE000  LDR	LR, [SP, #0]
0x2F7C	0xB001    ADD	SP, SP, #4
0x2F7E	0x4770    BX	LR
0x2F80	0x00372000  	_LQI+0
0x2F84	0x003A2000  	_RSSI2+0
0x2F88	0x003B2000  	_SEQ_NUMBER+0
0x2F8C	0x003C2000  	_lost_data+0
0x2F90	0x003E2000  	_address_RX_FIFO+0
0x2F94	0x00402000  	_address_TX_normal_FIFO+0
0x2F98	0x00422000  	_ADDRESS_short_1+0
0x2F9C	0x00442000  	_ADDRESS_short_2+0
0x2FA0	0x00462000  	_PAN_ID_1+0
0x2FA4	0x00482000  	_PAN_ID_2+0
0x2FA8	0x004A2000  	_ADDRESS_long_1+0
0x2FAC	0x00522000  	_ADDRESS_long_2+0
0x2FB0	0x14004001  	GPIOD_BASE+0
0x2FB4	0x10004001  	GPIOC_BASE+0
0x2FB8	0x005A2000  	_DATA_TX+0
0x2FBC	0x3A340000  	__GPIO_MODULE_SPI3_PC10_11_12+0
0x2FC0	0x01A44223  	TFT_BLED+0
; end of _Initialize
_GPIO_Digital_Output:
;__Lib_GPIO_32F10x.c, 365 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x24B0	0xB081    SUB	SP, SP, #4
0x24B2	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 366 :: 		
0x24B6	0x4A04    LDR	R2, [PC, #16]
0x24B8	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x24BA	0xF7FFFA1D  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 367 :: 		
L_end_GPIO_Digital_Output:
0x24BE	0xF8DDE000  LDR	LR, [SP, #0]
0x24C2	0xB001    ADD	SP, SP, #4
0x24C4	0x4770    BX	LR
0x24C6	0xBF00    NOP
0x24C8	0x00140008  	#524308
; end of _GPIO_Digital_Output
_GPIO_Config:
;__Lib_GPIO_32F10x.c, 124 :: 		
; config start address is: 8 (R2)
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x18F8	0xB081    SUB	SP, SP, #4
0x18FA	0xF8CDE000  STR	LR, [SP, #0]
0x18FE	0xB28C    UXTH	R4, R1
0x1900	0x4615    MOV	R5, R2
; config end address is: 8 (R2)
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 16 (R4)
; config start address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 129 :: 		
0x1902	0x4B77    LDR	R3, [PC, #476]
0x1904	0xEA000303  AND	R3, R0, R3, LSL #0
; port end address is: 0 (R0)
; port start address is: 24 (R6)
0x1908	0x461E    MOV	R6, R3
;__Lib_GPIO_32F10x.c, 131 :: 		
0x190A	0x4618    MOV	R0, R3
0x190C	0xF7FEFEAA  BL	_GPIO_Clk_Enable+0
;__Lib_GPIO_32F10x.c, 134 :: 		
0x1910	0xF1B40FFF  CMP	R4, #255
0x1914	0xD10C    BNE	L_GPIO_Config18
;__Lib_GPIO_32F10x.c, 135 :: 		
0x1916	0x4B73    LDR	R3, [PC, #460]
0x1918	0x429D    CMP	R5, R3
0x191A	0xD103    BNE	L_GPIO_Config19
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 136 :: 		
0x191C	0xF04F3333  MOV	R3, #858993459
0x1920	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 137 :: 		
0x1922	0xE0D9    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 138 :: 		
L_GPIO_Config19:
;__Lib_GPIO_32F10x.c, 139 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x1924	0x2D42    CMP	R5, #66
0x1926	0xD103    BNE	L_GPIO_Config20
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 140 :: 		
0x1928	0xF04F3344  MOV	R3, #1145324612
0x192C	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 141 :: 		
0x192E	0xE0D3    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 142 :: 		
L_GPIO_Config20:
;__Lib_GPIO_32F10x.c, 143 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config18:
;__Lib_GPIO_32F10x.c, 145 :: 		
0x1930	0xF64F73FF  MOVW	R3, #65535
0x1934	0x429C    CMP	R4, R3
0x1936	0xD114    BNE	L_GPIO_Config21
;__Lib_GPIO_32F10x.c, 146 :: 		
0x1938	0x4B6A    LDR	R3, [PC, #424]
0x193A	0x429D    CMP	R5, R3
0x193C	0xD107    BNE	L_GPIO_Config22
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 147 :: 		
0x193E	0xF04F3333  MOV	R3, #858993459
0x1942	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 148 :: 		
0x1944	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x1946	0xF04F3333  MOV	R3, #858993459
0x194A	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 149 :: 		
0x194C	0xE0C4    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 150 :: 		
L_GPIO_Config22:
;__Lib_GPIO_32F10x.c, 151 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x194E	0x2D42    CMP	R5, #66
0x1950	0xD107    BNE	L_GPIO_Config23
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 152 :: 		
0x1952	0xF04F3344  MOV	R3, #1145324612
0x1956	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 153 :: 		
0x1958	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x195A	0xF04F3344  MOV	R3, #1145324612
0x195E	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 154 :: 		
0x1960	0xE0BA    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 155 :: 		
L_GPIO_Config23:
;__Lib_GPIO_32F10x.c, 156 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config21:
;__Lib_GPIO_32F10x.c, 158 :: 		
; currentmode start address is: 4 (R1)
0x1962	0x2100    MOVS	R1, #0
;__Lib_GPIO_32F10x.c, 159 :: 		
; speed start address is: 0 (R0)
0x1964	0x2000    MOVS	R0, #0
;__Lib_GPIO_32F10x.c, 161 :: 		
0x1966	0xF0050301  AND	R3, R5, #1
0x196A	0xB10B    CBZ	R3, L_GPIO_Config24
;__Lib_GPIO_32F10x.c, 162 :: 		
0x196C	0x2100    MOVS	R1, #0
0x196E	0xE01D    B	L_GPIO_Config25
L_GPIO_Config24:
;__Lib_GPIO_32F10x.c, 163 :: 		
0x1970	0xF0050302  AND	R3, R5, #2
0x1974	0xB133    CBZ	R3, L_GPIO_Config26
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 164 :: 		
0x1976	0xF40573C0  AND	R3, R5, #384
0x197A	0xB10B    CBZ	R3, L_GPIO_Config27
;__Lib_GPIO_32F10x.c, 165 :: 		
; currentmode start address is: 4 (R1)
0x197C	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
0x197E	0xE000    B	L_GPIO_Config28
L_GPIO_Config27:
;__Lib_GPIO_32F10x.c, 167 :: 		
; currentmode start address is: 4 (R1)
0x1980	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
L_GPIO_Config28:
;__Lib_GPIO_32F10x.c, 168 :: 		
; currentmode start address is: 4 (R1)
0x1982	0xE013    B	L_GPIO_Config29
L_GPIO_Config26:
;__Lib_GPIO_32F10x.c, 169 :: 		
0x1984	0xF0050304  AND	R3, R5, #4
0x1988	0xB133    CBZ	R3, L_GPIO_Config30
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 170 :: 		
0x198A	0xF0050320  AND	R3, R5, #32
0x198E	0xB10B    CBZ	R3, L_GPIO_Config31
;__Lib_GPIO_32F10x.c, 171 :: 		
; currentmode start address is: 4 (R1)
0x1990	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
0x1992	0xE000    B	L_GPIO_Config32
L_GPIO_Config31:
;__Lib_GPIO_32F10x.c, 173 :: 		
; currentmode start address is: 4 (R1)
0x1994	0x2100    MOVS	R1, #0
; currentmode end address is: 4 (R1)
L_GPIO_Config32:
;__Lib_GPIO_32F10x.c, 174 :: 		
; currentmode start address is: 4 (R1)
0x1996	0xE009    B	L_GPIO_Config33
L_GPIO_Config30:
;__Lib_GPIO_32F10x.c, 175 :: 		
0x1998	0xF0050308  AND	R3, R5, #8
0x199C	0xB133    CBZ	R3, L__GPIO_Config100
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 176 :: 		
0x199E	0xF0050320  AND	R3, R5, #32
0x19A2	0xB10B    CBZ	R3, L_GPIO_Config35
;__Lib_GPIO_32F10x.c, 177 :: 		
; currentmode start address is: 4 (R1)
0x19A4	0x210C    MOVS	R1, #12
; currentmode end address is: 4 (R1)
0x19A6	0xE000    B	L_GPIO_Config36
L_GPIO_Config35:
;__Lib_GPIO_32F10x.c, 179 :: 		
; currentmode start address is: 4 (R1)
0x19A8	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
L_GPIO_Config36:
;__Lib_GPIO_32F10x.c, 180 :: 		
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
0x19AA	0xE7FF    B	L_GPIO_Config34
L__GPIO_Config100:
;__Lib_GPIO_32F10x.c, 175 :: 		
;__Lib_GPIO_32F10x.c, 180 :: 		
L_GPIO_Config34:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config33:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config29:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config25:
;__Lib_GPIO_32F10x.c, 182 :: 		
; currentmode start address is: 4 (R1)
0x19AC	0x4B4E    LDR	R3, [PC, #312]
0x19AE	0xEA050303  AND	R3, R5, R3, LSL #0
0x19B2	0xB10B    CBZ	R3, L_GPIO_Config37
;__Lib_GPIO_32F10x.c, 183 :: 		
0x19B4	0x2003    MOVS	R0, #3
0x19B6	0xE009    B	L_GPIO_Config38
L_GPIO_Config37:
;__Lib_GPIO_32F10x.c, 184 :: 		
0x19B8	0xF4057300  AND	R3, R5, #512
0x19BC	0xB10B    CBZ	R3, L_GPIO_Config39
;__Lib_GPIO_32F10x.c, 185 :: 		
0x19BE	0x2002    MOVS	R0, #2
0x19C0	0xE004    B	L_GPIO_Config40
L_GPIO_Config39:
;__Lib_GPIO_32F10x.c, 186 :: 		
0x19C2	0xF4056380  AND	R3, R5, #1024
0x19C6	0xB10B    CBZ	R3, L__GPIO_Config101
;__Lib_GPIO_32F10x.c, 187 :: 		
0x19C8	0x2001    MOVS	R0, #1
; speed end address is: 0 (R0)
0x19CA	0xE7FF    B	L_GPIO_Config41
L__GPIO_Config101:
;__Lib_GPIO_32F10x.c, 186 :: 		
;__Lib_GPIO_32F10x.c, 187 :: 		
L_GPIO_Config41:
; speed start address is: 0 (R0)
; speed end address is: 0 (R0)
L_GPIO_Config40:
; speed start address is: 0 (R0)
; speed end address is: 0 (R0)
L_GPIO_Config38:
;__Lib_GPIO_32F10x.c, 189 :: 		
; speed start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 195 :: 		
0x19CC	0xF005030C  AND	R3, R5, #12
0x19D0	0xB10B    CBZ	R3, L__GPIO_Config102
;__Lib_GPIO_32F10x.c, 198 :: 		
0x19D2	0x4301    ORRS	R1, R0
; speed end address is: 0 (R0)
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 199 :: 		
0x19D4	0xE7FF    B	L_GPIO_Config42
L__GPIO_Config102:
;__Lib_GPIO_32F10x.c, 195 :: 		
;__Lib_GPIO_32F10x.c, 199 :: 		
L_GPIO_Config42:
;__Lib_GPIO_32F10x.c, 201 :: 		
; currentmode start address is: 4 (R1)
0x19D6	0xF00403FF  AND	R3, R4, #255
0x19DA	0xB29B    UXTH	R3, R3
0x19DC	0x2B00    CMP	R3, #0
0x19DE	0xD03B    BEQ	L__GPIO_Config104
;__Lib_GPIO_32F10x.c, 202 :: 		
0x19E0	0x6837    LDR	R7, [R6, #0]
; tmpreg start address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 204 :: 		
; pinpos start address is: 0 (R0)
0x19E2	0x2000    MOVS	R0, #0
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
; currentmode end address is: 4 (R1)
; tmpreg end address is: 28 (R7)
; pinpos end address is: 0 (R0)
; port end address is: 24 (R6)
0x19E4	0xFA1FF884  UXTH	R8, R4
0x19E8	0x4632    MOV	R2, R6
0x19EA	0x462E    MOV	R6, R5
L_GPIO_Config44:
; pinpos start address is: 0 (R0)
; tmpreg start address is: 28 (R7)
; currentmode start address is: 4 (R1)
; port start address is: 8 (R2)
; config start address is: 24 (R6)
; pin_mask start address is: 32 (R8)
0x19EC	0x2808    CMP	R0, #8
0x19EE	0xD22C    BCS	L_GPIO_Config45
;__Lib_GPIO_32F10x.c, 206 :: 		
0x19F0	0xF04F0301  MOV	R3, #1
0x19F4	0xFA03F400  LSL	R4, R3, R0
;__Lib_GPIO_32F10x.c, 208 :: 		
0x19F8	0xEA080304  AND	R3, R8, R4, LSL #0
;__Lib_GPIO_32F10x.c, 210 :: 		
0x19FC	0x42A3    CMP	R3, R4
0x19FE	0xD122    BNE	L__GPIO_Config103
;__Lib_GPIO_32F10x.c, 212 :: 		
0x1A00	0x0085    LSLS	R5, R0, #2
;__Lib_GPIO_32F10x.c, 214 :: 		
0x1A02	0xF04F030F  MOV	R3, #15
0x1A06	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 215 :: 		
0x1A08	0x43DB    MVN	R3, R3
0x1A0A	0xEA070403  AND	R4, R7, R3, LSL #0
; tmpreg end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 218 :: 		
0x1A0E	0xFA01F305  LSL	R3, R1, R5
0x1A12	0xEA440303  ORR	R3, R4, R3, LSL #0
; tmpreg start address is: 20 (R5)
0x1A16	0x461D    MOV	R5, R3
;__Lib_GPIO_32F10x.c, 221 :: 		
0x1A18	0xF4067381  AND	R3, R6, #258
0x1A1C	0xF5B37F81  CMP	R3, #258
0x1A20	0xD105    BNE	L_GPIO_Config48
;__Lib_GPIO_32F10x.c, 223 :: 		
0x1A22	0xF2020414  ADDW	R4, R2, #20
0x1A26	0xF04F0301  MOV	R3, #1
0x1A2A	0x4083    LSLS	R3, R0
0x1A2C	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 224 :: 		
L_GPIO_Config48:
;__Lib_GPIO_32F10x.c, 226 :: 		
0x1A2E	0xF0060382  AND	R3, R6, #130
0x1A32	0x2B82    CMP	R3, #130
0x1A34	0xD105    BNE	L_GPIO_Config49
;__Lib_GPIO_32F10x.c, 228 :: 		
0x1A36	0xF2020410  ADDW	R4, R2, #16
0x1A3A	0xF04F0301  MOV	R3, #1
0x1A3E	0x4083    LSLS	R3, R0
0x1A40	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 229 :: 		
L_GPIO_Config49:
;__Lib_GPIO_32F10x.c, 230 :: 		
0x1A42	0x462F    MOV	R7, R5
0x1A44	0xE7FF    B	L_GPIO_Config47
; tmpreg end address is: 20 (R5)
L__GPIO_Config103:
;__Lib_GPIO_32F10x.c, 210 :: 		
;__Lib_GPIO_32F10x.c, 230 :: 		
L_GPIO_Config47:
;__Lib_GPIO_32F10x.c, 204 :: 		
; tmpreg start address is: 28 (R7)
0x1A46	0x1C40    ADDS	R0, R0, #1
;__Lib_GPIO_32F10x.c, 231 :: 		
; pinpos end address is: 0 (R0)
0x1A48	0xE7D0    B	L_GPIO_Config44
L_GPIO_Config45:
;__Lib_GPIO_32F10x.c, 232 :: 		
0x1A4A	0x6017    STR	R7, [R2, #0]
; currentmode end address is: 4 (R1)
; port end address is: 8 (R2)
; config end address is: 24 (R6)
; pin_mask end address is: 32 (R8)
; tmpreg end address is: 28 (R7)
0x1A4C	0xFA1FF088  UXTH	R0, R8
0x1A50	0x460F    MOV	R7, R1
0x1A52	0x4631    MOV	R1, R6
0x1A54	0x4616    MOV	R6, R2
;__Lib_GPIO_32F10x.c, 234 :: 		
0x1A56	0xE002    B	L_GPIO_Config43
L__GPIO_Config104:
;__Lib_GPIO_32F10x.c, 201 :: 		
0x1A58	0x460F    MOV	R7, R1
0x1A5A	0x4629    MOV	R1, R5
0x1A5C	0xB2A0    UXTH	R0, R4
;__Lib_GPIO_32F10x.c, 234 :: 		
L_GPIO_Config43:
;__Lib_GPIO_32F10x.c, 238 :: 		
; currentmode start address is: 28 (R7)
; port start address is: 24 (R6)
; config start address is: 4 (R1)
; pin_mask start address is: 0 (R0)
0x1A5E	0xF1B00FFF  CMP	R0, #255
0x1A62	0xD939    BLS	L_GPIO_Config50
;__Lib_GPIO_32F10x.c, 240 :: 		
0x1A64	0x1D33    ADDS	R3, R6, #4
0x1A66	0xF8D38000  LDR	R8, [R3, #0]
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 241 :: 		
; pinpos start address is: 8 (R2)
0x1A6A	0x2200    MOVS	R2, #0
; port end address is: 24 (R6)
; tmpreg end address is: 32 (R8)
; pinpos end address is: 8 (R2)
L_GPIO_Config51:
; pinpos start address is: 8 (R2)
; tmpreg start address is: 32 (R8)
; pin_mask start address is: 0 (R0)
; pin_mask end address is: 0 (R0)
; config start address is: 4 (R1)
; config end address is: 4 (R1)
; port start address is: 24 (R6)
; currentmode start address is: 28 (R7)
; currentmode end address is: 28 (R7)
0x1A6C	0x2A08    CMP	R2, #8
0x1A6E	0xD230    BCS	L_GPIO_Config52
; pin_mask end address is: 0 (R0)
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 243 :: 		
; currentmode start address is: 28 (R7)
; config start address is: 4 (R1)
; pin_mask start address is: 0 (R0)
0x1A70	0xF2020408  ADDW	R4, R2, #8
0x1A74	0xF04F0301  MOV	R3, #1
0x1A78	0xFA03F404  LSL	R4, R3, R4
;__Lib_GPIO_32F10x.c, 245 :: 		
0x1A7C	0xEA000304  AND	R3, R0, R4, LSL #0
;__Lib_GPIO_32F10x.c, 246 :: 		
0x1A80	0x42A3    CMP	R3, R4
0x1A82	0xD124    BNE	L__GPIO_Config105
;__Lib_GPIO_32F10x.c, 248 :: 		
0x1A84	0x0095    LSLS	R5, R2, #2
;__Lib_GPIO_32F10x.c, 250 :: 		
0x1A86	0xF04F030F  MOV	R3, #15
0x1A8A	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 251 :: 		
0x1A8C	0x43DB    MVN	R3, R3
0x1A8E	0xEA080803  AND	R8, R8, R3, LSL #0
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 254 :: 		
0x1A92	0xFA07F305  LSL	R3, R7, R5
0x1A96	0xEA480803  ORR	R8, R8, R3, LSL #0
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 257 :: 		
0x1A9A	0xF4017381  AND	R3, R1, #258
0x1A9E	0xF5B37F81  CMP	R3, #258
0x1AA2	0xD107    BNE	L_GPIO_Config55
;__Lib_GPIO_32F10x.c, 259 :: 		
0x1AA4	0xF2060514  ADDW	R5, R6, #20
0x1AA8	0xF2020408  ADDW	R4, R2, #8
0x1AAC	0xF04F0301  MOV	R3, #1
0x1AB0	0x40A3    LSLS	R3, R4
0x1AB2	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 260 :: 		
L_GPIO_Config55:
;__Lib_GPIO_32F10x.c, 262 :: 		
0x1AB4	0xF0010382  AND	R3, R1, #130
0x1AB8	0x2B82    CMP	R3, #130
0x1ABA	0xD107    BNE	L_GPIO_Config56
;__Lib_GPIO_32F10x.c, 264 :: 		
0x1ABC	0xF2060510  ADDW	R5, R6, #16
0x1AC0	0xF2020408  ADDW	R4, R2, #8
0x1AC4	0xF04F0301  MOV	R3, #1
0x1AC8	0x40A3    LSLS	R3, R4
0x1ACA	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 265 :: 		
L_GPIO_Config56:
;__Lib_GPIO_32F10x.c, 266 :: 		
0x1ACC	0xE7FF    B	L_GPIO_Config54
; tmpreg end address is: 32 (R8)
L__GPIO_Config105:
;__Lib_GPIO_32F10x.c, 246 :: 		
;__Lib_GPIO_32F10x.c, 266 :: 		
L_GPIO_Config54:
;__Lib_GPIO_32F10x.c, 241 :: 		
; tmpreg start address is: 32 (R8)
0x1ACE	0x1C52    ADDS	R2, R2, #1
;__Lib_GPIO_32F10x.c, 267 :: 		
; pin_mask end address is: 0 (R0)
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
; pinpos end address is: 8 (R2)
0x1AD0	0xE7CC    B	L_GPIO_Config51
L_GPIO_Config52:
;__Lib_GPIO_32F10x.c, 268 :: 		
0x1AD2	0x1D33    ADDS	R3, R6, #4
; port end address is: 24 (R6)
0x1AD4	0xF8C38000  STR	R8, [R3, #0]
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 269 :: 		
L_GPIO_Config50:
;__Lib_GPIO_32F10x.c, 270 :: 		
L_end_GPIO_Config:
0x1AD8	0xF8DDE000  LDR	LR, [SP, #0]
0x1ADC	0xB001    ADD	SP, SP, #4
0x1ADE	0x4770    BX	LR
0x1AE0	0xFC00FFFF  	#-1024
0x1AE4	0x00140008  	#524308
0x1AE8	0x08000008  	#526336
; end of _GPIO_Config
_GPIO_Clk_Enable:
;__Lib_GPIO_32F10x.c, 83 :: 		
; gpio_port start address is: 0 (R0)
0x0664	0xB081    SUB	SP, SP, #4
; gpio_port end address is: 0 (R0)
; gpio_port start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 85 :: 		
0x0666	0x4919    LDR	R1, [PC, #100]
0x0668	0xEA000101  AND	R1, R0, R1, LSL #0
; gpio_port end address is: 0 (R0)
; prt start address is: 0 (R0)
0x066C	0x4608    MOV	R0, R1
;__Lib_GPIO_32F10x.c, 86 :: 		
; pos start address is: 8 (R2)
0x066E	0x2200    MOVS	R2, #0
;__Lib_GPIO_32F10x.c, 87 :: 		
0x0670	0xE00E    B	L_GPIO_Clk_Enable0
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 88 :: 		
L_GPIO_Clk_Enable2:
; pos start address is: 0 (R0)
0x0672	0x2004    MOVS	R0, #4
; pos end address is: 0 (R0)
0x0674	0xE022    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 89 :: 		
L_GPIO_Clk_Enable3:
; pos start address is: 0 (R0)
0x0676	0x2008    MOVS	R0, #8
; pos end address is: 0 (R0)
0x0678	0xE020    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 90 :: 		
L_GPIO_Clk_Enable4:
; pos start address is: 0 (R0)
0x067A	0x2010    MOVS	R0, #16
; pos end address is: 0 (R0)
0x067C	0xE01E    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 91 :: 		
L_GPIO_Clk_Enable5:
; pos start address is: 0 (R0)
0x067E	0x2020    MOVS	R0, #32
; pos end address is: 0 (R0)
0x0680	0xE01C    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 92 :: 		
L_GPIO_Clk_Enable6:
; pos start address is: 0 (R0)
0x0682	0x2040    MOVS	R0, #64
; pos end address is: 0 (R0)
0x0684	0xE01A    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 93 :: 		
L_GPIO_Clk_Enable7:
; pos start address is: 0 (R0)
0x0686	0x2080    MOVS	R0, #128
; pos end address is: 0 (R0)
0x0688	0xE018    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 94 :: 		
L_GPIO_Clk_Enable8:
; pos start address is: 0 (R0)
0x068A	0xF2401000  MOVW	R0, #256
; pos end address is: 0 (R0)
0x068E	0xE015    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 95 :: 		
L_GPIO_Clk_Enable0:
; pos start address is: 8 (R2)
; prt start address is: 0 (R0)
0x0690	0x490F    LDR	R1, [PC, #60]
0x0692	0x4288    CMP	R0, R1
0x0694	0xD0ED    BEQ	L_GPIO_Clk_Enable2
0x0696	0x490F    LDR	R1, [PC, #60]
0x0698	0x4288    CMP	R0, R1
0x069A	0xD0EC    BEQ	L_GPIO_Clk_Enable3
0x069C	0x490E    LDR	R1, [PC, #56]
0x069E	0x4288    CMP	R0, R1
0x06A0	0xD0EB    BEQ	L_GPIO_Clk_Enable4
0x06A2	0x490E    LDR	R1, [PC, #56]
0x06A4	0x4288    CMP	R0, R1
0x06A6	0xD0EA    BEQ	L_GPIO_Clk_Enable5
0x06A8	0x490D    LDR	R1, [PC, #52]
0x06AA	0x4288    CMP	R0, R1
0x06AC	0xD0E9    BEQ	L_GPIO_Clk_Enable6
0x06AE	0x490D    LDR	R1, [PC, #52]
0x06B0	0x4288    CMP	R0, R1
0x06B2	0xD0E8    BEQ	L_GPIO_Clk_Enable7
0x06B4	0x490C    LDR	R1, [PC, #48]
0x06B6	0x4288    CMP	R0, R1
0x06B8	0xD0E7    BEQ	L_GPIO_Clk_Enable8
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
0x06BA	0x4610    MOV	R0, R2
L_GPIO_Clk_Enable1:
;__Lib_GPIO_32F10x.c, 97 :: 		
; pos start address is: 0 (R0)
0x06BC	0x490B    LDR	R1, [PC, #44]
0x06BE	0x6809    LDR	R1, [R1, #0]
0x06C0	0xEA410200  ORR	R2, R1, R0, LSL #0
; pos end address is: 0 (R0)
0x06C4	0x4909    LDR	R1, [PC, #36]
0x06C6	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 98 :: 		
L_end_GPIO_Clk_Enable:
0x06C8	0xB001    ADD	SP, SP, #4
0x06CA	0x4770    BX	LR
0x06CC	0xFC00FFFF  	#-1024
0x06D0	0x08004001  	#1073809408
0x06D4	0x0C004001  	#1073810432
0x06D8	0x10004001  	#1073811456
0x06DC	0x14004001  	#1073812480
0x06E0	0x18004001  	#1073813504
0x06E4	0x1C004001  	#1073814528
0x06E8	0x20004001  	#1073815552
0x06EC	0x10184002  	RCC_APB2ENR+0
; end of _GPIO_Clk_Enable
_GPIO_Digital_Input:
;__Lib_GPIO_32F10x.c, 369 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x25B0	0xB081    SUB	SP, SP, #4
0x25B2	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 370 :: 		
0x25B6	0xF04F0242  MOV	R2, #66
0x25BA	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x25BC	0xF7FFF99C  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 371 :: 		
L_end_GPIO_Digital_Input:
0x25C0	0xF8DDE000  LDR	LR, [SP, #0]
0x25C4	0xB001    ADD	SP, SP, #4
0x25C6	0x4770    BX	LR
; end of _GPIO_Digital_Input
_SPI3_Init_Advanced:
;__Lib_SPI_123.c, 133 :: 		
; module start address is: 8 (R2)
0x25C8	0xB083    SUB	SP, SP, #12
0x25CA	0xF8CDE000  STR	LR, [SP, #0]
0x25CE	0xF88D0004  STRB	R0, [SP, #4]
0x25D2	0x9102    STR	R1, [SP, #8]
; module end address is: 8 (R2)
; module start address is: 8 (R2)
;__Lib_SPI_123.c, 134 :: 		
0x25D4	0x4C0B    LDR	R4, [PC, #44]
0x25D6	0x4B0C    LDR	R3, [PC, #48]
0x25D8	0x601C    STR	R4, [R3, #0]
;__Lib_SPI_123.c, 135 :: 		
0x25DA	0x4C0C    LDR	R4, [PC, #48]
0x25DC	0x4B0C    LDR	R3, [PC, #48]
0x25DE	0x601C    STR	R4, [R3, #0]
;__Lib_SPI_123.c, 137 :: 		
0x25E0	0x2401    MOVS	R4, #1
0x25E2	0xB264    SXTB	R4, R4
0x25E4	0x4B0B    LDR	R3, [PC, #44]
0x25E6	0x601C    STR	R4, [R3, #0]
;__Lib_SPI_123.c, 138 :: 		
0x25E8	0x4610    MOV	R0, R2
; module end address is: 8 (R2)
0x25EA	0xF7FFFBFB  BL	_GPIO_Alternate_Function_Enable+0
;__Lib_SPI_123.c, 140 :: 		
0x25EE	0x9A02    LDR	R2, [SP, #8]
0x25F0	0xF89D1004  LDRB	R1, [SP, #4]
0x25F4	0x4808    LDR	R0, [PC, #32]
0x25F6	0xF7FFFA81  BL	__Lib_SPI_123_SPIx_Init_Advanced+0
;__Lib_SPI_123.c, 141 :: 		
L_end_SPI3_Init_Advanced:
0x25FA	0xF8DDE000  LDR	LR, [SP, #0]
0x25FE	0xB003    ADD	SP, SP, #12
0x2600	0x4770    BX	LR
0x2602	0xBF00    NOP
0x2604	0x02B50000  	_SPI3_Read+0
0x2608	0x008C2000  	_SPI_Rd_Ptr+0
0x260C	0x21750000  	_SPI3_Write+0
0x2610	0x00902000  	_SPI_Wr_Ptr+0
0x2614	0x03BC4242  	RCC_APB1ENR+0
0x2618	0x3C004000  	SPI3_CR1+0
; end of _SPI3_Init_Advanced
_GPIO_Alternate_Function_Enable:
;__Lib_GPIO_32F10x.c, 303 :: 		
; module start address is: 0 (R0)
0x1DE4	0xB081    SUB	SP, SP, #4
0x1DE6	0xF8CDE000  STR	LR, [SP, #0]
; module end address is: 0 (R0)
; module start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 304 :: 		
;__Lib_GPIO_32F10x.c, 305 :: 		
;__Lib_GPIO_32F10x.c, 307 :: 		
0x1DEA	0x2201    MOVS	R2, #1
0x1DEC	0xB252    SXTB	R2, R2
0x1DEE	0x493E    LDR	R1, [PC, #248]
0x1DF0	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 309 :: 		
0x1DF2	0xF2000168  ADDW	R1, R0, #104
0x1DF6	0x680B    LDR	R3, [R1, #0]
0x1DF8	0xF06F6100  MVN	R1, #134217728
0x1DFC	0xEA030201  AND	R2, R3, R1, LSL #0
; gpio_remap start address is: 16 (R4)
0x1E00	0x4614    MOV	R4, R2
;__Lib_GPIO_32F10x.c, 310 :: 		
0x1E02	0xF0036100  AND	R1, R3, #134217728
0x1E06	0x0EC9    LSRS	R1, R1, #27
; newstate start address is: 12 (R3)
0x1E08	0x460B    MOV	R3, R1
;__Lib_GPIO_32F10x.c, 312 :: 		
0x1E0A	0xF0024100  AND	R1, R2, #-2147483648
0x1E0E	0xF1B14F00  CMP	R1, #-2147483648
0x1E12	0xD102    BNE	L_GPIO_Alternate_Function_Enable66
;__Lib_GPIO_32F10x.c, 314 :: 		
0x1E14	0x4935    LDR	R1, [PC, #212]
; tmpreg start address is: 8 (R2)
0x1E16	0x680A    LDR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 315 :: 		
; tmpreg end address is: 8 (R2)
0x1E18	0xE001    B	L_GPIO_Alternate_Function_Enable67
L_GPIO_Alternate_Function_Enable66:
;__Lib_GPIO_32F10x.c, 318 :: 		
0x1E1A	0x4935    LDR	R1, [PC, #212]
; tmpreg start address is: 8 (R2)
0x1E1C	0x680A    LDR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 319 :: 		
L_GPIO_Alternate_Function_Enable67:
;__Lib_GPIO_32F10x.c, 321 :: 		
; tmpreg start address is: 8 (R2)
0x1E1E	0xF4042170  AND	R1, R4, #983040
0x1E22	0x0C09    LSRS	R1, R1, #16
; tmpmask start address is: 24 (R6)
0x1E24	0x460E    MOV	R6, R1
;__Lib_GPIO_32F10x.c, 322 :: 		
0x1E26	0xF64F71FF  MOVW	R1, #65535
0x1E2A	0xEA040101  AND	R1, R4, R1, LSL #0
; tmp start address is: 20 (R5)
0x1E2E	0x460D    MOV	R5, R1
;__Lib_GPIO_32F10x.c, 324 :: 		
0x1E30	0xF4041140  AND	R1, R4, #3145728
0x1E34	0xF5B11F40  CMP	R1, #3145728
0x1E38	0xD10D    BNE	L_GPIO_Alternate_Function_Enable68
; tmpmask end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 326 :: 		
0x1E3A	0xF06F6170  MVN	R1, #251658240
0x1E3E	0xEA020101  AND	R1, R2, R1, LSL #0
; tmpreg end address is: 8 (R2)
; tmpreg start address is: 24 (R6)
0x1E42	0x460E    MOV	R6, R1
;__Lib_GPIO_32F10x.c, 327 :: 		
0x1E44	0x492A    LDR	R1, [PC, #168]
0x1E46	0x680A    LDR	R2, [R1, #0]
0x1E48	0xF06F6170  MVN	R1, #251658240
0x1E4C	0x400A    ANDS	R2, R1
0x1E4E	0x4928    LDR	R1, [PC, #160]
0x1E50	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 328 :: 		
0x1E52	0x4632    MOV	R2, R6
; tmpreg end address is: 24 (R6)
0x1E54	0xE016    B	L_GPIO_Alternate_Function_Enable69
L_GPIO_Alternate_Function_Enable68:
;__Lib_GPIO_32F10x.c, 329 :: 		
; tmpreg start address is: 8 (R2)
; tmpmask start address is: 24 (R6)
0x1E56	0xF4041180  AND	R1, R4, #1048576
0x1E5A	0xF5B11F80  CMP	R1, #1048576
0x1E5E	0xD109    BNE	L_GPIO_Alternate_Function_Enable70
;__Lib_GPIO_32F10x.c, 331 :: 		
0x1E60	0xF04F0103  MOV	R1, #3
0x1E64	0x40B1    LSLS	R1, R6
; tmpmask end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 332 :: 		
0x1E66	0x43C9    MVN	R1, R1
0x1E68	0xEA020101  AND	R1, R2, R1, LSL #0
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 333 :: 		
0x1E6C	0xF0416170  ORR	R1, R1, #251658240
; tmpreg start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 334 :: 		
0x1E70	0x460A    MOV	R2, R1
; tmpreg end address is: 4 (R1)
0x1E72	0xE007    B	L_GPIO_Alternate_Function_Enable71
L_GPIO_Alternate_Function_Enable70:
;__Lib_GPIO_32F10x.c, 337 :: 		
; tmpreg start address is: 8 (R2)
0x1E74	0x0D61    LSRS	R1, R4, #21
0x1E76	0x0109    LSLS	R1, R1, #4
0x1E78	0xFA05F101  LSL	R1, R5, R1
0x1E7C	0x43C9    MVN	R1, R1
0x1E7E	0x400A    ANDS	R2, R1
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 338 :: 		
0x1E80	0xF0426270  ORR	R2, R2, #251658240
; tmpreg start address is: 8 (R2)
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 339 :: 		
L_GPIO_Alternate_Function_Enable71:
; tmpreg start address is: 8 (R2)
; tmpreg end address is: 8 (R2)
L_GPIO_Alternate_Function_Enable69:
;__Lib_GPIO_32F10x.c, 341 :: 		
; tmpreg start address is: 8 (R2)
0x1E84	0xB12B    CBZ	R3, L__GPIO_Alternate_Function_Enable106
; newstate end address is: 12 (R3)
;__Lib_GPIO_32F10x.c, 343 :: 		
0x1E86	0x0D61    LSRS	R1, R4, #21
0x1E88	0x0109    LSLS	R1, R1, #4
0x1E8A	0xFA05F101  LSL	R1, R5, R1
; tmp end address is: 20 (R5)
0x1E8E	0x430A    ORRS	R2, R1
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 344 :: 		
0x1E90	0xE7FF    B	L_GPIO_Alternate_Function_Enable72
L__GPIO_Alternate_Function_Enable106:
;__Lib_GPIO_32F10x.c, 341 :: 		
;__Lib_GPIO_32F10x.c, 344 :: 		
L_GPIO_Alternate_Function_Enable72:
;__Lib_GPIO_32F10x.c, 346 :: 		
; tmpreg start address is: 8 (R2)
0x1E92	0xF0044100  AND	R1, R4, #-2147483648
; gpio_remap end address is: 16 (R4)
0x1E96	0xF1B14F00  CMP	R1, #-2147483648
0x1E9A	0xD102    BNE	L_GPIO_Alternate_Function_Enable73
;__Lib_GPIO_32F10x.c, 348 :: 		
0x1E9C	0x4913    LDR	R1, [PC, #76]
0x1E9E	0x600A    STR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 349 :: 		
0x1EA0	0xE001    B	L_GPIO_Alternate_Function_Enable74
L_GPIO_Alternate_Function_Enable73:
;__Lib_GPIO_32F10x.c, 352 :: 		
; tmpreg start address is: 8 (R2)
0x1EA2	0x4913    LDR	R1, [PC, #76]
0x1EA4	0x600A    STR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 353 :: 		
L_GPIO_Alternate_Function_Enable74:
;__Lib_GPIO_32F10x.c, 356 :: 		
; i start address is: 40 (R10)
0x1EA6	0xF2400A00  MOVW	R10, #0
; module end address is: 0 (R0)
; i end address is: 40 (R10)
0x1EAA	0x4681    MOV	R9, R0
;__Lib_GPIO_32F10x.c, 357 :: 		
L_GPIO_Alternate_Function_Enable75:
; i start address is: 40 (R10)
; module start address is: 36 (R9)
0x1EAC	0xEA4F018A  LSL	R1, R10, #2
0x1EB0	0xEB090101  ADD	R1, R9, R1, LSL #0
0x1EB4	0x6809    LDR	R1, [R1, #0]
0x1EB6	0xF1B13FFF  CMP	R1, #-1
0x1EBA	0xD010    BEQ	L_GPIO_Alternate_Function_Enable76
;__Lib_GPIO_32F10x.c, 358 :: 		
0x1EBC	0xF1090134  ADD	R1, R9, #52
0x1EC0	0xEA4F038A  LSL	R3, R10, #2
0x1EC4	0x18C9    ADDS	R1, R1, R3
0x1EC6	0x6809    LDR	R1, [R1, #0]
0x1EC8	0x460A    MOV	R2, R1
0x1ECA	0xEB090103  ADD	R1, R9, R3, LSL #0
0x1ECE	0x6809    LDR	R1, [R1, #0]
0x1ED0	0x4608    MOV	R0, R1
0x1ED2	0x4611    MOV	R1, R2
0x1ED4	0xF7FEFAF8  BL	__Lib_GPIO_32F10x_GPIO_Configure_Pin+0
;__Lib_GPIO_32F10x.c, 359 :: 		
0x1ED8	0xF10A0A01  ADD	R10, R10, #1
;__Lib_GPIO_32F10x.c, 360 :: 		
; module end address is: 36 (R9)
; i end address is: 40 (R10)
0x1EDC	0xE7E6    B	L_GPIO_Alternate_Function_Enable75
L_GPIO_Alternate_Function_Enable76:
;__Lib_GPIO_32F10x.c, 363 :: 		
L_end_GPIO_Alternate_Function_Enable:
0x1EDE	0xF8DDE000  LDR	LR, [SP, #0]
0x1EE2	0xB001    ADD	SP, SP, #4
0x1EE4	0x4770    BX	LR
0x1EE6	0xBF00    NOP
0x1EE8	0x03004242  	RCC_APB2ENRbits+0
0x1EEC	0x001C4001  	AFIO_MAPR2+0
0x1EF0	0x00044001  	AFIO_MAPR+0
; end of _GPIO_Alternate_Function_Enable
__Lib_GPIO_32F10x_GPIO_Configure_Pin:
;__Lib_GPIO_32F10x.c, 282 :: 		
; config start address is: 4 (R1)
; af_pin start address is: 0 (R0)
0x04C8	0xB083    SUB	SP, SP, #12
0x04CA	0xF8CDE000  STR	LR, [SP, #0]
; config end address is: 4 (R1)
; af_pin end address is: 0 (R0)
; af_pin start address is: 0 (R0)
; config start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 286 :: 		
0x04CE	0xF00003FF  AND	R3, R0, #255
; af_pin end address is: 0 (R0)
0x04D2	0x091A    LSRS	R2, R3, #4
; port start address is: 0 (R0)
0x04D4	0x4610    MOV	R0, R2
;__Lib_GPIO_32F10x.c, 287 :: 		
0x04D6	0xF003020F  AND	R2, R3, #15
; pin start address is: 12 (R3)
0x04DA	0x4613    MOV	R3, R2
;__Lib_GPIO_32F10x.c, 290 :: 		
0x04DC	0xE014    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin57
; port end address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 291 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin59:
0x04DE	0x4A19    LDR	R2, [PC, #100]
0x04E0	0x9202    STR	R2, [SP, #8]
0x04E2	0xE01F    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 292 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin60:
0x04E4	0x4A18    LDR	R2, [PC, #96]
0x04E6	0x9202    STR	R2, [SP, #8]
0x04E8	0xE01C    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 293 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin61:
0x04EA	0x4A18    LDR	R2, [PC, #96]
0x04EC	0x9202    STR	R2, [SP, #8]
0x04EE	0xE019    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 294 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin62:
0x04F0	0x4A17    LDR	R2, [PC, #92]
0x04F2	0x9202    STR	R2, [SP, #8]
0x04F4	0xE016    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 295 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin63:
0x04F6	0x4A17    LDR	R2, [PC, #92]
0x04F8	0x9202    STR	R2, [SP, #8]
0x04FA	0xE013    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 296 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin64:
0x04FC	0x4A16    LDR	R2, [PC, #88]
0x04FE	0x9202    STR	R2, [SP, #8]
0x0500	0xE010    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 297 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin65:
0x0502	0x4A16    LDR	R2, [PC, #88]
0x0504	0x9202    STR	R2, [SP, #8]
0x0506	0xE00D    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 298 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin57:
; port start address is: 0 (R0)
0x0508	0x2800    CMP	R0, #0
0x050A	0xD0E8    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin59
0x050C	0x2801    CMP	R0, #1
0x050E	0xD0E9    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin60
0x0510	0x2802    CMP	R0, #2
0x0512	0xD0EA    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin61
0x0514	0x2803    CMP	R0, #3
0x0516	0xD0EB    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin62
0x0518	0x2804    CMP	R0, #4
0x051A	0xD0EC    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin63
0x051C	0x2805    CMP	R0, #5
0x051E	0xD0ED    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin64
0x0520	0x2806    CMP	R0, #6
0x0522	0xD0EE    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin65
; port end address is: 0 (R0)
L___Lib_GPIO_32F10x_GPIO_Configure_Pin58:
;__Lib_GPIO_32F10x.c, 300 :: 		
0x0524	0x2201    MOVS	R2, #1
0x0526	0xB212    SXTH	R2, R2
0x0528	0x409A    LSLS	R2, R3
; pin end address is: 12 (R3)
0x052A	0xF8AD2004  STRH	R2, [SP, #4]
; config end address is: 4 (R1)
0x052E	0x9802    LDR	R0, [SP, #8]
0x0530	0x460A    MOV	R2, R1
0x0532	0xF8BD1004  LDRH	R1, [SP, #4]
0x0536	0xF001F9DF  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 301 :: 		
L_end_GPIO_Configure_Pin:
0x053A	0xF8DDE000  LDR	LR, [SP, #0]
0x053E	0xB003    ADD	SP, SP, #12
0x0540	0x4770    BX	LR
0x0542	0xBF00    NOP
0x0544	0x08004001  	#1073809408
0x0548	0x0C004001  	#1073810432
0x054C	0x10004001  	#1073811456
0x0550	0x14004001  	#1073812480
0x0554	0x18004001  	#1073813504
0x0558	0x1C004001  	#1073814528
0x055C	0x20004001  	#1073815552
; end of __Lib_GPIO_32F10x_GPIO_Configure_Pin
__Lib_SPI_123_SPIx_Init_Advanced:
;__Lib_SPI_123.c, 53 :: 		
; config start address is: 8 (R2)
; clock_divider start address is: 4 (R1)
; base start address is: 0 (R0)
0x1AFC	0xB081    SUB	SP, SP, #4
; config end address is: 8 (R2)
; clock_divider end address is: 4 (R1)
; base end address is: 0 (R0)
; base start address is: 0 (R0)
; clock_divider start address is: 4 (R1)
; config start address is: 8 (R2)
;__Lib_SPI_123.c, 56 :: 		
0x1AFE	0x2300    MOVS	R3, #0
0x1B00	0x6003    STR	R3, [R0, #0]
;__Lib_SPI_123.c, 58 :: 		
0x1B02	0x00CB    LSLS	R3, R1, #3
0x1B04	0xB29B    UXTH	R3, R3
; clock_divider end address is: 4 (R1)
0x1B06	0xEA420303  ORR	R3, R2, R3, LSL #0
;__Lib_SPI_123.c, 60 :: 		
0x1B0A	0x6804    LDR	R4, [R0, #0]
0x1B0C	0xB29B    UXTH	R3, R3
0x1B0E	0xEA440303  ORR	R3, R4, R3, LSL #0
0x1B12	0x6003    STR	R3, [R0, #0]
;__Lib_SPI_123.c, 61 :: 		
0x1B14	0x1D05    ADDS	R5, R0, #4
0x1B16	0x1413    ASRS	R3, R2, #16
; config end address is: 8 (R2)
0x1B18	0x461C    MOV	R4, R3
0x1B1A	0x682B    LDR	R3, [R5, #0]
0x1B1C	0xF3640382  BFI	R3, R4, #2, #1
0x1B20	0x602B    STR	R3, [R5, #0]
;__Lib_SPI_123.c, 63 :: 		
0x1B22	0xF200051C  ADDW	R5, R0, #28
0x1B26	0x2400    MOVS	R4, #0
0x1B28	0x682B    LDR	R3, [R5, #0]
0x1B2A	0xF36423CB  BFI	R3, R4, #11, #1
0x1B2E	0x602B    STR	R3, [R5, #0]
;__Lib_SPI_123.c, 64 :: 		
0x1B30	0x2401    MOVS	R4, #1
0x1B32	0x6803    LDR	R3, [R0, #0]
0x1B34	0xF3641386  BFI	R3, R4, #6, #1
0x1B38	0x6003    STR	R3, [R0, #0]
; base end address is: 0 (R0)
;__Lib_SPI_123.c, 65 :: 		
L_end_SPIx_Init_Advanced:
0x1B3A	0xB001    ADD	SP, SP, #4
0x1B3C	0x4770    BX	LR
; end of __Lib_SPI_123_SPIx_Init_Advanced
_TFT_Init:
;__Lib_TFT_Defs.c, 320 :: 		void TFT_Init(unsigned int display_width, unsigned int display_height) {
; display_height start address is: 4 (R1)
; display_width start address is: 0 (R0)
0x2318	0xB081    SUB	SP, SP, #4
0x231A	0xF8CDE000  STR	LR, [SP, #0]
0x231E	0xB28C    UXTH	R4, R1
0x2320	0xB281    UXTH	R1, R0
; display_height end address is: 4 (R1)
; display_width end address is: 0 (R0)
; display_width start address is: 4 (R1)
; display_height start address is: 16 (R4)
;__Lib_TFT_Defs.c, 321 :: 		__controller = _8BIT_CONTROLLER;
0x2322	0xF24003FF  MOVW	R3, #255
0x2326	0x4A1F    LDR	R2, [PC, #124]
0x2328	0x8013    STRH	R3, [R2, #0]
;__Lib_TFT_Defs.c, 322 :: 		if (Is_TFT_Set() != 1) {
0x232A	0xF7FFFBDF  BL	_Is_TFT_Set+0
0x232E	0x2801    CMP	R0, #1
0x2330	0xD008    BEQ	L_TFT_Init8
;__Lib_TFT_Defs.c, 323 :: 		TFT_Set_Index_Ptr = TFT_Set_Index;
0x2332	0x4B1D    LDR	R3, [PC, #116]
0x2334	0x4A1D    LDR	R2, [PC, #116]
0x2336	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 324 :: 		TFT_Write_Command_Ptr = TFT_Write_Command;
0x2338	0x4B1D    LDR	R3, [PC, #116]
0x233A	0x4A1E    LDR	R2, [PC, #120]
0x233C	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 325 :: 		TFT_Write_Data_Ptr = TFT_Write_Data;
0x233E	0x4B1E    LDR	R3, [PC, #120]
0x2340	0x4A1E    LDR	R2, [PC, #120]
0x2342	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 326 :: 		}
L_TFT_Init8:
;__Lib_TFT_Defs.c, 328 :: 		TFT_DISP_WIDTH = display_width;
0x2344	0x4A1E    LDR	R2, [PC, #120]
0x2346	0x8011    STRH	R1, [R2, #0]
;__Lib_TFT_Defs.c, 329 :: 		TFT_DISP_HEIGHT = display_height;
0x2348	0x4A1E    LDR	R2, [PC, #120]
0x234A	0x8014    STRH	R4, [R2, #0]
;__Lib_TFT_Defs.c, 330 :: 		if (display_width >= display_height)
0x234C	0x42A1    CMP	R1, R4
0x234E	0xD303    BCC	L_TFT_Init9
; display_width end address is: 4 (R1)
; display_height end address is: 16 (R4)
;__Lib_TFT_Defs.c, 331 :: 		TFT_Disp_Rotation = 0;
0x2350	0x2300    MOVS	R3, #0
0x2352	0x4A1D    LDR	R2, [PC, #116]
0x2354	0x7013    STRB	R3, [R2, #0]
0x2356	0xE002    B	L_TFT_Init10
L_TFT_Init9:
;__Lib_TFT_Defs.c, 333 :: 		TFT_Disp_Rotation = 90;
0x2358	0x235A    MOVS	R3, #90
0x235A	0x4A1B    LDR	R2, [PC, #108]
0x235C	0x7013    STRB	R3, [R2, #0]
L_TFT_Init10:
;__Lib_TFT_Defs.c, 335 :: 		TFT_Set_Pen(CL_BLACK, 1);
0x235E	0x2101    MOVS	R1, #1
0x2360	0xF2400000  MOVW	R0, #0
0x2364	0xF7FFFF98  BL	_TFT_Set_Pen+0
;__Lib_TFT_Defs.c, 336 :: 		TFT_Set_Brush(0, 0, 0, 0, 0, 0);
0x2368	0x2300    MOVS	R3, #0
0x236A	0x2200    MOVS	R2, #0
0x236C	0xB408    PUSH	(R3)
0x236E	0xB404    PUSH	(R2)
0x2370	0x2300    MOVS	R3, #0
0x2372	0x2200    MOVS	R2, #0
0x2374	0x2100    MOVS	R1, #0
0x2376	0x2000    MOVS	R0, #0
0x2378	0xF7FFFEDC  BL	_TFT_Set_Brush+0
0x237C	0xB002    ADD	SP, SP, #8
;__Lib_TFT_Defs.c, 338 :: 		TFT_Move_Cursor(0, 0);
0x237E	0x2100    MOVS	R1, #0
0x2380	0x2000    MOVS	R0, #0
0x2382	0xF7FFFECB  BL	_TFT_Move_Cursor+0
;__Lib_TFT_Defs.c, 339 :: 		ExternalFontSet = 0;
0x2386	0x2300    MOVS	R3, #0
0x2388	0x4A10    LDR	R2, [PC, #64]
0x238A	0x7013    STRB	R3, [R2, #0]
;__Lib_TFT_Defs.c, 341 :: 		TFT_Set_DataPort_Direction();
0x238C	0xF7FFFD12  BL	__Lib_TFT_Defs_TFT_Set_DataPort_Direction+0
;__Lib_TFT_Defs.c, 343 :: 		TFT_Reset_Device();
0x2390	0xF7FFFBD6  BL	__Lib_TFT_Defs_TFT_Reset_Device+0
;__Lib_TFT_Defs.c, 344 :: 		TFT_Set_Address_Ptr = TFT_Set_Address;
0x2394	0x4B0E    LDR	R3, [PC, #56]
0x2396	0x4A0F    LDR	R2, [PC, #60]
0x2398	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 345 :: 		}
L_end_TFT_Init:
0x239A	0xF8DDE000  LDR	LR, [SP, #0]
0x239E	0xB001    ADD	SP, SP, #4
0x23A0	0x4770    BX	LR
0x23A2	0xBF00    NOP
0x23A4	0x00382000  	__Lib_TFT_Defs___controller+0
0x23A8	0x02290000  	_TFT_Set_Index+0
0x23AC	0x00D82000  	_TFT_Set_Index_Ptr+0
0x23B0	0x025D0000  	_TFT_Write_Command+0
0x23B4	0x00DC2000  	_TFT_Write_Command_Ptr+0
0x23B8	0x09790000  	_TFT_Write_Data+0
0x23BC	0x00B82000  	_TFT_Write_Data_Ptr+0
0x23C0	0x00982000  	_TFT_DISP_WIDTH+0
0x23C4	0x009A2000  	_TFT_DISP_HEIGHT+0
0x23C8	0x00352000  	__Lib_TFT_Defs_TFT_Disp_Rotation+0
0x23CC	0x008B2000  	_ExternalFontSet+0
0x23D0	0x1EF50000  	_TFT_Set_Address+0
0x23D4	0x00B42000  	_TFT_Set_Address_Ptr+0
; end of _TFT_Init
_Is_TFT_Set:
;__Lib_TFT.c, 132 :: 		
0x1AEC	0xB081    SUB	SP, SP, #4
;__Lib_TFT.c, 133 :: 		
0x1AEE	0x4802    LDR	R0, [PC, #8]
0x1AF0	0x8800    LDRH	R0, [R0, #0]
;__Lib_TFT.c, 134 :: 		
L_end_Is_TFT_Set:
0x1AF2	0xB001    ADD	SP, SP, #4
0x1AF4	0x4770    BX	LR
0x1AF6	0xBF00    NOP
0x1AF8	0x00322000  	__Lib_TFT_Ptr_Set+0
; end of _Is_TFT_Set
_TFT_Set_Pen:
;__Lib_TFT.c, 160 :: 		
; pen_width start address is: 4 (R1)
; pen_color start address is: 0 (R0)
0x2298	0xB081    SUB	SP, SP, #4
; pen_width end address is: 4 (R1)
; pen_color end address is: 0 (R0)
; pen_color start address is: 0 (R0)
; pen_width start address is: 4 (R1)
;__Lib_TFT.c, 161 :: 		
0x229A	0x4A03    LDR	R2, [PC, #12]
0x229C	0x8010    STRH	R0, [R2, #0]
; pen_color end address is: 0 (R0)
;__Lib_TFT.c, 166 :: 		
0x229E	0x4A03    LDR	R2, [PC, #12]
0x22A0	0x7011    STRB	R1, [R2, #0]
; pen_width end address is: 4 (R1)
;__Lib_TFT.c, 167 :: 		
L_end_TFT_Set_Pen:
0x22A2	0xB001    ADD	SP, SP, #4
0x22A4	0x4770    BX	LR
0x22A6	0xBF00    NOP
0x22A8	0x00AE2000  	__Lib_TFT_PenColor+0
0x22AC	0x00A52000  	__Lib_TFT_PenWidth+0
; end of _TFT_Set_Pen
_TFT_Set_Brush:
;__Lib_TFT.c, 183 :: 		
; gradient_orientation start address is: 12 (R3)
; gradient_enabled start address is: 8 (R2)
; brush_color start address is: 4 (R1)
; brush_enabled start address is: 0 (R0)
0x2134	0xB081    SUB	SP, SP, #4
; gradient_orientation end address is: 12 (R3)
; gradient_enabled end address is: 8 (R2)
; brush_color end address is: 4 (R1)
; brush_enabled end address is: 0 (R0)
; brush_enabled start address is: 0 (R0)
; brush_color start address is: 4 (R1)
; gradient_enabled start address is: 8 (R2)
; gradient_orientation start address is: 12 (R3)
; gradient_color_from start address is: 20 (R5)
0x2136	0xF8BD5004  LDRH	R5, [SP, #4]
; gradient_color_to start address is: 24 (R6)
0x213A	0xF8BD6008  LDRH	R6, [SP, #8]
;__Lib_TFT.c, 184 :: 		
0x213E	0x4C07    LDR	R4, [PC, #28]
0x2140	0x7020    STRB	R0, [R4, #0]
; brush_enabled end address is: 0 (R0)
;__Lib_TFT.c, 185 :: 		
0x2142	0x4C07    LDR	R4, [PC, #28]
0x2144	0x8021    STRH	R1, [R4, #0]
; brush_color end address is: 4 (R1)
;__Lib_TFT.c, 186 :: 		
0x2146	0x4C07    LDR	R4, [PC, #28]
0x2148	0x7022    STRB	R2, [R4, #0]
; gradient_enabled end address is: 8 (R2)
;__Lib_TFT.c, 187 :: 		
0x214A	0x4C07    LDR	R4, [PC, #28]
0x214C	0x7023    STRB	R3, [R4, #0]
; gradient_orientation end address is: 12 (R3)
;__Lib_TFT.c, 188 :: 		
0x214E	0x4C07    LDR	R4, [PC, #28]
0x2150	0x8025    STRH	R5, [R4, #0]
; gradient_color_from end address is: 20 (R5)
;__Lib_TFT.c, 189 :: 		
0x2152	0x4C07    LDR	R4, [PC, #28]
0x2154	0x8026    STRH	R6, [R4, #0]
; gradient_color_to end address is: 24 (R6)
;__Lib_TFT.c, 190 :: 		
L_end_TFT_Set_Brush:
0x2156	0xB001    ADD	SP, SP, #4
0x2158	0x4770    BX	LR
0x215A	0xBF00    NOP
0x215C	0x00CA2000  	__Lib_TFT_BrushEnabled+0
0x2160	0x00D02000  	__Lib_TFT_BrushColor+0
0x2164	0x00CB2000  	__Lib_TFT_GradientEnabled+0
0x2168	0x00D22000  	__Lib_TFT_GradientOrientation+0
0x216C	0x00D42000  	__Lib_TFT_GradColorFrom+0
0x2170	0x00D62000  	__Lib_TFT_GradColorTo+0
; end of _TFT_Set_Brush
_TFT_Move_Cursor:
;__Lib_TFT.c, 243 :: 		
; _y start address is: 4 (R1)
; _x start address is: 0 (R0)
0x211C	0xB081    SUB	SP, SP, #4
; _y end address is: 4 (R1)
; _x end address is: 0 (R0)
; _x start address is: 0 (R0)
; _y start address is: 4 (R1)
;__Lib_TFT.c, 244 :: 		
0x211E	0x4A03    LDR	R2, [PC, #12]
0x2120	0x8010    STRH	R0, [R2, #0]
; _x end address is: 0 (R0)
;__Lib_TFT.c, 245 :: 		
0x2122	0x4A03    LDR	R2, [PC, #12]
0x2124	0x8011    STRH	R1, [R2, #0]
; _y end address is: 4 (R1)
;__Lib_TFT.c, 246 :: 		
L_end_TFT_Move_Cursor:
0x2126	0xB001    ADD	SP, SP, #4
0x2128	0x4770    BX	LR
0x212A	0xBF00    NOP
0x212C	0x00AA2000  	__Lib_TFT_x_cord+0
0x2130	0x00A62000  	__Lib_TFT_y_cord+0
; end of _TFT_Move_Cursor
__Lib_TFT_Defs_TFT_Set_DataPort_Direction:
;__Lib_TFT_Defs.c, 149 :: 		static void TFT_Set_DataPort_Direction() {
0x1DB4	0xB082    SUB	SP, SP, #8
0x1DB6	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_TFT_Defs.c, 151 :: 		MOVW  R1, #lo_addr(TFT_DataPort)
0x1DBA	0xF641010C  MOVW	R1, #lo_addr(TFT_DataPort+0)
;__Lib_TFT_Defs.c, 152 :: 		MOVT  R1, #hi_addr(TFT_DataPort)
0x1DBE	0xF2C40101  MOVT	R1, #hi_addr(TFT_DataPort+0)
;__Lib_TFT_Defs.c, 156 :: 		GPIO_Config(R1, __controller, _GPIO_CFG_DIGITAL_OUTPUT);    // za  digitalni output
0x1DC2	0x4806    LDR	R0, [PC, #24]
0x1DC4	0x8800    LDRH	R0, [R0, #0]
0x1DC6	0x9101    STR	R1, [SP, #4]
0x1DC8	0x4A05    LDR	R2, [PC, #20]
0x1DCA	0xB281    UXTH	R1, R0
0x1DCC	0x9801    LDR	R0, [SP, #4]
0x1DCE	0xF7FFFD93  BL	_GPIO_Config+0
;__Lib_TFT_Defs.c, 157 :: 		}
L_end_TFT_Set_DataPort_Direction:
0x1DD2	0xF8DDE000  LDR	LR, [SP, #0]
0x1DD6	0xB002    ADD	SP, SP, #8
0x1DD8	0x4770    BX	LR
0x1DDA	0xBF00    NOP
0x1DDC	0x00382000  	__Lib_TFT_Defs___controller+0
0x1DE0	0x00140008  	#524308
; end of __Lib_TFT_Defs_TFT_Set_DataPort_Direction
__Lib_TFT_Defs_TFT_Reset_Device:
;__Lib_TFT_Defs.c, 163 :: 		static void TFT_Reset_Device() {
0x1B40	0xB081    SUB	SP, SP, #4
0x1B42	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_TFT_Defs.c, 164 :: 		TFT_Set_Pin_Directions();
0x1B46	0xF7FEFBE3  BL	__Lib_TFT_Defs_TFT_Set_Pin_Directions+0
;__Lib_TFT_Defs.c, 167 :: 		Delay_100ms();
0x1B4A	0xF7FEFC45  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 168 :: 		TFT_RST = 1;
0x1B4E	0x2101    MOVS	R1, #1
0x1B50	0xB249    SXTB	R1, R1
0x1B52	0x4896    LDR	R0, [PC, #600]
0x1B54	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 169 :: 		Delay_100ms();
0x1B56	0xF7FEFC3F  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 170 :: 		Delay_100ms();
0x1B5A	0xF7FEFC3D  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 173 :: 		TFT_Set_Reg(0xEA, 0x00); // PTBA[15:8]
0x1B5E	0x2100    MOVS	R1, #0
0x1B60	0x20EA    MOVS	R0, #234
0x1B62	0xF7FEFBB5  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 174 :: 		TFT_Set_Reg(0xEB, 0x20); // PTBA[7:0]
0x1B66	0x2120    MOVS	R1, #32
0x1B68	0x20EB    MOVS	R0, #235
0x1B6A	0xF7FEFBB1  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 175 :: 		TFT_Set_Reg(0xEC, 0x0C); // STBA[15:8]
0x1B6E	0x210C    MOVS	R1, #12
0x1B70	0x20EC    MOVS	R0, #236
0x1B72	0xF7FEFBAD  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 176 :: 		TFT_Set_Reg(0xED, 0xC4); // STBA[7:0]
0x1B76	0x21C4    MOVS	R1, #196
0x1B78	0x20ED    MOVS	R0, #237
0x1B7A	0xF7FEFBA9  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 177 :: 		TFT_Set_Reg(0xE8, 0x40); // OPON[7:0]
0x1B7E	0x2140    MOVS	R1, #64
0x1B80	0x20E8    MOVS	R0, #232
0x1B82	0xF7FEFBA5  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 178 :: 		TFT_Set_Reg(0xE9, 0x38); // OPON1[7:0]
0x1B86	0x2138    MOVS	R1, #56
0x1B88	0x20E9    MOVS	R0, #233
0x1B8A	0xF7FEFBA1  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 179 :: 		TFT_Set_Reg(0xF1, 0x01); // OTPS1B
0x1B8E	0x2101    MOVS	R1, #1
0x1B90	0x20F1    MOVS	R0, #241
0x1B92	0xF7FEFB9D  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 180 :: 		TFT_Set_Reg(0xF2, 0x10); // GEN
0x1B96	0x2110    MOVS	R1, #16
0x1B98	0x20F2    MOVS	R0, #242
0x1B9A	0xF7FEFB99  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 181 :: 		TFT_Set_Reg(0x27, 0xA3);
0x1B9E	0x21A3    MOVS	R1, #163
0x1BA0	0x2027    MOVS	R0, #39
0x1BA2	0xF7FEFB95  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 184 :: 		TFT_Set_Reg(0x40, 0x00); //
0x1BA6	0x2100    MOVS	R1, #0
0x1BA8	0x2040    MOVS	R0, #64
0x1BAA	0xF7FEFB91  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 185 :: 		TFT_Set_Reg(0x41, 0x00); //
0x1BAE	0x2100    MOVS	R1, #0
0x1BB0	0x2041    MOVS	R0, #65
0x1BB2	0xF7FEFB8D  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 186 :: 		TFT_Set_Reg(0x42, 0x01); //
0x1BB6	0x2101    MOVS	R1, #1
0x1BB8	0x2042    MOVS	R0, #66
0x1BBA	0xF7FEFB89  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 187 :: 		TFT_Set_Reg(0x43, 0x13); //
0x1BBE	0x2113    MOVS	R1, #19
0x1BC0	0x2043    MOVS	R0, #67
0x1BC2	0xF7FEFB85  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 188 :: 		TFT_Set_Reg(0x44, 0x10); //
0x1BC6	0x2110    MOVS	R1, #16
0x1BC8	0x2044    MOVS	R0, #68
0x1BCA	0xF7FEFB81  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 189 :: 		TFT_Set_Reg(0x45, 0x26); //
0x1BCE	0x2126    MOVS	R1, #38
0x1BD0	0x2045    MOVS	R0, #69
0x1BD2	0xF7FEFB7D  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 190 :: 		TFT_Set_Reg(0x46, 0x08); //
0x1BD6	0x2108    MOVS	R1, #8
0x1BD8	0x2046    MOVS	R0, #70
0x1BDA	0xF7FEFB79  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 191 :: 		TFT_Set_Reg(0x47, 0x51); //
0x1BDE	0x2151    MOVS	R1, #81
0x1BE0	0x2047    MOVS	R0, #71
0x1BE2	0xF7FEFB75  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 192 :: 		TFT_Set_Reg(0x48, 0x02); //
0x1BE6	0x2102    MOVS	R1, #2
0x1BE8	0x2048    MOVS	R0, #72
0x1BEA	0xF7FEFB71  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 193 :: 		TFT_Set_Reg(0x49, 0x12); //
0x1BEE	0x2112    MOVS	R1, #18
0x1BF0	0x2049    MOVS	R0, #73
0x1BF2	0xF7FEFB6D  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 194 :: 		TFT_Set_Reg(0x4A, 0x18); //
0x1BF6	0x2118    MOVS	R1, #24
0x1BF8	0x204A    MOVS	R0, #74
0x1BFA	0xF7FEFB69  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 195 :: 		TFT_Set_Reg(0x4B, 0x19); //
0x1BFE	0x2119    MOVS	R1, #25
0x1C00	0x204B    MOVS	R0, #75
0x1C02	0xF7FEFB65  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 196 :: 		TFT_Set_Reg(0x4C, 0x14); //
0x1C06	0x2114    MOVS	R1, #20
0x1C08	0x204C    MOVS	R0, #76
0x1C0A	0xF7FEFB61  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 198 :: 		TFT_Set_Reg(0x50, 0x19); //
0x1C0E	0x2119    MOVS	R1, #25
0x1C10	0x2050    MOVS	R0, #80
0x1C12	0xF7FEFB5D  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 199 :: 		TFT_Set_Reg(0x51, 0x2F); //
0x1C16	0x212F    MOVS	R1, #47
0x1C18	0x2051    MOVS	R0, #81
0x1C1A	0xF7FEFB59  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 200 :: 		TFT_Set_Reg(0x52, 0x2C); //
0x1C1E	0x212C    MOVS	R1, #44
0x1C20	0x2052    MOVS	R0, #82
0x1C22	0xF7FEFB55  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 201 :: 		TFT_Set_Reg(0x53, 0x3E); //
0x1C26	0x213E    MOVS	R1, #62
0x1C28	0x2053    MOVS	R0, #83
0x1C2A	0xF7FEFB51  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 202 :: 		TFT_Set_Reg(0x54, 0x3F); //
0x1C2E	0x213F    MOVS	R1, #63
0x1C30	0x2054    MOVS	R0, #84
0x1C32	0xF7FEFB4D  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 203 :: 		TFT_Set_Reg(0x55, 0x3F); //
0x1C36	0x213F    MOVS	R1, #63
0x1C38	0x2055    MOVS	R0, #85
0x1C3A	0xF7FEFB49  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 204 :: 		TFT_Set_Reg(0x56, 0x2E); //
0x1C3E	0x212E    MOVS	R1, #46
0x1C40	0x2056    MOVS	R0, #86
0x1C42	0xF7FEFB45  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 205 :: 		TFT_Set_Reg(0x57, 0x77); //
0x1C46	0x2177    MOVS	R1, #119
0x1C48	0x2057    MOVS	R0, #87
0x1C4A	0xF7FEFB41  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 206 :: 		TFT_Set_Reg(0x58, 0x0B); //
0x1C4E	0x210B    MOVS	R1, #11
0x1C50	0x2058    MOVS	R0, #88
0x1C52	0xF7FEFB3D  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 207 :: 		TFT_Set_Reg(0x59, 0x06); //
0x1C56	0x2106    MOVS	R1, #6
0x1C58	0x2059    MOVS	R0, #89
0x1C5A	0xF7FEFB39  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 208 :: 		TFT_Set_Reg(0x5A, 0x07); //
0x1C5E	0x2107    MOVS	R1, #7
0x1C60	0x205A    MOVS	R0, #90
0x1C62	0xF7FEFB35  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 209 :: 		TFT_Set_Reg(0x5B, 0x0D); //
0x1C66	0x210D    MOVS	R1, #13
0x1C68	0x205B    MOVS	R0, #91
0x1C6A	0xF7FEFB31  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 210 :: 		TFT_Set_Reg(0x5C, 0x1D); //
0x1C6E	0x211D    MOVS	R1, #29
0x1C70	0x205C    MOVS	R0, #92
0x1C72	0xF7FEFB2D  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 211 :: 		TFT_Set_Reg(0x5D, 0xCC); //
0x1C76	0x21CC    MOVS	R1, #204
0x1C78	0x205D    MOVS	R0, #93
0x1C7A	0xF7FEFB29  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 214 :: 		if (TFT_Disp_Rotation == 90) {
0x1C7E	0x484C    LDR	R0, [PC, #304]
0x1C80	0x7800    LDRB	R0, [R0, #0]
0x1C82	0x285A    CMP	R0, #90
0x1C84	0xD110    BNE	L___Lib_TFT_Defs_TFT_Reset_Device0
;__Lib_TFT_Defs.c, 215 :: 		TFT_Set_Reg(0x04, 0x00);
0x1C86	0x2100    MOVS	R1, #0
0x1C88	0x2004    MOVS	R0, #4
0x1C8A	0xF7FEFB21  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 216 :: 		TFT_Set_Reg(0x05, 0xEF);
0x1C8E	0x21EF    MOVS	R1, #239
0x1C90	0x2005    MOVS	R0, #5
0x1C92	0xF7FEFB1D  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 217 :: 		TFT_Set_Reg(0x08, 0x01);
0x1C96	0x2101    MOVS	R1, #1
0x1C98	0x2008    MOVS	R0, #8
0x1C9A	0xF7FEFB19  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 218 :: 		TFT_Set_Reg(0x09, 0x3F);
0x1C9E	0x213F    MOVS	R1, #63
0x1CA0	0x2009    MOVS	R0, #9
0x1CA2	0xF7FEFB15  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 219 :: 		} else {
0x1CA6	0xE00F    B	L___Lib_TFT_Defs_TFT_Reset_Device1
L___Lib_TFT_Defs_TFT_Reset_Device0:
;__Lib_TFT_Defs.c, 220 :: 		TFT_Set_Reg(0x04, 0x01);
0x1CA8	0x2101    MOVS	R1, #1
0x1CAA	0x2004    MOVS	R0, #4
0x1CAC	0xF7FEFB10  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 221 :: 		TFT_Set_Reg(0x05, 0x3F);
0x1CB0	0x213F    MOVS	R1, #63
0x1CB2	0x2005    MOVS	R0, #5
0x1CB4	0xF7FEFB0C  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 222 :: 		TFT_Set_Reg(0x08, 0x00);
0x1CB8	0x2100    MOVS	R1, #0
0x1CBA	0x2008    MOVS	R0, #8
0x1CBC	0xF7FEFB08  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 223 :: 		TFT_Set_Reg(0x09, 0xEF);
0x1CC0	0x21EF    MOVS	R1, #239
0x1CC2	0x2009    MOVS	R0, #9
0x1CC4	0xF7FEFB04  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 224 :: 		}
L___Lib_TFT_Defs_TFT_Reset_Device1:
;__Lib_TFT_Defs.c, 226 :: 		if (TFT_Disp_Rotation == 90) {
0x1CC8	0x4839    LDR	R0, [PC, #228]
0x1CCA	0x7800    LDRB	R0, [R0, #0]
0x1CCC	0x285A    CMP	R0, #90
0x1CCE	0xD10C    BNE	L___Lib_TFT_Defs_TFT_Reset_Device2
;__Lib_TFT_Defs.c, 227 :: 		if (Is_TFT_Rotated_180())
0x1CD0	0xF7FEFB9A  BL	_Is_TFT_Rotated_180+0
0x1CD4	0xB120    CBZ	R0, L___Lib_TFT_Defs_TFT_Reset_Device3
;__Lib_TFT_Defs.c, 228 :: 		TFT_Set_Reg(0x16, 0xC8); // MY=1, MX=1, MV=0, BGR=1
0x1CD6	0x21C8    MOVS	R1, #200
0x1CD8	0x2016    MOVS	R0, #22
0x1CDA	0xF7FEFAF9  BL	_TFT_Set_Reg+0
0x1CDE	0xE003    B	L___Lib_TFT_Defs_TFT_Reset_Device4
L___Lib_TFT_Defs_TFT_Reset_Device3:
;__Lib_TFT_Defs.c, 230 :: 		TFT_Set_Reg(0x16, 0x08); // MY=0, MX=0, MV=0, BGR=1
0x1CE0	0x2108    MOVS	R1, #8
0x1CE2	0x2016    MOVS	R0, #22
0x1CE4	0xF7FEFAF4  BL	_TFT_Set_Reg+0
L___Lib_TFT_Defs_TFT_Reset_Device4:
;__Lib_TFT_Defs.c, 231 :: 		} else {
0x1CE8	0xE00B    B	L___Lib_TFT_Defs_TFT_Reset_Device5
L___Lib_TFT_Defs_TFT_Reset_Device2:
;__Lib_TFT_Defs.c, 232 :: 		if (Is_TFT_Rotated_180())
0x1CEA	0xF7FEFB8D  BL	_Is_TFT_Rotated_180+0
0x1CEE	0xB120    CBZ	R0, L___Lib_TFT_Defs_TFT_Reset_Device6
;__Lib_TFT_Defs.c, 233 :: 		TFT_Set_Reg(0x16, 0xA8); // MY=0, MX=1, MV=1, BGR=1
0x1CF0	0x21A8    MOVS	R1, #168
0x1CF2	0x2016    MOVS	R0, #22
0x1CF4	0xF7FEFAEC  BL	_TFT_Set_Reg+0
0x1CF8	0xE003    B	L___Lib_TFT_Defs_TFT_Reset_Device7
L___Lib_TFT_Defs_TFT_Reset_Device6:
;__Lib_TFT_Defs.c, 235 :: 		TFT_Set_Reg(0x16, 0x68); // MY=1, MX=0, MV=1, BGR=1
0x1CFA	0x2168    MOVS	R1, #104
0x1CFC	0x2016    MOVS	R0, #22
0x1CFE	0xF7FEFAE7  BL	_TFT_Set_Reg+0
L___Lib_TFT_Defs_TFT_Reset_Device7:
;__Lib_TFT_Defs.c, 236 :: 		}
L___Lib_TFT_Defs_TFT_Reset_Device5:
;__Lib_TFT_Defs.c, 239 :: 		TFT_Set_Reg(0x1B, 0x1B); // VRH = 4.65
0x1D02	0x211B    MOVS	R1, #27
0x1D04	0x201B    MOVS	R0, #27
0x1D06	0xF7FEFAE3  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 240 :: 		TFT_Set_Reg(0x1A, 0x01); // BT
0x1D0A	0x2101    MOVS	R1, #1
0x1D0C	0x201A    MOVS	R0, #26
0x1D0E	0xF7FEFADF  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 241 :: 		TFT_Set_Reg(0x24, 0x2F); // VMH
0x1D12	0x212F    MOVS	R1, #47
0x1D14	0x2024    MOVS	R0, #36
0x1D16	0xF7FEFADB  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 242 :: 		TFT_Set_Reg(0x25, 0x57); // VML
0x1D1A	0x2157    MOVS	R1, #87
0x1D1C	0x2025    MOVS	R0, #37
0x1D1E	0xF7FEFAD7  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 245 :: 		TFT_Set_Reg(0x23, 0x8D); // FLICKER ADJUST
0x1D22	0x218D    MOVS	R1, #141
0x1D24	0x2023    MOVS	R0, #35
0x1D26	0xF7FEFAD3  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 248 :: 		TFT_Set_Reg(0x18, 0x36);
0x1D2A	0x2136    MOVS	R1, #54
0x1D2C	0x2018    MOVS	R0, #24
0x1D2E	0xF7FEFACF  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 249 :: 		TFT_Set_Reg(0x19, 0x01);
0x1D32	0x2101    MOVS	R1, #1
0x1D34	0x2019    MOVS	R0, #25
0x1D36	0xF7FEFACB  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 250 :: 		TFT_Set_Reg(0x01, 0x00);
0x1D3A	0x2100    MOVS	R1, #0
0x1D3C	0x2001    MOVS	R0, #1
0x1D3E	0xF7FEFAC7  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 251 :: 		TFT_Set_Reg(0x1F, 0x88);
0x1D42	0x2188    MOVS	R1, #136
0x1D44	0x201F    MOVS	R0, #31
0x1D46	0xF7FEFAC3  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 252 :: 		Delay_5ms();
0x1D4A	0xF7FEFB51  BL	_Delay_5ms+0
;__Lib_TFT_Defs.c, 253 :: 		TFT_Set_Reg(0x1F, 0x80);
0x1D4E	0x2180    MOVS	R1, #128
0x1D50	0x201F    MOVS	R0, #31
0x1D52	0xF7FEFABD  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 254 :: 		Delay_5ms();
0x1D56	0xF7FEFB4B  BL	_Delay_5ms+0
;__Lib_TFT_Defs.c, 255 :: 		TFT_Set_Reg(0x1F, 0x90);
0x1D5A	0x2190    MOVS	R1, #144
0x1D5C	0x201F    MOVS	R0, #31
0x1D5E	0xF7FEFAB7  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 256 :: 		Delay_5ms();
0x1D62	0xF7FEFB45  BL	_Delay_5ms+0
;__Lib_TFT_Defs.c, 257 :: 		TFT_Set_Reg(0x1F, 0xD0);
0x1D66	0x21D0    MOVS	R1, #208
0x1D68	0x201F    MOVS	R0, #31
0x1D6A	0xF7FEFAB1  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 258 :: 		Delay_5ms();
0x1D6E	0xF7FEFB3F  BL	_Delay_5ms+0
;__Lib_TFT_Defs.c, 260 :: 		TFT_Set_Reg(0x17, 0x05);
0x1D72	0x2105    MOVS	R1, #5
0x1D74	0x2017    MOVS	R0, #23
0x1D76	0xF7FEFAAB  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 262 :: 		TFT_Set_Reg(0x36, 0x00); // Panel characteristic control register
0x1D7A	0x2100    MOVS	R1, #0
0x1D7C	0x2036    MOVS	R0, #54
0x1D7E	0xF7FEFAA7  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 264 :: 		TFT_Set_Reg(0x28, 0x38);
0x1D82	0x2138    MOVS	R1, #56
0x1D84	0x2028    MOVS	R0, #40
0x1D86	0xF7FEFAA3  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 265 :: 		Delay_10ms();
0x1D8A	0xF7FEFB45  BL	_Delay_10ms+0
;__Lib_TFT_Defs.c, 266 :: 		Delay_10ms();
0x1D8E	0xF7FEFB43  BL	_Delay_10ms+0
;__Lib_TFT_Defs.c, 267 :: 		Delay_10ms();
0x1D92	0xF7FEFB41  BL	_Delay_10ms+0
;__Lib_TFT_Defs.c, 268 :: 		Delay_10ms();
0x1D96	0xF7FEFB3F  BL	_Delay_10ms+0
;__Lib_TFT_Defs.c, 269 :: 		TFT_Set_Reg(0x28, 0x3C);
0x1D9A	0x213C    MOVS	R1, #60
0x1D9C	0x2028    MOVS	R0, #40
0x1D9E	0xF7FEFA97  BL	_TFT_Set_Reg+0
;__Lib_TFT_Defs.c, 270 :: 		}
L_end_TFT_Reset_Device:
0x1DA2	0xF8DDE000  LDR	LR, [SP, #0]
0x1DA6	0xB001    ADD	SP, SP, #4
0x1DA8	0x4770    BX	LR
0x1DAA	0xBF00    NOP
0x1DAC	0x01A04223  	TFT_RST+0
0x1DB0	0x00352000  	__Lib_TFT_Defs_TFT_Disp_Rotation+0
; end of __Lib_TFT_Defs_TFT_Reset_Device
__Lib_TFT_Defs_TFT_Set_Pin_Directions:
;__Lib_TFT_Defs.c, 86 :: 		static void TFT_Set_Pin_Directions() {
0x0310	0xB081    SUB	SP, SP, #4
0x0312	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_TFT_Defs.c, 89 :: 		MOVW  R0, #lo_addr(TFT_RST)
0x0316	0xF641000C  MOVW	R0, #lo_addr(TFT_RST+0)
;__Lib_TFT_Defs.c, 90 :: 		MOVT  R0, #hi_addr(TFT_RST)
0x031A	0xF2C40001  MOVT	R0, #hi_addr(TFT_RST+0)
;__Lib_TFT_Defs.c, 91 :: 		MOV   R1, #1
0x031E	0xF04F0101  MOV	R1, #1
;__Lib_TFT_Defs.c, 92 :: 		LSL   R1, R1, #bitPos(TFT_RST)
0x0322	0xEA4F2101  LSL	R1, R1, BitPos(TFT_RST+0)
;__Lib_TFT_Defs.c, 94 :: 		GPIO_Config(R0, R1, _GPIO_CFG_DIGITAL_OUTPUT);
0x0326	0x4A25    LDR	R2, [PC, #148]
0x0328	0xB289    UXTH	R1, R1
0x032A	0xF001FAE5  BL	_GPIO_Config+0
;__Lib_TFT_Defs.c, 97 :: 		TFT_RST = 0;
0x032E	0x2100    MOVS	R1, #0
0x0330	0xB249    SXTB	R1, R1
0x0332	0x4823    LDR	R0, [PC, #140]
0x0334	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 101 :: 		MOVW  R0, #lo_addr(TFT_RS)
0x0336	0xF641000C  MOVW	R0, #lo_addr(TFT_RS+0)
;__Lib_TFT_Defs.c, 102 :: 		MOVT  R0, #hi_addr(TFT_RS)
0x033A	0xF2C40001  MOVT	R0, #hi_addr(TFT_RS+0)
;__Lib_TFT_Defs.c, 103 :: 		MOV   R1, #1
0x033E	0xF04F0101  MOV	R1, #1
;__Lib_TFT_Defs.c, 104 :: 		LSL   R1, R1, #bitPos(TFT_RS)
0x0342	0xEA4F3101  LSL	R1, R1, BitPos(TFT_RS+0)
;__Lib_TFT_Defs.c, 106 :: 		GPIO_Config(R0, R1, _GPIO_CFG_DIGITAL_OUTPUT);
0x0346	0x4A1D    LDR	R2, [PC, #116]
0x0348	0xB289    UXTH	R1, R1
0x034A	0xF001FAD5  BL	_GPIO_Config+0
;__Lib_TFT_Defs.c, 109 :: 		TFT_RS = 1;
0x034E	0x2101    MOVS	R1, #1
0x0350	0xB249    SXTB	R1, R1
0x0352	0x481C    LDR	R0, [PC, #112]
0x0354	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 113 :: 		MOVW  R0, #lo_addr(TFT_CS)
0x0356	0xF641000C  MOVW	R0, #lo_addr(TFT_CS+0)
;__Lib_TFT_Defs.c, 114 :: 		MOVT  R0, #hi_addr(TFT_CS)
0x035A	0xF2C40001  MOVT	R0, #hi_addr(TFT_CS+0)
;__Lib_TFT_Defs.c, 115 :: 		MOV   R1, #1
0x035E	0xF04F0101  MOV	R1, #1
;__Lib_TFT_Defs.c, 116 :: 		LSL   R1, R1, #bitPos(TFT_CS)
0x0362	0xEA4F31C1  LSL	R1, R1, BitPos(TFT_CS+0)
;__Lib_TFT_Defs.c, 118 :: 		GPIO_Config(R0, R1, _GPIO_CFG_DIGITAL_OUTPUT);
0x0366	0x4A15    LDR	R2, [PC, #84]
0x0368	0xB289    UXTH	R1, R1
0x036A	0xF001FAC5  BL	_GPIO_Config+0
;__Lib_TFT_Defs.c, 121 :: 		TFT_CS = 1;
0x036E	0x2101    MOVS	R1, #1
0x0370	0xB249    SXTB	R1, R1
0x0372	0x4815    LDR	R0, [PC, #84]
0x0374	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 125 :: 		MOVW  R0, #lo_addr(TFT_RD)
0x0376	0xF641000C  MOVW	R0, #lo_addr(TFT_RD+0)
;__Lib_TFT_Defs.c, 126 :: 		MOVT  R0, #hi_addr(TFT_RD)
0x037A	0xF2C40001  MOVT	R0, #hi_addr(TFT_RD+0)
;__Lib_TFT_Defs.c, 127 :: 		MOV   R1, #1
0x037E	0xF04F0101  MOV	R1, #1
;__Lib_TFT_Defs.c, 128 :: 		LSL   R1, R1, #bitPos(TFT_RD)
0x0382	0xEA4F2181  LSL	R1, R1, BitPos(TFT_RD+0)
;__Lib_TFT_Defs.c, 130 :: 		GPIO_Config(R0, R1, _GPIO_CFG_DIGITAL_OUTPUT);
0x0386	0x4A0D    LDR	R2, [PC, #52]
0x0388	0xB289    UXTH	R1, R1
0x038A	0xF001FAB5  BL	_GPIO_Config+0
;__Lib_TFT_Defs.c, 134 :: 		MOVW  R0, #lo_addr(TFT_WR)
0x038E	0xF641000C  MOVW	R0, #lo_addr(TFT_WR+0)
;__Lib_TFT_Defs.c, 135 :: 		MOVT  R0, #hi_addr(TFT_WR)
0x0392	0xF2C40001  MOVT	R0, #hi_addr(TFT_WR+0)
;__Lib_TFT_Defs.c, 136 :: 		MOV   R1, #1
0x0396	0xF04F0101  MOV	R1, #1
;__Lib_TFT_Defs.c, 137 :: 		LSL   R1, R1, #bitPos(TFT_WR)
0x039A	0xEA4F21C1  LSL	R1, R1, BitPos(TFT_WR+0)
;__Lib_TFT_Defs.c, 139 :: 		GPIO_Config(R0, R1, _GPIO_CFG_DIGITAL_OUTPUT);
0x039E	0x4A07    LDR	R2, [PC, #28]
0x03A0	0xB289    UXTH	R1, R1
0x03A2	0xF001FAA9  BL	_GPIO_Config+0
;__Lib_TFT_Defs.c, 141 :: 		TFT_RD = 1;
0x03A6	0x2101    MOVS	R1, #1
0x03A8	0xB249    SXTB	R1, R1
0x03AA	0x4808    LDR	R0, [PC, #32]
0x03AC	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 142 :: 		TFT_WR = 1;
0x03AE	0x4808    LDR	R0, [PC, #32]
0x03B0	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 143 :: 		}
L_end_TFT_Set_Pin_Directions:
0x03B2	0xF8DDE000  LDR	LR, [SP, #0]
0x03B6	0xB001    ADD	SP, SP, #4
0x03B8	0x4770    BX	LR
0x03BA	0xBF00    NOP
0x03BC	0x00140008  	#524308
0x03C0	0x01A04223  	TFT_RST+0
0x03C4	0x01B04223  	TFT_RS+0
0x03C8	0x01BC4223  	TFT_CS+0
0x03CC	0x01A84223  	TFT_RD+0
0x03D0	0x01AC4223  	TFT_WR+0
; end of __Lib_TFT_Defs_TFT_Set_Pin_Directions
_Delay_100ms:
;__Lib_Delays.c, 53 :: 		void Delay_100ms() {
;__Lib_Delays.c, 54 :: 		Delay_ms(100);
0x03D8	0xF644777F  MOVW	R7, #20351
0x03DC	0xF2C00712  MOVT	R7, #18
L_Delay_100ms20:
0x03E0	0x1E7F    SUBS	R7, R7, #1
0x03E2	0xD1FD    BNE	L_Delay_100ms20
0x03E4	0xBF00    NOP
0x03E6	0xBF00    NOP
0x03E8	0xBF00    NOP
0x03EA	0xBF00    NOP
0x03EC	0xBF00    NOP
;__Lib_Delays.c, 55 :: 		}
L_end_Delay_100ms:
0x03EE	0x4770    BX	LR
; end of _Delay_100ms
_TFT_Set_Reg:
;__Lib_TFT_Defs.c, 75 :: 		void TFT_Set_Reg(unsigned short index, unsigned short value) {
; index start address is: 0 (R0)
0x02D0	0xB082    SUB	SP, SP, #8
0x02D2	0xF8CDE000  STR	LR, [SP, #0]
0x02D6	0xF88D1004  STRB	R1, [SP, #4]
; index end address is: 0 (R0)
; index start address is: 0 (R0)
;__Lib_TFT_Defs.c, 76 :: 		TFT_CS = 0;
0x02DA	0x2300    MOVS	R3, #0
0x02DC	0xB25B    SXTB	R3, R3
0x02DE	0x4A09    LDR	R2, [PC, #36]
0x02E0	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 77 :: 		TFT_Set_Index_Ptr(index);
; index end address is: 0 (R0)
0x02E2	0x4C09    LDR	R4, [PC, #36]
0x02E4	0x6824    LDR	R4, [R4, #0]
0x02E6	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 78 :: 		TFT_Write_Command_Ptr(value);
0x02E8	0xF89D0004  LDRB	R0, [SP, #4]
0x02EC	0x4C07    LDR	R4, [PC, #28]
0x02EE	0x6824    LDR	R4, [R4, #0]
0x02F0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 79 :: 		TFT_CS = 1;
0x02F2	0x2301    MOVS	R3, #1
0x02F4	0xB25B    SXTB	R3, R3
0x02F6	0x4A03    LDR	R2, [PC, #12]
0x02F8	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 80 :: 		}
L_end_TFT_Set_Reg:
0x02FA	0xF8DDE000  LDR	LR, [SP, #0]
0x02FE	0xB002    ADD	SP, SP, #8
0x0300	0x4770    BX	LR
0x0302	0xBF00    NOP
0x0304	0x01BC4223  	TFT_CS+0
0x0308	0x00D82000  	_TFT_Set_Index_Ptr+0
0x030C	0x00DC2000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Reg
_TFT_Set_Index:
;__Lib_TFT_Defs.c, 54 :: 		void TFT_Set_Index(unsigned short index) {
; index start address is: 0 (R0)
0x0228	0xB081    SUB	SP, SP, #4
0x022A	0xF8CDE000  STR	LR, [SP, #0]
; index end address is: 0 (R0)
; index start address is: 0 (R0)
;__Lib_TFT_Defs.c, 55 :: 		TFT_RS = 0;
0x022E	0x2200    MOVS	R2, #0
0x0230	0xB252    SXTB	R2, R2
0x0232	0x4908    LDR	R1, [PC, #32]
0x0234	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 56 :: 		Write_to_Port(index);
; index end address is: 0 (R0)
0x0236	0xF7FFFF97  BL	__Lib_TFT_Defs_Write_to_Port+0
;__Lib_TFT_Defs.c, 57 :: 		TFT_Write_Strobe();
0x023A	0x2200    MOVS	R2, #0
0x023C	0xB252    SXTB	R2, R2
0x023E	0x4906    LDR	R1, [PC, #24]
0x0240	0x600A    STR	R2, [R1, #0]
0x0242	0xBF00    NOP
0x0244	0x2201    MOVS	R2, #1
0x0246	0xB252    SXTB	R2, R2
0x0248	0x4903    LDR	R1, [PC, #12]
0x024A	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 58 :: 		}
L_end_TFT_Set_Index:
0x024C	0xF8DDE000  LDR	LR, [SP, #0]
0x0250	0xB001    ADD	SP, SP, #4
0x0252	0x4770    BX	LR
0x0254	0x01B04223  	TFT_RS+0
0x0258	0x01AC4223  	TFT_WR+0
; end of _TFT_Set_Index
__Lib_TFT_Defs_Write_to_Port:
;__Lib_TFT_Defs.c, 43 :: 		static void Write_to_Port(char value) {
; value start address is: 0 (R0)
; value end address is: 0 (R0)
; value start address is: 0 (R0)
;__Lib_TFT_Defs.c, 46 :: 		temp &= 0xFF00;
0x0168	0x4A04    LDR	R2, [PC, #16]
0x016A	0x8811    LDRH	R1, [R2, #0]
0x016C	0xF401417F  AND	R1, R1, #65280
0x0170	0xB289    UXTH	R1, R1
;__Lib_TFT_Defs.c, 47 :: 		TFT_DataPort = value | temp;
0x0172	0xEA400101  ORR	R1, R0, R1, LSL #0
; value end address is: 0 (R0)
0x0176	0x8011    STRH	R1, [R2, #0]
;__Lib_TFT_Defs.c, 48 :: 		}
L_end_Write_to_Port:
0x0178	0x4770    BX	LR
0x017A	0xBF00    NOP
0x017C	0x180C4001  	TFT_DataPort+0
; end of __Lib_TFT_Defs_Write_to_Port
_TFT_Write_Command:
;__Lib_TFT_Defs.c, 64 :: 		void TFT_Write_Command(unsigned short cmd) {
; cmd start address is: 0 (R0)
0x025C	0xB081    SUB	SP, SP, #4
0x025E	0xF8CDE000  STR	LR, [SP, #0]
; cmd end address is: 0 (R0)
; cmd start address is: 0 (R0)
;__Lib_TFT_Defs.c, 65 :: 		TFT_RS = 1;
0x0262	0x2201    MOVS	R2, #1
0x0264	0xB252    SXTB	R2, R2
0x0266	0x4908    LDR	R1, [PC, #32]
0x0268	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 66 :: 		Write_to_Port(cmd);
; cmd end address is: 0 (R0)
0x026A	0xF7FFFF7D  BL	__Lib_TFT_Defs_Write_to_Port+0
;__Lib_TFT_Defs.c, 67 :: 		TFT_Write_Strobe();
0x026E	0x2200    MOVS	R2, #0
0x0270	0xB252    SXTB	R2, R2
0x0272	0x4906    LDR	R1, [PC, #24]
0x0274	0x600A    STR	R2, [R1, #0]
0x0276	0xBF00    NOP
0x0278	0x2201    MOVS	R2, #1
0x027A	0xB252    SXTB	R2, R2
0x027C	0x4903    LDR	R1, [PC, #12]
0x027E	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 68 :: 		}
L_end_TFT_Write_Command:
0x0280	0xF8DDE000  LDR	LR, [SP, #0]
0x0284	0xB001    ADD	SP, SP, #4
0x0286	0x4770    BX	LR
0x0288	0x01B04223  	TFT_RS+0
0x028C	0x01AC4223  	TFT_WR+0
; end of _TFT_Write_Command
_TFT_SSD1963_8bit_Set_Index:
;__Lib_TFT_Defs.c, 2883 :: 		void TFT_SSD1963_8bit_Set_Index(unsigned short index) {
; index start address is: 0 (R0)
0x01D4	0xB082    SUB	SP, SP, #8
0x01D6	0xF8CDE000  STR	LR, [SP, #0]
; index end address is: 0 (R0)
; index start address is: 0 (R0)
;__Lib_TFT_Defs.c, 2884 :: 		Delay_1us(); Delay_1us();
0x01DA	0xF7FFFFB9  BL	_Delay_1us+0
0x01DE	0xF7FFFFB7  BL	_Delay_1us+0
;__Lib_TFT_Defs.c, 2885 :: 		TFT_CS = 0;
0x01E2	0x2300    MOVS	R3, #0
0x01E4	0xB25B    SXTB	R3, R3
0x01E6	0x490C    LDR	R1, [PC, #48]
0x01E8	0x9101    STR	R1, [SP, #4]
0x01EA	0x600B    STR	R3, [R1, #0]
;__Lib_TFT_Defs.c, 2886 :: 		TFT_RD = 1;
0x01EC	0x2201    MOVS	R2, #1
0x01EE	0xB252    SXTB	R2, R2
0x01F0	0x490A    LDR	R1, [PC, #40]
0x01F2	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2887 :: 		TFT_RS = 0;
0x01F4	0x490A    LDR	R1, [PC, #40]
0x01F6	0x600B    STR	R3, [R1, #0]
;__Lib_TFT_Defs.c, 2888 :: 		Write_to_Port(index);
; index end address is: 0 (R0)
0x01F8	0xF7FFFFB6  BL	__Lib_TFT_Defs_Write_to_Port+0
;__Lib_TFT_Defs.c, 2889 :: 		TFT_WR = 0;
0x01FC	0x2200    MOVS	R2, #0
0x01FE	0xB252    SXTB	R2, R2
0x0200	0x4908    LDR	R1, [PC, #32]
0x0202	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2890 :: 		TFT_WR = 1;
0x0204	0x2201    MOVS	R2, #1
0x0206	0xB252    SXTB	R2, R2
0x0208	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2891 :: 		TFT_CS = 1;
0x020A	0x9901    LDR	R1, [SP, #4]
0x020C	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2892 :: 		}
L_end_TFT_SSD1963_8bit_Set_Index:
0x020E	0xF8DDE000  LDR	LR, [SP, #0]
0x0212	0xB002    ADD	SP, SP, #8
0x0214	0x4770    BX	LR
0x0216	0xBF00    NOP
0x0218	0x01BC4223  	TFT_CS+0
0x021C	0x01A84223  	TFT_RD+0
0x0220	0x01B04223  	TFT_RS+0
0x0224	0x01AC4223  	TFT_WR+0
; end of _TFT_SSD1963_8bit_Set_Index
_Delay_1us:
;__Lib_Delays.c, 13 :: 		void Delay_1us() {
;__Lib_Delays.c, 14 :: 		Delay_us(1);
0x0150	0xF240070B  MOVW	R7, #11
0x0154	0xF2C00700  MOVT	R7, #0
L_Delay_1us0:
0x0158	0x1E7F    SUBS	R7, R7, #1
0x015A	0xD1FD    BNE	L_Delay_1us0
0x015C	0xBF00    NOP
0x015E	0xBF00    NOP
0x0160	0xBF00    NOP
0x0162	0xBF00    NOP
0x0164	0xBF00    NOP
;__Lib_Delays.c, 15 :: 		}
L_end_Delay_1us:
0x0166	0x4770    BX	LR
; end of _Delay_1us
_TFT_SSD1963YT_8bit_Write_Command:
;__Lib_TFT_Defs.c, 2898 :: 		void TFT_SSD1963YT_8bit_Write_Command(unsigned char command) {
; command start address is: 0 (R0)
0x0180	0xB082    SUB	SP, SP, #8
0x0182	0xF8CDE000  STR	LR, [SP, #0]
; command end address is: 0 (R0)
; command start address is: 0 (R0)
;__Lib_TFT_Defs.c, 2899 :: 		TFT_CS = 0;
0x0186	0x2200    MOVS	R2, #0
0x0188	0xB252    SXTB	R2, R2
0x018A	0x490E    LDR	R1, [PC, #56]
0x018C	0x9101    STR	R1, [SP, #4]
0x018E	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2900 :: 		TFT_RD = 1;
0x0190	0x2201    MOVS	R2, #1
0x0192	0xB252    SXTB	R2, R2
0x0194	0x490C    LDR	R1, [PC, #48]
0x0196	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2901 :: 		TFT_RS = 1;
0x0198	0x490C    LDR	R1, [PC, #48]
0x019A	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2902 :: 		Write_to_Port(command);
; command end address is: 0 (R0)
0x019C	0xF7FFFFE4  BL	__Lib_TFT_Defs_Write_to_Port+0
;__Lib_TFT_Defs.c, 2903 :: 		TFT_WR = 0;
0x01A0	0x2200    MOVS	R2, #0
0x01A2	0xB252    SXTB	R2, R2
0x01A4	0x490A    LDR	R1, [PC, #40]
0x01A6	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2904 :: 		TFT_WR = 1;
0x01A8	0x2201    MOVS	R2, #1
0x01AA	0xB252    SXTB	R2, R2
0x01AC	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2905 :: 		TFT_CS = 1;
0x01AE	0x9901    LDR	R1, [SP, #4]
0x01B0	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 2906 :: 		Delay_1us(); Delay_1us();
0x01B2	0xF7FFFFCD  BL	_Delay_1us+0
0x01B6	0xF7FFFFCB  BL	_Delay_1us+0
;__Lib_TFT_Defs.c, 2907 :: 		}
L_end_TFT_SSD1963YT_8bit_Write_Command:
0x01BA	0xF8DDE000  LDR	LR, [SP, #0]
0x01BE	0xB002    ADD	SP, SP, #8
0x01C0	0x4770    BX	LR
0x01C2	0xBF00    NOP
0x01C4	0x01BC4223  	TFT_CS+0
0x01C8	0x01A84223  	TFT_RD+0
0x01CC	0x01B04223  	TFT_RS+0
0x01D0	0x01AC4223  	TFT_WR+0
; end of _TFT_SSD1963YT_8bit_Write_Command
_Is_TFT_Rotated_180:
;__Lib_TFT_Defs.c, 25 :: 		char Is_TFT_Rotated_180() {
;__Lib_TFT_Defs.c, 26 :: 		return TFT_Rotated_180;
0x0408	0x4801    LDR	R0, [PC, #4]
0x040A	0x7800    LDRB	R0, [R0, #0]
;__Lib_TFT_Defs.c, 27 :: 		}
L_end_Is_TFT_Rotated_180:
0x040C	0x4770    BX	LR
0x040E	0xBF00    NOP
0x0410	0x00362000  	__Lib_TFT_Defs_TFT_Rotated_180+0
; end of _Is_TFT_Rotated_180
_Delay_5ms:
;__Lib_Delays.c, 45 :: 		void Delay_5ms() {
;__Lib_Delays.c, 46 :: 		Delay_ms(5);
0x03F0	0xF64E275F  MOVW	R7, #59999
0x03F4	0xF2C00700  MOVT	R7, #0
L_Delay_5ms16:
0x03F8	0x1E7F    SUBS	R7, R7, #1
0x03FA	0xD1FD    BNE	L_Delay_5ms16
0x03FC	0xBF00    NOP
0x03FE	0xBF00    NOP
0x0400	0xBF00    NOP
0x0402	0xBF00    NOP
0x0404	0xBF00    NOP
;__Lib_Delays.c, 47 :: 		}
L_end_Delay_5ms:
0x0406	0x4770    BX	LR
; end of _Delay_5ms
_Delay_10ms:
;__Lib_Delays.c, 57 :: 		void Delay_10ms() {
;__Lib_Delays.c, 58 :: 		Delay_ms(10);
0x0418	0xF24D47BF  MOVW	R7, #54463
0x041C	0xF2C00701  MOVT	R7, #1
L_Delay_10ms22:
0x0420	0x1E7F    SUBS	R7, R7, #1
0x0422	0xD1FD    BNE	L_Delay_10ms22
0x0424	0xBF00    NOP
0x0426	0xBF00    NOP
0x0428	0xBF00    NOP
0x042A	0xBF00    NOP
0x042C	0xBF00    NOP
;__Lib_Delays.c, 59 :: 		}
L_end_Delay_10ms:
0x042E	0x4770    BX	LR
; end of _Delay_10ms
_TFT_Fill_Screen:
;__Lib_TFT.c, 756 :: 		
0x2974	0xB084    SUB	SP, SP, #16
0x2976	0xF8CDE000  STR	LR, [SP, #0]
0x297A	0xF8AD000C  STRH	R0, [SP, #12]
;__Lib_TFT.c, 758 :: 		
0x297E	0x2200    MOVS	R2, #0
0x2980	0xB252    SXTB	R2, R2
0x2982	0x491A    LDR	R1, [PC, #104]
0x2984	0x600A    STR	R2, [R1, #0]
;__Lib_TFT.c, 759 :: 		
0x2986	0xF7FDFFD9  BL	__Lib_TFT_Is_SSD1963_Set+0
0x298A	0xB168    CBZ	R0, L_TFT_Fill_Screen78
;__Lib_TFT.c, 760 :: 		
0x298C	0x4918    LDR	R1, [PC, #96]
0x298E	0x8809    LDRH	R1, [R1, #0]
0x2990	0x1E4C    SUBS	R4, R1, #1
0x2992	0x4918    LDR	R1, [PC, #96]
0x2994	0x8809    LDRH	R1, [R1, #0]
0x2996	0x1E49    SUBS	R1, R1, #1
0x2998	0xB2A3    UXTH	R3, R4
0x299A	0xB28A    UXTH	R2, R1
0x299C	0x2100    MOVS	R1, #0
0x299E	0x2000    MOVS	R0, #0
0x29A0	0x4C15    LDR	R4, [PC, #84]
0x29A2	0x6824    LDR	R4, [R4, #0]
0x29A4	0x47A0    BLX	R4
0x29A6	0xE004    B	L_TFT_Fill_Screen79
L_TFT_Fill_Screen78:
;__Lib_TFT.c, 762 :: 		
0x29A8	0x2100    MOVS	R1, #0
0x29AA	0x2000    MOVS	R0, #0
0x29AC	0x4C13    LDR	R4, [PC, #76]
0x29AE	0x6824    LDR	R4, [R4, #0]
0x29B0	0x47A0    BLX	R4
L_TFT_Fill_Screen79:
;__Lib_TFT.c, 764 :: 		
0x29B2	0x4910    LDR	R1, [PC, #64]
0x29B4	0x880A    LDRH	R2, [R1, #0]
0x29B6	0x490E    LDR	R1, [PC, #56]
0x29B8	0x8809    LDRH	R1, [R1, #0]
0x29BA	0x4351    MULS	R1, R2, R1
0x29BC	0x9102    STR	R1, [SP, #8]
;__Lib_TFT.c, 765 :: 		
0x29BE	0x2100    MOVS	R1, #0
0x29C0	0x9101    STR	R1, [SP, #4]
L_TFT_Fill_Screen80:
0x29C2	0x9A02    LDR	R2, [SP, #8]
0x29C4	0x9901    LDR	R1, [SP, #4]
0x29C6	0x4291    CMP	R1, R2
0x29C8	0xD208    BCS	L_TFT_Fill_Screen81
;__Lib_TFT.c, 766 :: 		
0x29CA	0xF8BD000C  LDRH	R0, [SP, #12]
0x29CE	0x4C0C    LDR	R4, [PC, #48]
0x29D0	0x6824    LDR	R4, [R4, #0]
0x29D2	0x47A0    BLX	R4
;__Lib_TFT.c, 765 :: 		
0x29D4	0x9901    LDR	R1, [SP, #4]
0x29D6	0x1C49    ADDS	R1, R1, #1
0x29D8	0x9101    STR	R1, [SP, #4]
;__Lib_TFT.c, 766 :: 		
0x29DA	0xE7F2    B	L_TFT_Fill_Screen80
L_TFT_Fill_Screen81:
;__Lib_TFT.c, 767 :: 		
0x29DC	0x2201    MOVS	R2, #1
0x29DE	0xB252    SXTB	R2, R2
0x29E0	0x4902    LDR	R1, [PC, #8]
0x29E2	0x600A    STR	R2, [R1, #0]
;__Lib_TFT.c, 768 :: 		
L_end_TFT_Fill_Screen:
0x29E4	0xF8DDE000  LDR	LR, [SP, #0]
0x29E8	0xB004    ADD	SP, SP, #16
0x29EA	0x4770    BX	LR
0x29EC	0x01BC4223  	TFT_CS+0
0x29F0	0x009A2000  	_TFT_DISP_HEIGHT+0
0x29F4	0x00982000  	_TFT_DISP_WIDTH+0
0x29F8	0x00B02000  	_TFT_SSD1963_Set_Address_Ptr+0
0x29FC	0x00B42000  	_TFT_Set_Address_Ptr+0
0x2A00	0x00B82000  	_TFT_Write_Data_Ptr+0
; end of _TFT_Fill_Screen
_TFT_Set_Address_SSD1963II:
;__Lib_TFT_Defs.c, 2374 :: 		void TFT_Set_Address_SSD1963II(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
; y2 start address is: 12 (R3)
; x2 start address is: 8 (R2)
; y1 start address is: 4 (R1)
; x1 start address is: 0 (R0)
0x1F6C	0xB083    SUB	SP, SP, #12
0x1F6E	0xF8CDE000  STR	LR, [SP, #0]
0x1F72	0xB29E    UXTH	R6, R3
0x1F74	0xB293    UXTH	R3, R2
0x1F76	0xB28A    UXTH	R2, R1
0x1F78	0xB281    UXTH	R1, R0
; y2 end address is: 12 (R3)
; x2 end address is: 8 (R2)
; y1 end address is: 4 (R1)
; x1 end address is: 0 (R0)
; x1 start address is: 4 (R1)
; y1 start address is: 8 (R2)
; x2 start address is: 12 (R3)
; y2 start address is: 24 (R6)
;__Lib_TFT_Defs.c, 2379 :: 		if ((TFT_DISP_WIDTH > 480) || (TFT_DISP_HEIGHT > 480)) {
0x1F7A	0x4C49    LDR	R4, [PC, #292]
0x1F7C	0x8824    LDRH	R4, [R4, #0]
0x1F7E	0xF5B47FF0  CMP	R4, #480
0x1F82	0xD805    BHI	L__TFT_Set_Address_SSD1963II194
0x1F84	0x4C47    LDR	R4, [PC, #284]
0x1F86	0x8824    LDRH	R4, [R4, #0]
0x1F88	0xF5B47FF0  CMP	R4, #480
0x1F8C	0xD800    BHI	L__TFT_Set_Address_SSD1963II193
0x1F8E	0xE004    B	L_TFT_Set_Address_SSD1963II135
L__TFT_Set_Address_SSD1963II194:
L__TFT_Set_Address_SSD1963II193:
;__Lib_TFT_Defs.c, 2380 :: 		_width = 800;
; _width start address is: 32 (R8)
0x1F90	0xF2403820  MOVW	R8, #800
;__Lib_TFT_Defs.c, 2381 :: 		_height = 480;
; _height start address is: 28 (R7)
0x1F94	0xF24017E0  MOVW	R7, #480
;__Lib_TFT_Defs.c, 2382 :: 		}
; _height end address is: 28 (R7)
; _width end address is: 32 (R8)
0x1F98	0xE003    B	L_TFT_Set_Address_SSD1963II136
L_TFT_Set_Address_SSD1963II135:
;__Lib_TFT_Defs.c, 2384 :: 		_width = 480;
; _width start address is: 32 (R8)
0x1F9A	0xF24018E0  MOVW	R8, #480
;__Lib_TFT_Defs.c, 2385 :: 		_height = 272;
; _height start address is: 28 (R7)
0x1F9E	0xF2401710  MOVW	R7, #272
; _height end address is: 28 (R7)
; _width end address is: 32 (R8)
;__Lib_TFT_Defs.c, 2386 :: 		}
L_TFT_Set_Address_SSD1963II136:
;__Lib_TFT_Defs.c, 2387 :: 		if (TFT_Disp_Rotation == 90) {
; _height start address is: 28 (R7)
; _width start address is: 32 (R8)
0x1FA2	0x4C41    LDR	R4, [PC, #260]
0x1FA4	0x7824    LDRB	R4, [R4, #0]
0x1FA6	0x2C5A    CMP	R4, #90
0x1FA8	0xD11D    BNE	L_TFT_Set_Address_SSD1963II137
;__Lib_TFT_Defs.c, 2388 :: 		if (Is_TFT_Rotated_180()) {
0x1FAA	0xF7FEFA2D  BL	_Is_TFT_Rotated_180+0
0x1FAE	0xB168    CBZ	R0, L_TFT_Set_Address_SSD1963II138
; _height end address is: 28 (R7)
;__Lib_TFT_Defs.c, 2389 :: 		s_col = (_width - 1) - y2;
0x1FB0	0xF1A80501  SUB	R5, R8, #1
0x1FB4	0xB2AD    UXTH	R5, R5
; _width end address is: 32 (R8)
0x1FB6	0x1BAC    SUB	R4, R5, R6
; y2 end address is: 24 (R6)
0x1FB8	0xF8AD4004  STRH	R4, [SP, #4]
;__Lib_TFT_Defs.c, 2390 :: 		e_col = (_width - 1) - y1;
0x1FBC	0x1AAC    SUB	R4, R5, R2
; y1 end address is: 8 (R2)
0x1FBE	0xF8AD4006  STRH	R4, [SP, #6]
;__Lib_TFT_Defs.c, 2391 :: 		s_page = x1;
0x1FC2	0xF8AD1008  STRH	R1, [SP, #8]
; x1 end address is: 4 (R1)
;__Lib_TFT_Defs.c, 2392 :: 		e_page = x2;
0x1FC6	0xF8AD300A  STRH	R3, [SP, #10]
; x2 end address is: 12 (R3)
;__Lib_TFT_Defs.c, 2393 :: 		} else {
0x1FCA	0xE00B    B	L_TFT_Set_Address_SSD1963II139
L_TFT_Set_Address_SSD1963II138:
;__Lib_TFT_Defs.c, 2394 :: 		s_col = y1;
; _height start address is: 28 (R7)
; y2 start address is: 24 (R6)
; x2 start address is: 12 (R3)
; y1 start address is: 8 (R2)
; x1 start address is: 4 (R1)
0x1FCC	0xF8AD2004  STRH	R2, [SP, #4]
; y1 end address is: 8 (R2)
;__Lib_TFT_Defs.c, 2395 :: 		e_col = y2;
0x1FD0	0xF8AD6006  STRH	R6, [SP, #6]
; y2 end address is: 24 (R6)
;__Lib_TFT_Defs.c, 2396 :: 		s_page = (_height - 1) - x2;
0x1FD4	0x1E7D    SUBS	R5, R7, #1
0x1FD6	0xB2AD    UXTH	R5, R5
; _height end address is: 28 (R7)
0x1FD8	0x1AEC    SUB	R4, R5, R3
; x2 end address is: 12 (R3)
0x1FDA	0xF8AD4008  STRH	R4, [SP, #8]
;__Lib_TFT_Defs.c, 2397 :: 		e_page = (_height - 1) - x1;
0x1FDE	0x1A6C    SUB	R4, R5, R1
; x1 end address is: 4 (R1)
0x1FE0	0xF8AD400A  STRH	R4, [SP, #10]
;__Lib_TFT_Defs.c, 2398 :: 		}
L_TFT_Set_Address_SSD1963II139:
;__Lib_TFT_Defs.c, 2399 :: 		} else {
0x1FE4	0xE01C    B	L_TFT_Set_Address_SSD1963II140
L_TFT_Set_Address_SSD1963II137:
;__Lib_TFT_Defs.c, 2400 :: 		if (Is_TFT_Rotated_180()) {
; _width start address is: 32 (R8)
; _height start address is: 28 (R7)
; y2 start address is: 24 (R6)
; x2 start address is: 12 (R3)
; y1 start address is: 8 (R2)
; x1 start address is: 4 (R1)
0x1FE6	0xF7FEFA0F  BL	_Is_TFT_Rotated_180+0
0x1FEA	0xB188    CBZ	R0, L_TFT_Set_Address_SSD1963II141
;__Lib_TFT_Defs.c, 2401 :: 		s_col = (_width - 1) - x2;
0x1FEC	0xF1A80501  SUB	R5, R8, #1
0x1FF0	0xB2AD    UXTH	R5, R5
; _width end address is: 32 (R8)
0x1FF2	0x1AEC    SUB	R4, R5, R3
; x2 end address is: 12 (R3)
0x1FF4	0xF8AD4004  STRH	R4, [SP, #4]
;__Lib_TFT_Defs.c, 2402 :: 		e_col = (_width - 1) - x1;
0x1FF8	0x1A6C    SUB	R4, R5, R1
; x1 end address is: 4 (R1)
0x1FFA	0xF8AD4006  STRH	R4, [SP, #6]
;__Lib_TFT_Defs.c, 2403 :: 		s_page = (_height - 1) - y2;
0x1FFE	0x1E7D    SUBS	R5, R7, #1
0x2000	0xB2AD    UXTH	R5, R5
; _height end address is: 28 (R7)
0x2002	0x1BAC    SUB	R4, R5, R6
; y2 end address is: 24 (R6)
0x2004	0xF8AD4008  STRH	R4, [SP, #8]
;__Lib_TFT_Defs.c, 2404 :: 		e_page = (_height - 1) - y1;
0x2008	0x1AAC    SUB	R4, R5, R2
; y1 end address is: 8 (R2)
0x200A	0xF8AD400A  STRH	R4, [SP, #10]
;__Lib_TFT_Defs.c, 2405 :: 		} else {
0x200E	0xE007    B	L_TFT_Set_Address_SSD1963II142
L_TFT_Set_Address_SSD1963II141:
;__Lib_TFT_Defs.c, 2406 :: 		s_col = x1;
; y2 start address is: 24 (R6)
; x2 start address is: 12 (R3)
; y1 start address is: 8 (R2)
; x1 start address is: 4 (R1)
0x2010	0xF8AD1004  STRH	R1, [SP, #4]
; x1 end address is: 4 (R1)
;__Lib_TFT_Defs.c, 2407 :: 		e_col = x2;
0x2014	0xF8AD3006  STRH	R3, [SP, #6]
; x2 end address is: 12 (R3)
;__Lib_TFT_Defs.c, 2408 :: 		s_page = y1;
0x2018	0xF8AD2008  STRH	R2, [SP, #8]
; y1 end address is: 8 (R2)
;__Lib_TFT_Defs.c, 2409 :: 		e_page = y2;
0x201C	0xF8AD600A  STRH	R6, [SP, #10]
; y2 end address is: 24 (R6)
;__Lib_TFT_Defs.c, 2410 :: 		}
L_TFT_Set_Address_SSD1963II142:
;__Lib_TFT_Defs.c, 2411 :: 		}
L_TFT_Set_Address_SSD1963II140:
;__Lib_TFT_Defs.c, 2412 :: 		TFT_Set_Index_Ptr(0x2a);             // SET column address
0x2020	0x202A    MOVS	R0, #42
0x2022	0x4C22    LDR	R4, [PC, #136]
0x2024	0x6824    LDR	R4, [R4, #0]
0x2026	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2413 :: 		TFT_Write_Command_Ptr((char)(s_col >> 8));
0x2028	0xF8BD4004  LDRH	R4, [SP, #4]
0x202C	0x0A24    LSRS	R4, R4, #8
0x202E	0xB2E0    UXTB	R0, R4
0x2030	0x4C1F    LDR	R4, [PC, #124]
0x2032	0x6824    LDR	R4, [R4, #0]
0x2034	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2414 :: 		TFT_Write_Command_Ptr(s_col);
0x2036	0xF8BD0004  LDRH	R0, [SP, #4]
0x203A	0x4C1D    LDR	R4, [PC, #116]
0x203C	0x6824    LDR	R4, [R4, #0]
0x203E	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2415 :: 		TFT_Write_Command_Ptr((char)(e_col >> 8));
0x2040	0xF8BD4006  LDRH	R4, [SP, #6]
0x2044	0x0A24    LSRS	R4, R4, #8
0x2046	0xB2E0    UXTB	R0, R4
0x2048	0x4C19    LDR	R4, [PC, #100]
0x204A	0x6824    LDR	R4, [R4, #0]
0x204C	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2416 :: 		TFT_Write_Command_Ptr(e_col);
0x204E	0xF8BD0006  LDRH	R0, [SP, #6]
0x2052	0x4C17    LDR	R4, [PC, #92]
0x2054	0x6824    LDR	R4, [R4, #0]
0x2056	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2418 :: 		TFT_Set_Index_Ptr(0x2b);             // SET page address
0x2058	0x202B    MOVS	R0, #43
0x205A	0x4C14    LDR	R4, [PC, #80]
0x205C	0x6824    LDR	R4, [R4, #0]
0x205E	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2419 :: 		TFT_Write_Command_Ptr((char)(s_page >> 8));
0x2060	0xF8BD4008  LDRH	R4, [SP, #8]
0x2064	0x0A24    LSRS	R4, R4, #8
0x2066	0xB2E0    UXTB	R0, R4
0x2068	0x4C11    LDR	R4, [PC, #68]
0x206A	0x6824    LDR	R4, [R4, #0]
0x206C	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2420 :: 		TFT_Write_Command_Ptr(s_page);
0x206E	0xF8BD0008  LDRH	R0, [SP, #8]
0x2072	0x4C0F    LDR	R4, [PC, #60]
0x2074	0x6824    LDR	R4, [R4, #0]
0x2076	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2421 :: 		TFT_Write_Command_Ptr((char)(e_page >> 8));
0x2078	0xF8BD400A  LDRH	R4, [SP, #10]
0x207C	0x0A24    LSRS	R4, R4, #8
0x207E	0xB2E0    UXTB	R0, R4
0x2080	0x4C0B    LDR	R4, [PC, #44]
0x2082	0x6824    LDR	R4, [R4, #0]
0x2084	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2422 :: 		TFT_Write_Command_Ptr(e_page);
0x2086	0xF8BD000A  LDRH	R0, [SP, #10]
0x208A	0x4C09    LDR	R4, [PC, #36]
0x208C	0x6824    LDR	R4, [R4, #0]
0x208E	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2423 :: 		TFT_Set_Index_Ptr(0x2C);
0x2090	0x202C    MOVS	R0, #44
0x2092	0x4C06    LDR	R4, [PC, #24]
0x2094	0x6824    LDR	R4, [R4, #0]
0x2096	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2424 :: 		}
L_end_TFT_Set_Address_SSD1963II:
0x2098	0xF8DDE000  LDR	LR, [SP, #0]
0x209C	0xB003    ADD	SP, SP, #12
0x209E	0x4770    BX	LR
0x20A0	0x00982000  	_TFT_DISP_WIDTH+0
0x20A4	0x009A2000  	_TFT_DISP_HEIGHT+0
0x20A8	0x00352000  	__Lib_TFT_Defs_TFT_Disp_Rotation+0
0x20AC	0x00D82000  	_TFT_Set_Index_Ptr+0
0x20B0	0x00DC2000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_SSD1963II
_TFT_Set_Address:
;__Lib_TFT_Defs.c, 277 :: 		void TFT_Set_Address(unsigned int x, unsigned int y) {
0x1EF4	0xB083    SUB	SP, SP, #12
0x1EF6	0xF8CDE000  STR	LR, [SP, #0]
0x1EFA	0xF8AD0004  STRH	R0, [SP, #4]
0x1EFE	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 278 :: 		TFT_Set_Index_Ptr(0x02);
0x1F02	0x2002    MOVS	R0, #2
0x1F04	0x4C17    LDR	R4, [PC, #92]
0x1F06	0x6824    LDR	R4, [R4, #0]
0x1F08	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 279 :: 		TFT_Write_Command_Ptr(x>>8);
0x1F0A	0xF8BD2004  LDRH	R2, [SP, #4]
0x1F0E	0x0A14    LSRS	R4, R2, #8
0x1F10	0xB2E0    UXTB	R0, R4
0x1F12	0x4C15    LDR	R4, [PC, #84]
0x1F14	0x6824    LDR	R4, [R4, #0]
0x1F16	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 280 :: 		TFT_Set_Index_Ptr(0x03);
0x1F18	0x2003    MOVS	R0, #3
0x1F1A	0x4C12    LDR	R4, [PC, #72]
0x1F1C	0x6824    LDR	R4, [R4, #0]
0x1F1E	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 281 :: 		TFT_Write_Command_Ptr(x);
0x1F20	0xF8BD0004  LDRH	R0, [SP, #4]
0x1F24	0x4C10    LDR	R4, [PC, #64]
0x1F26	0x6824    LDR	R4, [R4, #0]
0x1F28	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 282 :: 		TFT_Set_Index_Ptr(0x06);
0x1F2A	0x2006    MOVS	R0, #6
0x1F2C	0x4C0D    LDR	R4, [PC, #52]
0x1F2E	0x6824    LDR	R4, [R4, #0]
0x1F30	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 283 :: 		TFT_Write_Command_Ptr(y>>8);
0x1F32	0xF8BD2008  LDRH	R2, [SP, #8]
0x1F36	0x0A14    LSRS	R4, R2, #8
0x1F38	0xB2E0    UXTB	R0, R4
0x1F3A	0x4C0B    LDR	R4, [PC, #44]
0x1F3C	0x6824    LDR	R4, [R4, #0]
0x1F3E	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 284 :: 		TFT_Set_Index_Ptr(0x07);
0x1F40	0x2007    MOVS	R0, #7
0x1F42	0x4C08    LDR	R4, [PC, #32]
0x1F44	0x6824    LDR	R4, [R4, #0]
0x1F46	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 285 :: 		TFT_Write_Command_Ptr(y);
0x1F48	0xF8BD0008  LDRH	R0, [SP, #8]
0x1F4C	0x4C06    LDR	R4, [PC, #24]
0x1F4E	0x6824    LDR	R4, [R4, #0]
0x1F50	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 286 :: 		TFT_Set_Index_Ptr(0x22);
0x1F52	0x2022    MOVS	R0, #34
0x1F54	0x4C03    LDR	R4, [PC, #12]
0x1F56	0x6824    LDR	R4, [R4, #0]
0x1F58	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 287 :: 		}
L_end_TFT_Set_Address:
0x1F5A	0xF8DDE000  LDR	LR, [SP, #0]
0x1F5E	0xB003    ADD	SP, SP, #12
0x1F60	0x4770    BX	LR
0x1F62	0xBF00    NOP
0x1F64	0x00D82000  	_TFT_Set_Index_Ptr+0
0x1F68	0x00DC2000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address
_TFT_Set_Address_SST7715R:
;__Lib_TFT_Defs.c, 386 :: 		void TFT_Set_Address_SST7715R(unsigned int x, unsigned int y) {
0x1890	0xB083    SUB	SP, SP, #12
0x1892	0xF8CDE000  STR	LR, [SP, #0]
0x1896	0xF8AD0004  STRH	R0, [SP, #4]
0x189A	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 387 :: 		TFT_Set_Index_Ptr(0x2A);
0x189E	0x202A    MOVS	R0, #42
0x18A0	0x4C13    LDR	R4, [PC, #76]
0x18A2	0x6824    LDR	R4, [R4, #0]
0x18A4	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 388 :: 		TFT_Write_Command_Ptr(x>>8);
0x18A6	0xF8BD2004  LDRH	R2, [SP, #4]
0x18AA	0x0A14    LSRS	R4, R2, #8
0x18AC	0xB2E0    UXTB	R0, R4
0x18AE	0x4C11    LDR	R4, [PC, #68]
0x18B0	0x6824    LDR	R4, [R4, #0]
0x18B2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 389 :: 		TFT_Write_Command_Ptr(x);
0x18B4	0xF8BD0004  LDRH	R0, [SP, #4]
0x18B8	0x4C0E    LDR	R4, [PC, #56]
0x18BA	0x6824    LDR	R4, [R4, #0]
0x18BC	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 390 :: 		TFT_Set_Index_Ptr(0x2B);
0x18BE	0x202B    MOVS	R0, #43
0x18C0	0x4C0B    LDR	R4, [PC, #44]
0x18C2	0x6824    LDR	R4, [R4, #0]
0x18C4	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 391 :: 		TFT_Write_Command_Ptr(y>>8);
0x18C6	0xF8BD2008  LDRH	R2, [SP, #8]
0x18CA	0x0A14    LSRS	R4, R2, #8
0x18CC	0xB2E0    UXTB	R0, R4
0x18CE	0x4C09    LDR	R4, [PC, #36]
0x18D0	0x6824    LDR	R4, [R4, #0]
0x18D2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 392 :: 		TFT_Write_Command_Ptr(y);
0x18D4	0xF8BD0008  LDRH	R0, [SP, #8]
0x18D8	0x4C06    LDR	R4, [PC, #24]
0x18DA	0x6824    LDR	R4, [R4, #0]
0x18DC	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 393 :: 		TFT_Set_Index_Ptr(0x2C);
0x18DE	0x202C    MOVS	R0, #44
0x18E0	0x4C03    LDR	R4, [PC, #12]
0x18E2	0x6824    LDR	R4, [R4, #0]
0x18E4	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 394 :: 		}
L_end_TFT_Set_Address_SST7715R:
0x18E6	0xF8DDE000  LDR	LR, [SP, #0]
0x18EA	0xB003    ADD	SP, SP, #12
0x18EC	0x4770    BX	LR
0x18EE	0xBF00    NOP
0x18F0	0x00D82000  	_TFT_Set_Index_Ptr+0
0x18F4	0x00DC2000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_SST7715R
_TFT_Set_Address_HX8352A:
;__Lib_TFT_Defs.c, 611 :: 		void TFT_Set_Address_HX8352A(unsigned int x, unsigned int y) {
0x17BC	0xB083    SUB	SP, SP, #12
0x17BE	0xF8CDE000  STR	LR, [SP, #0]
0x17C2	0xF8AD0004  STRH	R0, [SP, #4]
0x17C6	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 612 :: 		if (TFT_Disp_Rotation == 90) {
0x17CA	0x4A2E    LDR	R2, [PC, #184]
0x17CC	0x7812    LDRB	R2, [R2, #0]
0x17CE	0x2A5A    CMP	R2, #90
0x17D0	0xD128    BNE	L_TFT_Set_Address_HX8352A26
;__Lib_TFT_Defs.c, 613 :: 		TFT_Set_Index_Ptr(0x02);
0x17D2	0x2002    MOVS	R0, #2
0x17D4	0x4C2C    LDR	R4, [PC, #176]
0x17D6	0x6824    LDR	R4, [R4, #0]
0x17D8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 614 :: 		TFT_Write_Command_Ptr(x>>8);
0x17DA	0xF8BD2004  LDRH	R2, [SP, #4]
0x17DE	0x0A14    LSRS	R4, R2, #8
0x17E0	0xB2E0    UXTB	R0, R4
0x17E2	0x4C2A    LDR	R4, [PC, #168]
0x17E4	0x6824    LDR	R4, [R4, #0]
0x17E6	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 615 :: 		TFT_Set_Index_Ptr(0x03);
0x17E8	0x2003    MOVS	R0, #3
0x17EA	0x4C27    LDR	R4, [PC, #156]
0x17EC	0x6824    LDR	R4, [R4, #0]
0x17EE	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 616 :: 		TFT_Write_Command_Ptr(x);
0x17F0	0xF8BD0004  LDRH	R0, [SP, #4]
0x17F4	0x4C25    LDR	R4, [PC, #148]
0x17F6	0x6824    LDR	R4, [R4, #0]
0x17F8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 617 :: 		TFT_Set_Index_Ptr(0x06);
0x17FA	0x2006    MOVS	R0, #6
0x17FC	0x4C22    LDR	R4, [PC, #136]
0x17FE	0x6824    LDR	R4, [R4, #0]
0x1800	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 618 :: 		TFT_Write_Command_Ptr(y>>8);
0x1802	0xF8BD2008  LDRH	R2, [SP, #8]
0x1806	0x0A14    LSRS	R4, R2, #8
0x1808	0xB2E0    UXTB	R0, R4
0x180A	0x4C20    LDR	R4, [PC, #128]
0x180C	0x6824    LDR	R4, [R4, #0]
0x180E	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 619 :: 		TFT_Set_Index_Ptr(0x07);
0x1810	0x2007    MOVS	R0, #7
0x1812	0x4C1D    LDR	R4, [PC, #116]
0x1814	0x6824    LDR	R4, [R4, #0]
0x1816	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 620 :: 		TFT_Write_Command_Ptr(y);
0x1818	0xF8BD0008  LDRH	R0, [SP, #8]
0x181C	0x4C1B    LDR	R4, [PC, #108]
0x181E	0x6824    LDR	R4, [R4, #0]
0x1820	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 621 :: 		}
0x1822	0xE027    B	L_TFT_Set_Address_HX8352A27
L_TFT_Set_Address_HX8352A26:
;__Lib_TFT_Defs.c, 623 :: 		TFT_Set_Index_Ptr(0x02);
0x1824	0x2002    MOVS	R0, #2
0x1826	0x4C18    LDR	R4, [PC, #96]
0x1828	0x6824    LDR	R4, [R4, #0]
0x182A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 624 :: 		TFT_Write_Command_Ptr(y>>8);
0x182C	0xF8BD2008  LDRH	R2, [SP, #8]
0x1830	0x0A14    LSRS	R4, R2, #8
0x1832	0xB2E0    UXTB	R0, R4
0x1834	0x4C15    LDR	R4, [PC, #84]
0x1836	0x6824    LDR	R4, [R4, #0]
0x1838	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 625 :: 		TFT_Set_Index_Ptr(0x03);
0x183A	0x2003    MOVS	R0, #3
0x183C	0x4C12    LDR	R4, [PC, #72]
0x183E	0x6824    LDR	R4, [R4, #0]
0x1840	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 626 :: 		TFT_Write_Command_Ptr(y);
0x1842	0xF8BD0008  LDRH	R0, [SP, #8]
0x1846	0x4C11    LDR	R4, [PC, #68]
0x1848	0x6824    LDR	R4, [R4, #0]
0x184A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 627 :: 		TFT_Set_Index_Ptr(0x06);
0x184C	0x2006    MOVS	R0, #6
0x184E	0x4C0E    LDR	R4, [PC, #56]
0x1850	0x6824    LDR	R4, [R4, #0]
0x1852	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 628 :: 		TFT_Write_Command_Ptr(x>>8);
0x1854	0xF8BD2004  LDRH	R2, [SP, #4]
0x1858	0x0A14    LSRS	R4, R2, #8
0x185A	0xB2E0    UXTB	R0, R4
0x185C	0x4C0B    LDR	R4, [PC, #44]
0x185E	0x6824    LDR	R4, [R4, #0]
0x1860	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 629 :: 		TFT_Set_Index_Ptr(0x07);
0x1862	0x2007    MOVS	R0, #7
0x1864	0x4C08    LDR	R4, [PC, #32]
0x1866	0x6824    LDR	R4, [R4, #0]
0x1868	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 630 :: 		TFT_Write_Command_Ptr(x);
0x186A	0xF8BD0004  LDRH	R0, [SP, #4]
0x186E	0x4C07    LDR	R4, [PC, #28]
0x1870	0x6824    LDR	R4, [R4, #0]
0x1872	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 631 :: 		}
L_TFT_Set_Address_HX8352A27:
;__Lib_TFT_Defs.c, 632 :: 		TFT_Set_Index_Ptr(0x22);
0x1874	0x2022    MOVS	R0, #34
0x1876	0x4C04    LDR	R4, [PC, #16]
0x1878	0x6824    LDR	R4, [R4, #0]
0x187A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 633 :: 		}
L_end_TFT_Set_Address_HX8352A:
0x187C	0xF8DDE000  LDR	LR, [SP, #0]
0x1880	0xB003    ADD	SP, SP, #12
0x1882	0x4770    BX	LR
0x1884	0x00352000  	__Lib_TFT_Defs_TFT_Disp_Rotation+0
0x1888	0x00D82000  	_TFT_Set_Index_Ptr+0
0x188C	0x00DC2000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_HX8352A
_TFT_Set_Address_R61526:
;__Lib_TFT_Defs.c, 877 :: 		void TFT_Set_Address_R61526(unsigned int x, unsigned int y) {
0x2230	0xB083    SUB	SP, SP, #12
0x2232	0xF8CDE000  STR	LR, [SP, #0]
0x2236	0xF8AD0004  STRH	R0, [SP, #4]
0x223A	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 878 :: 		TFT_Set_Index_Ptr(0x2A);
0x223E	0x202A    MOVS	R0, #42
0x2240	0x4C13    LDR	R4, [PC, #76]
0x2242	0x6824    LDR	R4, [R4, #0]
0x2244	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 879 :: 		TFT_Write_Command_Ptr(x>>8);
0x2246	0xF8BD2004  LDRH	R2, [SP, #4]
0x224A	0x0A14    LSRS	R4, R2, #8
0x224C	0xB2E0    UXTB	R0, R4
0x224E	0x4C11    LDR	R4, [PC, #68]
0x2250	0x6824    LDR	R4, [R4, #0]
0x2252	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 880 :: 		TFT_Write_Command_Ptr(x);
0x2254	0xF8BD0004  LDRH	R0, [SP, #4]
0x2258	0x4C0E    LDR	R4, [PC, #56]
0x225A	0x6824    LDR	R4, [R4, #0]
0x225C	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 881 :: 		TFT_Set_Index_Ptr(0x2B);
0x225E	0x202B    MOVS	R0, #43
0x2260	0x4C0B    LDR	R4, [PC, #44]
0x2262	0x6824    LDR	R4, [R4, #0]
0x2264	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 882 :: 		TFT_Write_Command_Ptr(y>>8);
0x2266	0xF8BD2008  LDRH	R2, [SP, #8]
0x226A	0x0A14    LSRS	R4, R2, #8
0x226C	0xB2E0    UXTB	R0, R4
0x226E	0x4C09    LDR	R4, [PC, #36]
0x2270	0x6824    LDR	R4, [R4, #0]
0x2272	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 883 :: 		TFT_Write_Command_Ptr(y);
0x2274	0xF8BD0008  LDRH	R0, [SP, #8]
0x2278	0x4C06    LDR	R4, [PC, #24]
0x227A	0x6824    LDR	R4, [R4, #0]
0x227C	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 884 :: 		TFT_Set_Index_Ptr(0x2C);
0x227E	0x202C    MOVS	R0, #44
0x2280	0x4C03    LDR	R4, [PC, #12]
0x2282	0x6824    LDR	R4, [R4, #0]
0x2284	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 885 :: 		}
L_end_TFT_Set_Address_R61526:
0x2286	0xF8DDE000  LDR	LR, [SP, #0]
0x228A	0xB003    ADD	SP, SP, #12
0x228C	0x4770    BX	LR
0x228E	0xBF00    NOP
0x2290	0x00D82000  	_TFT_Set_Index_Ptr+0
0x2294	0x00DC2000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_R61526
_TFT_Set_Address_ILI9481:
;__Lib_TFT_Defs.c, 1377 :: 		void TFT_Set_Address_ILI9481(unsigned int x, unsigned int y) {
0x21C8	0xB083    SUB	SP, SP, #12
0x21CA	0xF8CDE000  STR	LR, [SP, #0]
0x21CE	0xF8AD0004  STRH	R0, [SP, #4]
0x21D2	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 1378 :: 		TFT_Set_Index_Ptr(0x2A);
0x21D6	0x202A    MOVS	R0, #42
0x21D8	0x4C13    LDR	R4, [PC, #76]
0x21DA	0x6824    LDR	R4, [R4, #0]
0x21DC	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1379 :: 		TFT_Write_Command_Ptr(x>>8);
0x21DE	0xF8BD2004  LDRH	R2, [SP, #4]
0x21E2	0x0A14    LSRS	R4, R2, #8
0x21E4	0xB2E0    UXTB	R0, R4
0x21E6	0x4C11    LDR	R4, [PC, #68]
0x21E8	0x6824    LDR	R4, [R4, #0]
0x21EA	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1380 :: 		TFT_Write_Command_Ptr(x);
0x21EC	0xF8BD0004  LDRH	R0, [SP, #4]
0x21F0	0x4C0E    LDR	R4, [PC, #56]
0x21F2	0x6824    LDR	R4, [R4, #0]
0x21F4	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1381 :: 		TFT_Set_Index_Ptr(0x2B);
0x21F6	0x202B    MOVS	R0, #43
0x21F8	0x4C0B    LDR	R4, [PC, #44]
0x21FA	0x6824    LDR	R4, [R4, #0]
0x21FC	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1382 :: 		TFT_Write_Command_Ptr(y>>8);
0x21FE	0xF8BD2008  LDRH	R2, [SP, #8]
0x2202	0x0A14    LSRS	R4, R2, #8
0x2204	0xB2E0    UXTB	R0, R4
0x2206	0x4C09    LDR	R4, [PC, #36]
0x2208	0x6824    LDR	R4, [R4, #0]
0x220A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1383 :: 		TFT_Write_Command_Ptr(y);
0x220C	0xF8BD0008  LDRH	R0, [SP, #8]
0x2210	0x4C06    LDR	R4, [PC, #24]
0x2212	0x6824    LDR	R4, [R4, #0]
0x2214	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1384 :: 		TFT_Set_Index_Ptr(0x2C);
0x2216	0x202C    MOVS	R0, #44
0x2218	0x4C03    LDR	R4, [PC, #12]
0x221A	0x6824    LDR	R4, [R4, #0]
0x221C	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1385 :: 		}
L_end_TFT_Set_Address_ILI9481:
0x221E	0xF8DDE000  LDR	LR, [SP, #0]
0x2222	0xB003    ADD	SP, SP, #12
0x2224	0x4770    BX	LR
0x2226	0xBF00    NOP
0x2228	0x00D82000  	_TFT_Set_Index_Ptr+0
0x222C	0x00DC2000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_ILI9481
_TFT_Set_Address_ILI9342:
;__Lib_TFT_Defs.c, 1634 :: 		void TFT_Set_Address_ILI9342(unsigned int x, unsigned int y) {
0x22B0	0xB083    SUB	SP, SP, #12
0x22B2	0xF8CDE000  STR	LR, [SP, #0]
0x22B6	0xF8AD0004  STRH	R0, [SP, #4]
0x22BA	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 1635 :: 		TFT_Set_Index_Ptr(0x2A);
0x22BE	0x202A    MOVS	R0, #42
0x22C0	0x4C13    LDR	R4, [PC, #76]
0x22C2	0x6824    LDR	R4, [R4, #0]
0x22C4	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1636 :: 		TFT_Write_Command_Ptr(x>>8);
0x22C6	0xF8BD2004  LDRH	R2, [SP, #4]
0x22CA	0x0A14    LSRS	R4, R2, #8
0x22CC	0xB2E0    UXTB	R0, R4
0x22CE	0x4C11    LDR	R4, [PC, #68]
0x22D0	0x6824    LDR	R4, [R4, #0]
0x22D2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1637 :: 		TFT_Write_Command_Ptr(x);
0x22D4	0xF8BD0004  LDRH	R0, [SP, #4]
0x22D8	0x4C0E    LDR	R4, [PC, #56]
0x22DA	0x6824    LDR	R4, [R4, #0]
0x22DC	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1638 :: 		TFT_Set_Index_Ptr(0x2B);
0x22DE	0x202B    MOVS	R0, #43
0x22E0	0x4C0B    LDR	R4, [PC, #44]
0x22E2	0x6824    LDR	R4, [R4, #0]
0x22E4	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1639 :: 		TFT_Write_Command_Ptr(y>>8);
0x22E6	0xF8BD2008  LDRH	R2, [SP, #8]
0x22EA	0x0A14    LSRS	R4, R2, #8
0x22EC	0xB2E0    UXTB	R0, R4
0x22EE	0x4C09    LDR	R4, [PC, #36]
0x22F0	0x6824    LDR	R4, [R4, #0]
0x22F2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1640 :: 		TFT_Write_Command_Ptr(y);
0x22F4	0xF8BD0008  LDRH	R0, [SP, #8]
0x22F8	0x4C06    LDR	R4, [PC, #24]
0x22FA	0x6824    LDR	R4, [R4, #0]
0x22FC	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1641 :: 		TFT_Set_Index_Ptr(0x2C);
0x22FE	0x202C    MOVS	R0, #44
0x2300	0x4C03    LDR	R4, [PC, #12]
0x2302	0x6824    LDR	R4, [R4, #0]
0x2304	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1642 :: 		}
L_end_TFT_Set_Address_ILI9342:
0x2306	0xF8DDE000  LDR	LR, [SP, #0]
0x230A	0xB003    ADD	SP, SP, #12
0x230C	0x4770    BX	LR
0x230E	0xBF00    NOP
0x2310	0x00D82000  	_TFT_Set_Index_Ptr+0
0x2314	0x00DC2000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_ILI9342
_TFT_Set_Address_ILI9340:
;__Lib_TFT_Defs.c, 2112 :: 		void TFT_Set_Address_ILI9340(unsigned int x, unsigned int y) {
0x20B4	0xB083    SUB	SP, SP, #12
0x20B6	0xF8CDE000  STR	LR, [SP, #0]
0x20BA	0xF8AD0004  STRH	R0, [SP, #4]
0x20BE	0xF8AD1008  STRH	R1, [SP, #8]
;__Lib_TFT_Defs.c, 2113 :: 		TFT_Set_Index_Ptr(0x2A);
0x20C2	0x202A    MOVS	R0, #42
0x20C4	0x4C13    LDR	R4, [PC, #76]
0x20C6	0x6824    LDR	R4, [R4, #0]
0x20C8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2114 :: 		TFT_Write_Command_Ptr(x>>8);
0x20CA	0xF8BD2004  LDRH	R2, [SP, #4]
0x20CE	0x0A14    LSRS	R4, R2, #8
0x20D0	0xB2E0    UXTB	R0, R4
0x20D2	0x4C11    LDR	R4, [PC, #68]
0x20D4	0x6824    LDR	R4, [R4, #0]
0x20D6	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2115 :: 		TFT_Write_Command_Ptr(x);
0x20D8	0xF8BD0004  LDRH	R0, [SP, #4]
0x20DC	0x4C0E    LDR	R4, [PC, #56]
0x20DE	0x6824    LDR	R4, [R4, #0]
0x20E0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2116 :: 		TFT_Set_Index_Ptr(0x2B);
0x20E2	0x202B    MOVS	R0, #43
0x20E4	0x4C0B    LDR	R4, [PC, #44]
0x20E6	0x6824    LDR	R4, [R4, #0]
0x20E8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2117 :: 		TFT_Write_Command_Ptr(y>>8);
0x20EA	0xF8BD2008  LDRH	R2, [SP, #8]
0x20EE	0x0A14    LSRS	R4, R2, #8
0x20F0	0xB2E0    UXTB	R0, R4
0x20F2	0x4C09    LDR	R4, [PC, #36]
0x20F4	0x6824    LDR	R4, [R4, #0]
0x20F6	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2118 :: 		TFT_Write_Command_Ptr(y);
0x20F8	0xF8BD0008  LDRH	R0, [SP, #8]
0x20FC	0x4C06    LDR	R4, [PC, #24]
0x20FE	0x6824    LDR	R4, [R4, #0]
0x2100	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2119 :: 		TFT_Set_Index_Ptr(0x2C);
0x2102	0x202C    MOVS	R0, #44
0x2104	0x4C03    LDR	R4, [PC, #12]
0x2106	0x6824    LDR	R4, [R4, #0]
0x2108	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 2120 :: 		}
L_end_TFT_Set_Address_ILI9340:
0x210A	0xF8DDE000  LDR	LR, [SP, #0]
0x210E	0xB003    ADD	SP, SP, #12
0x2110	0x4770    BX	LR
0x2112	0xBF00    NOP
0x2114	0x00D82000  	_TFT_Set_Index_Ptr+0
0x2118	0x00DC2000  	_TFT_Write_Command_Ptr+0
; end of _TFT_Set_Address_ILI9340
_SPI1_Write:
;__Lib_SPI_123.c, 78 :: 		
; data_out start address is: 0 (R0)
0x21AC	0xB081    SUB	SP, SP, #4
0x21AE	0xF8CDE000  STR	LR, [SP, #0]
; data_out end address is: 0 (R0)
; data_out start address is: 0 (R0)
;__Lib_SPI_123.c, 79 :: 		
0x21B2	0xB281    UXTH	R1, R0
; data_out end address is: 0 (R0)
0x21B4	0x4803    LDR	R0, [PC, #12]
0x21B6	0xF7FEF86B  BL	__Lib_SPI_123_SPIx_Read+0
;__Lib_SPI_123.c, 80 :: 		
L_end_SPI1_Write:
0x21BA	0xF8DDE000  LDR	LR, [SP, #0]
0x21BE	0xB001    ADD	SP, SP, #4
0x21C0	0x4770    BX	LR
0x21C2	0xBF00    NOP
0x21C4	0x30004001  	SPI1_CR1+0
; end of _SPI1_Write
__Lib_SPI_123_SPIx_Read:
;__Lib_SPI_123.c, 67 :: 		
; data_out start address is: 4 (R1)
; base start address is: 0 (R0)
0x0290	0xB081    SUB	SP, SP, #4
; data_out end address is: 4 (R1)
; base end address is: 0 (R0)
; base start address is: 0 (R0)
; data_out start address is: 4 (R1)
;__Lib_SPI_123.c, 68 :: 		
0x0292	0xF200020C  ADDW	R2, R0, #12
0x0296	0x6011    STR	R1, [R2, #0]
; data_out end address is: 4 (R1)
; base end address is: 0 (R0)
;__Lib_SPI_123.c, 69 :: 		
L___Lib_SPI_123_SPIx_Read0:
; base start address is: 0 (R0)
0x0298	0xF2000208  ADDW	R2, R0, #8
0x029C	0x6813    LDR	R3, [R2, #0]
0x029E	0xF3C30200  UBFX	R2, R3, #0, #1
0x02A2	0xB902    CBNZ	R2, L___Lib_SPI_123_SPIx_Read1
;__Lib_SPI_123.c, 70 :: 		
0x02A4	0xE7F8    B	L___Lib_SPI_123_SPIx_Read0
L___Lib_SPI_123_SPIx_Read1:
;__Lib_SPI_123.c, 71 :: 		
0x02A6	0xF200020C  ADDW	R2, R0, #12
; base end address is: 0 (R0)
0x02AA	0x6812    LDR	R2, [R2, #0]
0x02AC	0xB290    UXTH	R0, R2
;__Lib_SPI_123.c, 72 :: 		
L_end_SPIx_Read:
0x02AE	0xB001    ADD	SP, SP, #4
0x02B0	0x4770    BX	LR
; end of __Lib_SPI_123_SPIx_Read
_SPI2_Write:
;__Lib_SPI_123.c, 103 :: 		
; data_out start address is: 0 (R0)
0x2190	0xB081    SUB	SP, SP, #4
0x2192	0xF8CDE000  STR	LR, [SP, #0]
; data_out end address is: 0 (R0)
; data_out start address is: 0 (R0)
;__Lib_SPI_123.c, 104 :: 		
0x2196	0xB281    UXTH	R1, R0
; data_out end address is: 0 (R0)
0x2198	0x4803    LDR	R0, [PC, #12]
0x219A	0xF7FEF879  BL	__Lib_SPI_123_SPIx_Read+0
;__Lib_SPI_123.c, 105 :: 		
L_end_SPI2_Write:
0x219E	0xF8DDE000  LDR	LR, [SP, #0]
0x21A2	0xB001    ADD	SP, SP, #4
0x21A4	0x4770    BX	LR
0x21A6	0xBF00    NOP
0x21A8	0x38004000  	SPI2_CR1+0
; end of _SPI2_Write
_SPI3_Write:
;__Lib_SPI_123.c, 129 :: 		
; data_out start address is: 0 (R0)
0x2174	0xB081    SUB	SP, SP, #4
0x2176	0xF8CDE000  STR	LR, [SP, #0]
; data_out end address is: 0 (R0)
; data_out start address is: 0 (R0)
;__Lib_SPI_123.c, 130 :: 		
0x217A	0xB281    UXTH	R1, R0
; data_out end address is: 0 (R0)
0x217C	0x4803    LDR	R0, [PC, #12]
0x217E	0xF7FEF887  BL	__Lib_SPI_123_SPIx_Read+0
;__Lib_SPI_123.c, 131 :: 		
L_end_SPI3_Write:
0x2182	0xF8DDE000  LDR	LR, [SP, #0]
0x2186	0xB001    ADD	SP, SP, #4
0x2188	0x4770    BX	LR
0x218A	0xBF00    NOP
0x218C	0x3C004000  	SPI3_CR1+0
; end of _SPI3_Write
_TFT_Write_Data:
;__Lib_TFT_Defs.c, 295 :: 		void TFT_Write_Data(unsigned int _data) {
0x0978	0xB083    SUB	SP, SP, #12
0x097A	0xF8CDE000  STR	LR, [SP, #0]
0x097E	0xF8AD0004  STRH	R0, [SP, #4]
;__Lib_TFT_Defs.c, 296 :: 		TFT_RS = 1;
0x0982	0x2201    MOVS	R2, #1
0x0984	0xB252    SXTB	R2, R2
0x0986	0x4912    LDR	R1, [PC, #72]
0x0988	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 297 :: 		Write_to_Port(Hi(_data));
0x098A	0xA901    ADD	R1, SP, #4
0x098C	0x9102    STR	R1, [SP, #8]
0x098E	0x1C49    ADDS	R1, R1, #1
0x0990	0x7809    LDRB	R1, [R1, #0]
0x0992	0xB2C8    UXTB	R0, R1
0x0994	0xF7FFFBE8  BL	__Lib_TFT_Defs_Write_to_Port+0
;__Lib_TFT_Defs.c, 298 :: 		TFT_Write_Strobe();
0x0998	0x2200    MOVS	R2, #0
0x099A	0xB252    SXTB	R2, R2
0x099C	0x490D    LDR	R1, [PC, #52]
0x099E	0x600A    STR	R2, [R1, #0]
0x09A0	0xBF00    NOP
0x09A2	0x2201    MOVS	R2, #1
0x09A4	0xB252    SXTB	R2, R2
0x09A6	0x490B    LDR	R1, [PC, #44]
0x09A8	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 299 :: 		Write_to_Port(Lo(_data));
0x09AA	0x9902    LDR	R1, [SP, #8]
0x09AC	0x7809    LDRB	R1, [R1, #0]
0x09AE	0xB2C8    UXTB	R0, R1
0x09B0	0xF7FFFBDA  BL	__Lib_TFT_Defs_Write_to_Port+0
;__Lib_TFT_Defs.c, 300 :: 		TFT_Write_Strobe();
0x09B4	0x2200    MOVS	R2, #0
0x09B6	0xB252    SXTB	R2, R2
0x09B8	0x4906    LDR	R1, [PC, #24]
0x09BA	0x600A    STR	R2, [R1, #0]
0x09BC	0xBF00    NOP
0x09BE	0x2201    MOVS	R2, #1
0x09C0	0xB252    SXTB	R2, R2
0x09C2	0x4904    LDR	R1, [PC, #16]
0x09C4	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 301 :: 		}
L_end_TFT_Write_Data:
0x09C6	0xF8DDE000  LDR	LR, [SP, #0]
0x09CA	0xB003    ADD	SP, SP, #12
0x09CC	0x4770    BX	LR
0x09CE	0xBF00    NOP
0x09D0	0x01B04223  	TFT_RS+0
0x09D4	0x01AC4223  	TFT_WR+0
; end of _TFT_Write_Data
_TFT_16bit_Write_Data:
;__Lib_TFT_Defs.c, 309 :: 		void TFT_16bit_Write_Data(unsigned int _data) {
; _data start address is: 0 (R0)
; _data end address is: 0 (R0)
; _data start address is: 0 (R0)
;__Lib_TFT_Defs.c, 310 :: 		TFT_RS = 1;
0x094C	0x2201    MOVS	R2, #1
0x094E	0xB252    SXTB	R2, R2
0x0950	0x4906    LDR	R1, [PC, #24]
0x0952	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 311 :: 		TFT_DataPort = _data;
0x0954	0x4906    LDR	R1, [PC, #24]
0x0956	0x8008    STRH	R0, [R1, #0]
; _data end address is: 0 (R0)
;__Lib_TFT_Defs.c, 312 :: 		TFT_Write_Strobe();
0x0958	0x2200    MOVS	R2, #0
0x095A	0xB252    SXTB	R2, R2
0x095C	0x4905    LDR	R1, [PC, #20]
0x095E	0x600A    STR	R2, [R1, #0]
0x0960	0xBF00    NOP
0x0962	0x2201    MOVS	R2, #1
0x0964	0xB252    SXTB	R2, R2
0x0966	0x4903    LDR	R1, [PC, #12]
0x0968	0x600A    STR	R2, [R1, #0]
;__Lib_TFT_Defs.c, 313 :: 		}
L_end_TFT_16bit_Write_Data:
0x096A	0x4770    BX	LR
0x096C	0x01B04223  	TFT_RS+0
0x0970	0x180C4001  	TFT_DataPort+0
0x0974	0x01AC4223  	TFT_WR+0
; end of _TFT_16bit_Write_Data
_TFT_SSD1963_8bit_Write_Data:
;__Lib_TFT_Defs.c, 2909 :: 		void TFT_SSD1963_8bit_Write_Data(unsigned int color) {
; color start address is: 0 (R0)
0x09D8	0xB081    SUB	SP, SP, #4
0x09DA	0xF8CDE000  STR	LR, [SP, #0]
0x09DE	0xB283    UXTH	R3, R0
; color end address is: 0 (R0)
; color start address is: 12 (R3)
;__Lib_TFT_Defs.c, 2911 :: 		temp = (color>>11);
0x09E0	0x0AD9    LSRS	R1, R3, #11
; temp start address is: 0 (R0)
0x09E2	0xB2C8    UXTB	R0, R1
;__Lib_TFT_Defs.c, 2912 :: 		temp = (temp<<3);
0x09E4	0x00C1    LSLS	R1, R0, #3
; temp end address is: 0 (R0)
; temp start address is: 16 (R4)
0x09E6	0xB2CC    UXTB	R4, R1
;__Lib_TFT_Defs.c, 2913 :: 		if ((temp>>7) == 1) {
0x09E8	0x09E1    LSRS	R1, R4, #7
0x09EA	0xB2C9    UXTB	R1, R1
0x09EC	0x2901    CMP	R1, #1
0x09EE	0xD102    BNE	L__TFT_SSD1963_8bit_Write_Data195
;__Lib_TFT_Defs.c, 2914 :: 		temp += 7;
0x09F0	0x1DE1    ADDS	R1, R4, #7
; temp end address is: 16 (R4)
; temp start address is: 0 (R0)
0x09F2	0xB2C8    UXTB	R0, R1
; temp end address is: 0 (R0)
;__Lib_TFT_Defs.c, 2915 :: 		}
0x09F4	0xE000    B	L_TFT_SSD1963_8bit_Write_Data171
L__TFT_SSD1963_8bit_Write_Data195:
;__Lib_TFT_Defs.c, 2913 :: 		if ((temp>>7) == 1) {
0x09F6	0xB2E0    UXTB	R0, R4
;__Lib_TFT_Defs.c, 2915 :: 		}
L_TFT_SSD1963_8bit_Write_Data171:
;__Lib_TFT_Defs.c, 2916 :: 		TFT_SSD1963YT_8bit_Write_Command(temp);
; temp start address is: 0 (R0)
; temp end address is: 0 (R0)
0x09F8	0xF7FFFBC2  BL	_TFT_SSD1963YT_8bit_Write_Command+0
;__Lib_TFT_Defs.c, 2917 :: 		temp = (color>>5);
0x09FC	0x0959    LSRS	R1, R3, #5
; temp start address is: 0 (R0)
0x09FE	0xB2C8    UXTB	R0, R1
;__Lib_TFT_Defs.c, 2918 :: 		temp = (temp<<2);
0x0A00	0x0081    LSLS	R1, R0, #2
; temp end address is: 0 (R0)
; temp start address is: 16 (R4)
0x0A02	0xB2CC    UXTB	R4, R1
;__Lib_TFT_Defs.c, 2919 :: 		if ((temp>>7) == 1) {
0x0A04	0x09E1    LSRS	R1, R4, #7
0x0A06	0xB2C9    UXTB	R1, R1
0x0A08	0x2901    CMP	R1, #1
0x0A0A	0xD102    BNE	L__TFT_SSD1963_8bit_Write_Data196
;__Lib_TFT_Defs.c, 2920 :: 		temp += 3;
0x0A0C	0x1CE1    ADDS	R1, R4, #3
; temp end address is: 16 (R4)
; temp start address is: 0 (R0)
0x0A0E	0xB2C8    UXTB	R0, R1
; temp end address is: 0 (R0)
;__Lib_TFT_Defs.c, 2921 :: 		}
0x0A10	0xE000    B	L_TFT_SSD1963_8bit_Write_Data172
L__TFT_SSD1963_8bit_Write_Data196:
;__Lib_TFT_Defs.c, 2919 :: 		if ((temp>>7) == 1) {
0x0A12	0xB2E0    UXTB	R0, R4
;__Lib_TFT_Defs.c, 2921 :: 		}
L_TFT_SSD1963_8bit_Write_Data172:
;__Lib_TFT_Defs.c, 2922 :: 		TFT_SSD1963YT_8bit_Write_Command(temp);
; temp start address is: 0 (R0)
; temp end address is: 0 (R0)
0x0A14	0xF7FFFBB4  BL	_TFT_SSD1963YT_8bit_Write_Command+0
;__Lib_TFT_Defs.c, 2923 :: 		temp = (color<<3);
0x0A18	0x00D9    LSLS	R1, R3, #3
; color end address is: 12 (R3)
; temp start address is: 12 (R3)
0x0A1A	0xB2CB    UXTB	R3, R1
;__Lib_TFT_Defs.c, 2924 :: 		if ((temp>>7) == 1) {
0x0A1C	0x09D9    LSRS	R1, R3, #7
0x0A1E	0xB2C9    UXTB	R1, R1
0x0A20	0x2901    CMP	R1, #1
0x0A22	0xD102    BNE	L__TFT_SSD1963_8bit_Write_Data197
;__Lib_TFT_Defs.c, 2925 :: 		temp += 7;
0x0A24	0x1DD9    ADDS	R1, R3, #7
; temp end address is: 12 (R3)
; temp start address is: 0 (R0)
0x0A26	0xB2C8    UXTB	R0, R1
; temp end address is: 0 (R0)
;__Lib_TFT_Defs.c, 2926 :: 		}
0x0A28	0xE000    B	L_TFT_SSD1963_8bit_Write_Data173
L__TFT_SSD1963_8bit_Write_Data197:
;__Lib_TFT_Defs.c, 2924 :: 		if ((temp>>7) == 1) {
0x0A2A	0xB2D8    UXTB	R0, R3
;__Lib_TFT_Defs.c, 2926 :: 		}
L_TFT_SSD1963_8bit_Write_Data173:
;__Lib_TFT_Defs.c, 2927 :: 		TFT_SSD1963YT_8bit_Write_Command(temp);
; temp start address is: 0 (R0)
; temp end address is: 0 (R0)
0x0A2C	0xF7FFFBA8  BL	_TFT_SSD1963YT_8bit_Write_Command+0
;__Lib_TFT_Defs.c, 2928 :: 		}
L_end_TFT_SSD1963_8bit_Write_Data:
0x0A30	0xF8DDE000  LDR	LR, [SP, #0]
0x0A34	0xB001    ADD	SP, SP, #4
0x0A36	0x4770    BX	LR
; end of _TFT_SSD1963_8bit_Write_Data
__Lib_TFT_Is_SSD1963_Set:
;__Lib_TFT.c, 140 :: 		
0x093C	0xB081    SUB	SP, SP, #4
;__Lib_TFT.c, 141 :: 		
0x093E	0x4802    LDR	R0, [PC, #8]
0x0940	0x7800    LDRB	R0, [R0, #0]
;__Lib_TFT.c, 142 :: 		
L_end_Is_SSD1963_Set:
0x0942	0xB001    ADD	SP, SP, #4
0x0944	0x4770    BX	LR
0x0946	0xBF00    NOP
0x0948	0x00342000  	__Lib_TFT___SSD1963_controller+0
; end of __Lib_TFT_Is_SSD1963_Set
_pin_reset:
;Reset_Routines.c, 12 :: 		void pin_reset() {
;Reset_Routines.c, 13 :: 		RST = 0;  // activate reset
0x2898	0x2100    MOVS	R1, #0
0x289A	0x480E    LDR	R0, [PC, #56]
0x289C	0x6001    STR	R1, [R0, #0]
;Reset_Routines.c, 14 :: 		Delay_ms(5);
0x289E	0xF64E275F  MOVW	R7, #59999
0x28A2	0xF2C00700  MOVT	R7, #0
0x28A6	0xBF00    NOP
0x28A8	0xBF00    NOP
L_pin_reset0:
0x28AA	0x1E7F    SUBS	R7, R7, #1
0x28AC	0xD1FD    BNE	L_pin_reset0
0x28AE	0xBF00    NOP
0x28B0	0xBF00    NOP
0x28B2	0xBF00    NOP
;Reset_Routines.c, 15 :: 		RST = 1;  // deactivate reset
0x28B4	0x2101    MOVS	R1, #1
0x28B6	0xB249    SXTB	R1, R1
0x28B8	0x4806    LDR	R0, [PC, #24]
0x28BA	0x6001    STR	R1, [R0, #0]
;Reset_Routines.c, 16 :: 		Delay_ms(5);
0x28BC	0xF64E275F  MOVW	R7, #59999
0x28C0	0xF2C00700  MOVT	R7, #0
0x28C4	0xBF00    NOP
0x28C6	0xBF00    NOP
L_pin_reset2:
0x28C8	0x1E7F    SUBS	R7, R7, #1
0x28CA	0xD1FD    BNE	L_pin_reset2
0x28CC	0xBF00    NOP
0x28CE	0xBF00    NOP
0x28D0	0xBF00    NOP
;Reset_Routines.c, 17 :: 		}
L_end_pin_reset:
0x28D2	0x4770    BX	LR
0x28D4	0x01884222  	RST+0
; end of _pin_reset
_software_reset:
;Reset_Routines.c, 31 :: 		void software_reset() {                // PWR_reset,BB_reset and MAC_reset at once
0x287C	0xB081    SUB	SP, SP, #4
0x287E	0xF8CDE000  STR	LR, [SP, #0]
;Reset_Routines.c, 32 :: 		write_ZIGBEE_short(SOFTRST, 0x07);
0x2882	0x2107    MOVS	R1, #7
0x2884	0xB249    SXTB	R1, R1
0x2886	0x202A    MOVS	R0, #42
0x2888	0xB240    SXTB	R0, R0
0x288A	0xF7FDFFA7  BL	_write_ZIGBEE_short+0
;Reset_Routines.c, 33 :: 		}
L_end_software_reset:
0x288E	0xF8DDE000  LDR	LR, [SP, #0]
0x2892	0xB001    ADD	SP, SP, #4
0x2894	0x4770    BX	LR
; end of _software_reset
_write_ZIGBEE_short:
;ReadWrite_Routines.c, 25 :: 		void write_ZIGBEE_short(short int address, short int data_r) {
; data_r start address is: 4 (R1)
; address start address is: 0 (R0)
0x07DC	0xB081    SUB	SP, SP, #4
0x07DE	0xF8CDE000  STR	LR, [SP, #0]
0x07E2	0xB24C    SXTB	R4, R1
; data_r end address is: 4 (R1)
; address end address is: 0 (R0)
; address start address is: 0 (R0)
; data_r start address is: 16 (R4)
;ReadWrite_Routines.c, 26 :: 		CS = 0;
0x07E4	0x2300    MOVS	R3, #0
0x07E6	0x4A0C    LDR	R2, [PC, #48]
0x07E8	0x6013    STR	R3, [R2, #0]
;ReadWrite_Routines.c, 28 :: 		address = ((address << 1) & 0b01111111) | 0x01; // calculating addressing mode
0x07EA	0x0042    LSLS	R2, R0, #1
0x07EC	0xB212    SXTH	R2, R2
; address end address is: 0 (R0)
0x07EE	0xF002027F  AND	R2, R2, #127
0x07F2	0xB212    SXTH	R2, R2
0x07F4	0xF0420201  ORR	R2, R2, #1
;ReadWrite_Routines.c, 29 :: 		SPI3_Write(address);       // addressing register
0x07F8	0xB250    SXTB	R0, R2
0x07FA	0xB280    UXTH	R0, R0
0x07FC	0xF001FCBA  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 30 :: 		SPI3_Write(data_r);        // write data in register
0x0800	0xB260    SXTB	R0, R4
0x0802	0xB280    UXTH	R0, R0
; data_r end address is: 16 (R4)
0x0804	0xF001FCB6  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 32 :: 		CS = 1;
0x0808	0x2301    MOVS	R3, #1
0x080A	0xB25B    SXTB	R3, R3
0x080C	0x4A02    LDR	R2, [PC, #8]
0x080E	0x6013    STR	R3, [R2, #0]
;ReadWrite_Routines.c, 33 :: 		}
L_end_write_ZIGBEE_short:
0x0810	0xF8DDE000  LDR	LR, [SP, #0]
0x0814	0xB001    ADD	SP, SP, #4
0x0816	0x4770    BX	LR
0x0818	0x81B44222  	CS+0
; end of _write_ZIGBEE_short
_RF_reset:
;Reset_Routines.c, 35 :: 		void RF_reset() {
0x2920	0xB082    SUB	SP, SP, #8
0x2922	0xF8CDE000  STR	LR, [SP, #0]
;Reset_Routines.c, 36 :: 		short int temp = 0;
;Reset_Routines.c, 37 :: 		temp = read_ZIGBEE_short(RFCTL);
0x2926	0x2036    MOVS	R0, #54
0x2928	0xB240    SXTB	R0, R0
0x292A	0xF7FDFF77  BL	_read_ZIGBEE_short+0
;Reset_Routines.c, 38 :: 		temp = temp | 0x04;                  // mask for RFRST bit
0x292E	0xF0400004  ORR	R0, R0, #4
; temp start address is: 4 (R1)
0x2932	0xB241    SXTB	R1, R0
;Reset_Routines.c, 39 :: 		write_ZIGBEE_short(RFCTL, temp);
0x2934	0xF88D1004  STRB	R1, [SP, #4]
0x2938	0xB241    SXTB	R1, R0
0x293A	0x2036    MOVS	R0, #54
0x293C	0xB240    SXTB	R0, R0
0x293E	0xF7FDFF4D  BL	_write_ZIGBEE_short+0
0x2942	0xF99D1004  LDRSB	R1, [SP, #4]
;Reset_Routines.c, 40 :: 		temp = temp & (!0x04);               // mask for RFRST bit
0x2946	0xF0010000  AND	R0, R1, #0
; temp end address is: 4 (R1)
;Reset_Routines.c, 41 :: 		write_ZIGBEE_short(RFCTL, temp);
0x294A	0xB241    SXTB	R1, R0
0x294C	0x2036    MOVS	R0, #54
0x294E	0xB240    SXTB	R0, R0
0x2950	0xF7FDFF44  BL	_write_ZIGBEE_short+0
;Reset_Routines.c, 42 :: 		Delay_ms(1);
0x2954	0xF64267DF  MOVW	R7, #11999
0x2958	0xF2C00700  MOVT	R7, #0
0x295C	0xBF00    NOP
0x295E	0xBF00    NOP
L_RF_reset4:
0x2960	0x1E7F    SUBS	R7, R7, #1
0x2962	0xD1FD    BNE	L_RF_reset4
0x2964	0xBF00    NOP
0x2966	0xBF00    NOP
0x2968	0xBF00    NOP
;Reset_Routines.c, 43 :: 		}
L_end_RF_reset:
0x296A	0xF8DDE000  LDR	LR, [SP, #0]
0x296E	0xB002    ADD	SP, SP, #8
0x2970	0x4770    BX	LR
; end of _RF_reset
_read_ZIGBEE_short:
;ReadWrite_Routines.c, 36 :: 		short int read_ZIGBEE_short(short int address) {
; address start address is: 0 (R0)
0x081C	0xB081    SUB	SP, SP, #4
0x081E	0xF8CDE000  STR	LR, [SP, #0]
; address end address is: 0 (R0)
; address start address is: 0 (R0)
;ReadWrite_Routines.c, 37 :: 		short int data_r = 0, dummy_data_r = 0;
; dummy_data_r start address is: 16 (R4)
0x0822	0x2400    MOVS	R4, #0
0x0824	0xB264    SXTB	R4, R4
;ReadWrite_Routines.c, 39 :: 		CS = 0;
0x0826	0x2200    MOVS	R2, #0
0x0828	0x490B    LDR	R1, [PC, #44]
0x082A	0x600A    STR	R2, [R1, #0]
;ReadWrite_Routines.c, 41 :: 		address = (address << 1) & 0b01111110;      // calculating addressing mode
0x082C	0x0041    LSLS	R1, R0, #1
0x082E	0xB209    SXTH	R1, R1
; address end address is: 0 (R0)
0x0830	0xF001017E  AND	R1, R1, #126
;ReadWrite_Routines.c, 42 :: 		SPI3_Write(address);                        // addressing register
0x0834	0xB248    SXTB	R0, R1
0x0836	0xB280    UXTH	R0, R0
0x0838	0xF001FC9C  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 43 :: 		data_r = SPI3_Read(dummy_data_r);           // read data from register
0x083C	0xB260    SXTB	R0, R4
0x083E	0xB280    UXTH	R0, R0
; dummy_data_r end address is: 16 (R4)
0x0840	0xF7FFFD38  BL	_SPI3_Read+0
;ReadWrite_Routines.c, 44 :: 		CS = 1;
0x0844	0x2201    MOVS	R2, #1
0x0846	0xB252    SXTB	R2, R2
0x0848	0x4903    LDR	R1, [PC, #12]
0x084A	0x600A    STR	R2, [R1, #0]
;ReadWrite_Routines.c, 45 :: 		return data_r;
0x084C	0xB240    SXTB	R0, R0
;ReadWrite_Routines.c, 46 :: 		}
L_end_read_ZIGBEE_short:
0x084E	0xF8DDE000  LDR	LR, [SP, #0]
0x0852	0xB001    ADD	SP, SP, #4
0x0854	0x4770    BX	LR
0x0856	0xBF00    NOP
0x0858	0x81B44222  	CS+0
; end of _read_ZIGBEE_short
_SPI3_Read:
;__Lib_SPI_123.c, 125 :: 		
; data_out start address is: 0 (R0)
0x02B4	0xB081    SUB	SP, SP, #4
0x02B6	0xF8CDE000  STR	LR, [SP, #0]
; data_out end address is: 0 (R0)
; data_out start address is: 0 (R0)
;__Lib_SPI_123.c, 126 :: 		
0x02BA	0xB281    UXTH	R1, R0
; data_out end address is: 0 (R0)
0x02BC	0x4803    LDR	R0, [PC, #12]
0x02BE	0xF7FFFFE7  BL	__Lib_SPI_123_SPIx_Read+0
;__Lib_SPI_123.c, 127 :: 		
L_end_SPI3_Read:
0x02C2	0xF8DDE000  LDR	LR, [SP, #0]
0x02C6	0xB001    ADD	SP, SP, #4
0x02C8	0x4770    BX	LR
0x02CA	0xBF00    NOP
0x02CC	0x3C004000  	SPI3_CR1+0
; end of _SPI3_Read
_set_wake_from_pin:
;Misc_Routines.c, 364 :: 		void set_wake_from_pin() {
0x28D8	0xB081    SUB	SP, SP, #4
0x28DA	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 365 :: 		short int temp = 0;
;Misc_Routines.c, 367 :: 		WAKE_ = 0;
0x28DE	0x2100    MOVS	R1, #0
0x28E0	0x480D    LDR	R0, [PC, #52]
0x28E2	0x6001    STR	R1, [R0, #0]
;Misc_Routines.c, 368 :: 		temp = read_ZIGBEE_short(RXFLUSH);
0x28E4	0x200D    MOVS	R0, #13
0x28E6	0xB240    SXTB	R0, R0
0x28E8	0xF7FDFF98  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 369 :: 		temp = temp | 0x60;                     // mask
0x28EC	0xF0400060  ORR	R0, R0, #96
;Misc_Routines.c, 370 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x28F0	0xB241    SXTB	R1, R0
0x28F2	0x200D    MOVS	R0, #13
0x28F4	0xB240    SXTB	R0, R0
0x28F6	0xF7FDFF71  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 372 :: 		temp = read_ZIGBEE_short(WAKECON);
0x28FA	0x2022    MOVS	R0, #34
0x28FC	0xB240    SXTB	R0, R0
0x28FE	0xF7FDFF8D  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 373 :: 		temp = temp | 0x80;
0x2902	0xF0400080  ORR	R0, R0, #128
;Misc_Routines.c, 374 :: 		write_ZIGBEE_short(WAKECON, temp);
0x2906	0xB241    SXTB	R1, R0
0x2908	0x2022    MOVS	R0, #34
0x290A	0xB240    SXTB	R0, R0
0x290C	0xF7FDFF66  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 375 :: 		}
L_end_set_wake_from_pin:
0x2910	0xF8DDE000  LDR	LR, [SP, #0]
0x2914	0xB001    ADD	SP, SP, #4
0x2916	0x4770    BX	LR
0x2918	0x01904221  	WAKE_+0
; end of _set_wake_from_pin
_set_long_address:
;Misc_Routines.c, 348 :: 		void set_long_address(short int * address) {
; i start address is: 12 (R3)
0x27DC	0xB083    SUB	SP, SP, #12
0x27DE	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 351 :: 		for(i = 0; i < 8; i++) {
;Misc_Routines.c, 348 :: 		void set_long_address(short int * address) {
;Misc_Routines.c, 351 :: 		for(i = 0; i < 8; i++) {
;Misc_Routines.c, 348 :: 		void set_long_address(short int * address) {
0x27E2	0x9002    STR	R0, [SP, #8]
; i end address is: 12 (R3)
;Misc_Routines.c, 349 :: 		short int i = 0;
;Misc_Routines.c, 351 :: 		for(i = 0; i < 8; i++) {
; i start address is: 12 (R3)
0x27E4	0x2300    MOVS	R3, #0
0x27E6	0xB25B    SXTB	R3, R3
; i end address is: 12 (R3)
0x27E8	0xB258    SXTB	R0, R3
L_set_long_address41:
; i start address is: 0 (R0)
0x27EA	0x2808    CMP	R0, #8
0x27EC	0xDA11    BGE	L_set_long_address42
;Misc_Routines.c, 352 :: 		write_ZIGBEE_short(EADR0 + i, address[i]);   // 0x05 address of EADR0
0x27EE	0x9902    LDR	R1, [SP, #8]
0x27F0	0x1809    ADDS	R1, R1, R0
0x27F2	0xF9911000  LDRSB	R1, [R1, #0]
0x27F6	0xB24A    SXTB	R2, R1
0x27F8	0x1D41    ADDS	R1, R0, #5
0x27FA	0xF88D0004  STRB	R0, [SP, #4]
0x27FE	0xB248    SXTB	R0, R1
0x2800	0xB251    SXTB	R1, R2
0x2802	0xF7FDFFEB  BL	_write_ZIGBEE_short+0
0x2806	0xF99D0004  LDRSB	R0, [SP, #4]
;Misc_Routines.c, 351 :: 		for(i = 0; i < 8; i++) {
0x280A	0x1C41    ADDS	R1, R0, #1
; i end address is: 0 (R0)
; i start address is: 12 (R3)
0x280C	0xB24B    SXTB	R3, R1
;Misc_Routines.c, 353 :: 		}
0x280E	0xB258    SXTB	R0, R3
; i end address is: 12 (R3)
0x2810	0xE7EB    B	L_set_long_address41
L_set_long_address42:
;Misc_Routines.c, 354 :: 		}
L_end_set_long_address:
0x2812	0xF8DDE000  LDR	LR, [SP, #0]
0x2816	0xB003    ADD	SP, SP, #12
0x2818	0x4770    BX	LR
; end of _set_long_address
_set_short_address:
;Misc_Routines.c, 343 :: 		void set_short_address(short int * address) {
; address start address is: 0 (R0)
0x27B0	0xB082    SUB	SP, SP, #8
0x27B2	0xF8CDE000  STR	LR, [SP, #0]
; address end address is: 0 (R0)
; address start address is: 0 (R0)
;Misc_Routines.c, 344 :: 		write_ZIGBEE_short(SADRL, address[0]);
0x27B6	0xF9901000  LDRSB	R1, [R0, #0]
0x27BA	0x9001    STR	R0, [SP, #4]
0x27BC	0x2003    MOVS	R0, #3
0x27BE	0xB240    SXTB	R0, R0
0x27C0	0xF7FEF80C  BL	_write_ZIGBEE_short+0
0x27C4	0x9801    LDR	R0, [SP, #4]
;Misc_Routines.c, 345 :: 		write_ZIGBEE_short(SADRH, address[1]);
0x27C6	0x1C41    ADDS	R1, R0, #1
; address end address is: 0 (R0)
0x27C8	0xF9911000  LDRSB	R1, [R1, #0]
0x27CC	0x2004    MOVS	R0, #4
0x27CE	0xB240    SXTB	R0, R0
0x27D0	0xF7FEF804  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 346 :: 		}
L_end_set_short_address:
0x27D4	0xF8DDE000  LDR	LR, [SP, #0]
0x27D8	0xB002    ADD	SP, SP, #8
0x27DA	0x4770    BX	LR
; end of _set_short_address
_set_PAN_ID:
;Misc_Routines.c, 356 :: 		void set_PAN_ID(short int * address) {
; address start address is: 0 (R0)
0x2850	0xB082    SUB	SP, SP, #8
0x2852	0xF8CDE000  STR	LR, [SP, #0]
; address end address is: 0 (R0)
; address start address is: 0 (R0)
;Misc_Routines.c, 357 :: 		write_ZIGBEE_short(PANIDL, address[0]);
0x2856	0xF9901000  LDRSB	R1, [R0, #0]
0x285A	0x9001    STR	R0, [SP, #4]
0x285C	0x2001    MOVS	R0, #1
0x285E	0xB240    SXTB	R0, R0
0x2860	0xF7FDFFBC  BL	_write_ZIGBEE_short+0
0x2864	0x9801    LDR	R0, [SP, #4]
;Misc_Routines.c, 358 :: 		write_ZIGBEE_short(PANIDH, address[1]);
0x2866	0x1C41    ADDS	R1, R0, #1
; address end address is: 0 (R0)
0x2868	0xF9911000  LDRSB	R1, [R1, #0]
0x286C	0x2002    MOVS	R0, #2
0x286E	0xB240    SXTB	R0, R0
0x2870	0xF7FDFFB4  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 359 :: 		}
L_end_set_PAN_ID:
0x2874	0xF8DDE000  LDR	LR, [SP, #0]
0x2878	0xB002    ADD	SP, SP, #8
0x287A	0x4770    BX	LR
; end of _set_PAN_ID
_init_ZIGBEE_nonbeacon:
;Misc_Routines.c, 418 :: 		void init_ZIGBEE_nonbeacon() {
0x281C	0xB081    SUB	SP, SP, #4
0x281E	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 419 :: 		init_ZIGBEE_basic();
0x2822	0xF7FEF81B  BL	_init_ZIGBEE_basic+0
;Misc_Routines.c, 420 :: 		set_CCA_mode(1);     // Set CCA mode to ED and set threshold
0x2826	0x2001    MOVS	R0, #1
0x2828	0xB240    SXTB	R0, R0
0x282A	0xF7FEFEF3  BL	_set_CCA_mode+0
;Misc_Routines.c, 421 :: 		set_RSSI_mode(2);    // RSSI2 mode
0x282E	0x2002    MOVS	R0, #2
0x2830	0xB240    SXTB	R0, R0
0x2832	0xF7FEFFA3  BL	_set_RSSI_mode+0
;Misc_Routines.c, 422 :: 		enable_interrupt();  // Enables all interrupts
0x2836	0xF7FEFC87  BL	_enable_interrupt+0
;Misc_Routines.c, 423 :: 		set_channel(11);     // Channel 11
0x283A	0x200B    MOVS	R0, #11
0x283C	0xB240    SXTB	R0, R0
0x283E	0xF7FEFE37  BL	_set_channel+0
;Misc_Routines.c, 424 :: 		RF_reset();
0x2842	0xF000F86D  BL	_RF_reset+0
;Misc_Routines.c, 425 :: 		}
L_end_init_ZIGBEE_nonbeacon:
0x2846	0xF8DDE000  LDR	LR, [SP, #0]
0x284A	0xB001    ADD	SP, SP, #4
0x284C	0x4770    BX	LR
; end of _init_ZIGBEE_nonbeacon
_init_ZIGBEE_basic:
;Misc_Routines.c, 407 :: 		void init_ZIGBEE_basic() {
0x085C	0xB081    SUB	SP, SP, #4
0x085E	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 408 :: 		write_ZIGBEE_short(PACON2, 0x98);   // Initialize FIFOEN = 1 and TXONTS = 0x6
0x0862	0x2198    MOVS	R1, #152
0x0864	0xB249    SXTB	R1, R1
0x0866	0x2018    MOVS	R0, #24
0x0868	0xB240    SXTB	R0, R0
0x086A	0xF7FFFFB7  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 409 :: 		write_ZIGBEE_short(TXSTBL, 0x95);   // Initialize RFSTBL = 0x9
0x086E	0x2195    MOVS	R1, #149
0x0870	0xB249    SXTB	R1, R1
0x0872	0x202E    MOVS	R0, #46
0x0874	0xB240    SXTB	R0, R0
0x0876	0xF7FFFFB1  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 410 :: 		write_ZIGBEE_long(RFCON1, 0x01);    // Initialize VCOOPT = 0x01
0x087A	0x2101    MOVS	R1, #1
0x087C	0xB249    SXTB	R1, R1
0x087E	0xF2402001  MOVW	R0, #513
0x0882	0xB200    SXTH	R0, R0
0x0884	0xF7FFFDD4  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 411 :: 		enable_PLL();                       // Enable PLL (PLLEN = 1)
0x0888	0xF7FFFDFE  BL	_enable_PLL+0
;Misc_Routines.c, 412 :: 		write_ZIGBEE_long(RFCON6, 0x90);    // Initialize TXFIL = 1 and 20MRECVR = 1
0x088C	0x2190    MOVS	R1, #144
0x088E	0xB249    SXTB	R1, R1
0x0890	0xF2402006  MOVW	R0, #518
0x0894	0xB200    SXTH	R0, R0
0x0896	0xF7FFFDCB  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 413 :: 		write_ZIGBEE_long(RFCON7, 0x80);    // Initialize SLPCLKSEL = 0x2 (100 kHz Internal oscillator)
0x089A	0x2180    MOVS	R1, #128
0x089C	0xB249    SXTB	R1, R1
0x089E	0xF2402007  MOVW	R0, #519
0x08A2	0xB200    SXTH	R0, R0
0x08A4	0xF7FFFDC4  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 414 :: 		write_ZIGBEE_long(RFCON8, 0x10);    // Initialize RFVCO = 1
0x08A8	0x2110    MOVS	R1, #16
0x08AA	0xB249    SXTB	R1, R1
0x08AC	0xF2402008  MOVW	R0, #520
0x08B0	0xB200    SXTH	R0, R0
0x08B2	0xF7FFFDBD  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 415 :: 		write_ZIGBEE_long(SLPCON1, 0x21);   // Initialize CLKOUTEN = 1 and SLPCLKDIV = 0x01
0x08B6	0x2121    MOVS	R1, #33
0x08B8	0xB249    SXTB	R1, R1
0x08BA	0xF2402020  MOVW	R0, #544
0x08BE	0xB200    SXTH	R0, R0
0x08C0	0xF7FFFDB6  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 416 :: 		}
L_end_init_ZIGBEE_basic:
0x08C4	0xF8DDE000  LDR	LR, [SP, #0]
0x08C8	0xB001    ADD	SP, SP, #4
0x08CA	0x4770    BX	LR
; end of _init_ZIGBEE_basic
_write_ZIGBEE_long:
;ReadWrite_Routines.c, 52 :: 		void write_ZIGBEE_long(int address, short int data_r) {
; data_r start address is: 4 (R1)
; address start address is: 0 (R0)
0x0430	0xB081    SUB	SP, SP, #4
0x0432	0xF8CDE000  STR	LR, [SP, #0]
0x0436	0xB24C    SXTB	R4, R1
; data_r end address is: 4 (R1)
; address end address is: 0 (R0)
; address start address is: 0 (R0)
; data_r start address is: 16 (R4)
;ReadWrite_Routines.c, 53 :: 		short int address_high = 0, address_low = 0;
;ReadWrite_Routines.c, 55 :: 		CS = 0;
0x0438	0x2300    MOVS	R3, #0
0x043A	0x4A12    LDR	R2, [PC, #72]
0x043C	0x6013    STR	R3, [R2, #0]
;ReadWrite_Routines.c, 57 :: 		address_high = (((short int)(address >> 3)) & 0b01111111) | 0x80;  // calculating addressing mode
0x043E	0x10C2    ASRS	R2, R0, #3
0x0440	0xB252    SXTB	R2, R2
0x0442	0xF002027F  AND	R2, R2, #127
0x0446	0xB252    SXTB	R2, R2
0x0448	0xF0420380  ORR	R3, R2, #128
;ReadWrite_Routines.c, 58 :: 		address_low  = (((short int)(address << 5)) & 0b11100000) | 0x10;  // calculating addressing mode
0x044C	0x0142    LSLS	R2, R0, #5
; address end address is: 0 (R0)
0x044E	0xB252    SXTB	R2, R2
0x0450	0xF00202E0  AND	R2, R2, #224
0x0454	0xB212    SXTH	R2, R2
0x0456	0xF0420210  ORR	R2, R2, #16
; address_low start address is: 20 (R5)
0x045A	0xB255    SXTB	R5, R2
;ReadWrite_Routines.c, 59 :: 		SPI3_Write(address_high);           // addressing register
0x045C	0xB258    SXTB	R0, R3
0x045E	0xB280    UXTH	R0, R0
0x0460	0xF001FE88  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 60 :: 		SPI3_Write(address_low);            // addressing register
0x0464	0xB268    SXTB	R0, R5
0x0466	0xB280    UXTH	R0, R0
; address_low end address is: 20 (R5)
0x0468	0xF001FE84  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 61 :: 		SPI3_Write(data_r);                 // write data in registerr
0x046C	0xB260    SXTB	R0, R4
0x046E	0xB280    UXTH	R0, R0
; data_r end address is: 16 (R4)
0x0470	0xF001FE80  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 63 :: 		CS = 1;
0x0474	0x2301    MOVS	R3, #1
0x0476	0xB25B    SXTB	R3, R3
0x0478	0x4A02    LDR	R2, [PC, #8]
0x047A	0x6013    STR	R3, [R2, #0]
;ReadWrite_Routines.c, 64 :: 		}
L_end_write_ZIGBEE_long:
0x047C	0xF8DDE000  LDR	LR, [SP, #0]
0x0480	0xB001    ADD	SP, SP, #4
0x0482	0x4770    BX	LR
0x0484	0x81B44222  	CS+0
; end of _write_ZIGBEE_long
_enable_PLL:
;Misc_Routines.c, 385 :: 		void enable_PLL() {
0x0488	0xB081    SUB	SP, SP, #4
0x048A	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 386 :: 		write_ZIGBEE_long(RFCON2, 0x80);       // mask for PLL enable
0x048E	0x2180    MOVS	R1, #128
0x0490	0xB249    SXTB	R1, R1
0x0492	0xF2402002  MOVW	R0, #514
0x0496	0xB200    SXTH	R0, R0
0x0498	0xF7FFFFCA  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 387 :: 		}
L_end_enable_PLL:
0x049C	0xF8DDE000  LDR	LR, [SP, #0]
0x04A0	0xB001    ADD	SP, SP, #4
0x04A2	0x4770    BX	LR
; end of _enable_PLL
_set_CCA_mode:
;Misc_Routines.c, 76 :: 		void set_CCA_mode(short int CCA_mode) {
; CCA_mode start address is: 0 (R0)
0x1614	0xB081    SUB	SP, SP, #4
0x1616	0xF8CDE000  STR	LR, [SP, #0]
; CCA_mode end address is: 0 (R0)
; CCA_mode start address is: 0 (R0)
;Misc_Routines.c, 77 :: 		short int temp = 0;
;Misc_Routines.c, 78 :: 		switch(CCA_mode) {
0x161A	0xE050    B	L_set_CCA_mode21
; CCA_mode end address is: 0 (R0)
;Misc_Routines.c, 79 :: 		case 1: {                               // ENERGY ABOVE THRESHOLD
L_set_CCA_mode23:
;Misc_Routines.c, 80 :: 		temp = read_ZIGBEE_short(BBREG2);
0x161C	0x203A    MOVS	R0, #58
0x161E	0xB240    SXTB	R0, R0
0x1620	0xF7FFF8FC  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 81 :: 		temp = temp | 0x80;                   // 0x80 mask
0x1624	0xF0400180  ORR	R1, R0, #128
;Misc_Routines.c, 82 :: 		temp = temp & 0xDF;                   // 0xDF mask
0x1628	0xB249    SXTB	R1, R1
0x162A	0xF00101DF  AND	R1, R1, #223
;Misc_Routines.c, 83 :: 		write_ZIGBEE_short(BBREG2, temp);
0x162E	0xB249    SXTB	R1, R1
0x1630	0x203A    MOVS	R0, #58
0x1632	0xB240    SXTB	R0, R0
0x1634	0xF7FFF8D2  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 84 :: 		write_ZIGBEE_short(CCAEDTH, 0x60);    // Set CCA ED threshold to -69 dBm
0x1638	0x2160    MOVS	R1, #96
0x163A	0xB249    SXTB	R1, R1
0x163C	0x203F    MOVS	R0, #63
0x163E	0xB240    SXTB	R0, R0
0x1640	0xF7FFF8CC  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 86 :: 		break;
0x1644	0xE041    B	L_set_CCA_mode22
;Misc_Routines.c, 88 :: 		case 2: {                               // CARRIER SENSE ONLY
L_set_CCA_mode24:
;Misc_Routines.c, 89 :: 		temp = read_ZIGBEE_short(BBREG2);
0x1646	0x203A    MOVS	R0, #58
0x1648	0xB240    SXTB	R0, R0
0x164A	0xF7FFF8E7  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 90 :: 		temp = temp | 0x40;                   // 0x40 mask
0x164E	0xF0400140  ORR	R1, R0, #64
0x1652	0xB249    SXTB	R1, R1
;Misc_Routines.c, 91 :: 		temp = temp & 0x7F;                   // 0x7F mask
0x1654	0xF001017F  AND	R1, R1, #127
;Misc_Routines.c, 92 :: 		write_ZIGBEE_short(BBREG2, temp);
0x1658	0x203A    MOVS	R0, #58
0x165A	0xB240    SXTB	R0, R0
0x165C	0xF7FFF8BE  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 94 :: 		temp = read_ZIGBEE_short(BBREG2);     // carrier sense threshold
0x1660	0x203A    MOVS	R0, #58
0x1662	0xB240    SXTB	R0, R0
0x1664	0xF7FFF8DA  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 95 :: 		temp = temp | 0x38;
0x1668	0xF0400138  ORR	R1, R0, #56
0x166C	0xB249    SXTB	R1, R1
;Misc_Routines.c, 96 :: 		temp = temp & 0xFB;
0x166E	0xF00101FB  AND	R1, R1, #251
;Misc_Routines.c, 97 :: 		write_ZIGBEE_short(BBREG2, temp);
0x1672	0xB249    SXTB	R1, R1
0x1674	0x203A    MOVS	R0, #58
0x1676	0xB240    SXTB	R0, R0
0x1678	0xF7FFF8B0  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 99 :: 		break;
0x167C	0xE025    B	L_set_CCA_mode22
;Misc_Routines.c, 101 :: 		case 3: {                               // CARRIER SENSE AND ENERGY ABOVE THRESHOLD
L_set_CCA_mode25:
;Misc_Routines.c, 102 :: 		temp = read_ZIGBEE_short(BBREG2);
0x167E	0x203A    MOVS	R0, #58
0x1680	0xB240    SXTB	R0, R0
0x1682	0xF7FFF8CB  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 103 :: 		temp = temp | 0xC0;                   // 0xC0 mask
0x1686	0xF04001C0  ORR	R1, R0, #192
;Misc_Routines.c, 104 :: 		write_ZIGBEE_short(BBREG2, temp);
0x168A	0xB249    SXTB	R1, R1
0x168C	0x203A    MOVS	R0, #58
0x168E	0xB240    SXTB	R0, R0
0x1690	0xF7FFF8A4  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 106 :: 		temp = read_ZIGBEE_short(BBREG2);     // carrier sense threshold
0x1694	0x203A    MOVS	R0, #58
0x1696	0xB240    SXTB	R0, R0
0x1698	0xF7FFF8C0  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 107 :: 		temp = temp | 0x38;                   // 0x38 mask
0x169C	0xF0400138  ORR	R1, R0, #56
0x16A0	0xB249    SXTB	R1, R1
;Misc_Routines.c, 108 :: 		temp = temp & 0xFB;                   // 0xFB mask
0x16A2	0xF00101FB  AND	R1, R1, #251
;Misc_Routines.c, 109 :: 		write_ZIGBEE_short(BBREG2, temp);
0x16A6	0xB249    SXTB	R1, R1
0x16A8	0x203A    MOVS	R0, #58
0x16AA	0xB240    SXTB	R0, R0
0x16AC	0xF7FFF896  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 111 :: 		write_ZIGBEE_short(CCAEDTH, 0x60);    // Set CCA ED threshold to -69 dBm
0x16B0	0x2160    MOVS	R1, #96
0x16B2	0xB249    SXTB	R1, R1
0x16B4	0x203F    MOVS	R0, #63
0x16B6	0xB240    SXTB	R0, R0
0x16B8	0xF7FFF890  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 113 :: 		break;
0x16BC	0xE005    B	L_set_CCA_mode22
;Misc_Routines.c, 114 :: 		}
L_set_CCA_mode21:
; CCA_mode start address is: 0 (R0)
0x16BE	0x2801    CMP	R0, #1
0x16C0	0xD0AC    BEQ	L_set_CCA_mode23
0x16C2	0x2802    CMP	R0, #2
0x16C4	0xD0BF    BEQ	L_set_CCA_mode24
0x16C6	0x2803    CMP	R0, #3
0x16C8	0xD0D9    BEQ	L_set_CCA_mode25
; CCA_mode end address is: 0 (R0)
L_set_CCA_mode22:
;Misc_Routines.c, 115 :: 		}
L_end_set_CCA_mode:
0x16CA	0xF8DDE000  LDR	LR, [SP, #0]
0x16CE	0xB001    ADD	SP, SP, #4
0x16D0	0x4770    BX	LR
; end of _set_CCA_mode
_set_RSSI_mode:
;Misc_Routines.c, 120 :: 		void set_RSSI_mode(short int RSSI_mode) {       // 1 for RSSI1, 2 for RSSI2 mode
; RSSI_mode start address is: 0 (R0)
0x177C	0xB081    SUB	SP, SP, #4
0x177E	0xF8CDE000  STR	LR, [SP, #0]
; RSSI_mode end address is: 0 (R0)
; RSSI_mode start address is: 0 (R0)
;Misc_Routines.c, 121 :: 		short int temp = 0;
;Misc_Routines.c, 123 :: 		switch(RSSI_mode) {
0x1782	0xE012    B	L_set_RSSI_mode26
; RSSI_mode end address is: 0 (R0)
;Misc_Routines.c, 124 :: 		case 1: {
L_set_RSSI_mode28:
;Misc_Routines.c, 125 :: 		temp = read_ZIGBEE_short(BBREG6);
0x1784	0x203E    MOVS	R0, #62
0x1786	0xB240    SXTB	R0, R0
0x1788	0xF7FFF848  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 126 :: 		temp = temp | 0x80;                       // 0x80 mask for RSSI1 mode
0x178C	0xF0400180  ORR	R1, R0, #128
;Misc_Routines.c, 127 :: 		write_ZIGBEE_short(BBREG6, temp);
0x1790	0xB249    SXTB	R1, R1
0x1792	0x203E    MOVS	R0, #62
0x1794	0xB240    SXTB	R0, R0
0x1796	0xF7FFF821  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 129 :: 		break;
0x179A	0xE00A    B	L_set_RSSI_mode27
;Misc_Routines.c, 131 :: 		case 2:
L_set_RSSI_mode29:
;Misc_Routines.c, 132 :: 		write_ZIGBEE_short(BBREG6, 0x40);         // 0x40 data for RSSI2 mode
0x179C	0x2140    MOVS	R1, #64
0x179E	0xB249    SXTB	R1, R1
0x17A0	0x203E    MOVS	R0, #62
0x17A2	0xB240    SXTB	R0, R0
0x17A4	0xF7FFF81A  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 133 :: 		break;
0x17A8	0xE003    B	L_set_RSSI_mode27
;Misc_Routines.c, 134 :: 		}
L_set_RSSI_mode26:
; RSSI_mode start address is: 0 (R0)
0x17AA	0x2801    CMP	R0, #1
0x17AC	0xD0EA    BEQ	L_set_RSSI_mode28
0x17AE	0x2802    CMP	R0, #2
0x17B0	0xD0F4    BEQ	L_set_RSSI_mode29
; RSSI_mode end address is: 0 (R0)
L_set_RSSI_mode27:
;Misc_Routines.c, 135 :: 		}
L_end_set_RSSI_mode:
0x17B2	0xF8DDE000  LDR	LR, [SP, #0]
0x17B6	0xB001    ADD	SP, SP, #4
0x17B8	0x4770    BX	LR
; end of _set_RSSI_mode
_enable_interrupt:
;Misc_Routines.c, 11 :: 		void enable_interrupt() {
0x1148	0xB081    SUB	SP, SP, #4
0x114A	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 12 :: 		write_ZIGBEE_short(INTCON_M, 0x00);   //0x00  all INTerrupts are enable
0x114E	0x2100    MOVS	R1, #0
0x1150	0xB249    SXTB	R1, R1
0x1152	0x2032    MOVS	R0, #50
0x1154	0xB240    SXTB	R0, R0
0x1156	0xF7FFFB41  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 13 :: 		}
L_end_enable_interrupt:
0x115A	0xF8DDE000  LDR	LR, [SP, #0]
0x115E	0xB001    ADD	SP, SP, #4
0x1160	0x4770    BX	LR
; end of _enable_interrupt
_set_channel:
;Misc_Routines.c, 18 :: 		void set_channel(short int channel_number) {               // 11-26 possible channels
; channel_number start address is: 0 (R0)
0x14B0	0xB081    SUB	SP, SP, #4
0x14B2	0xF8CDE000  STR	LR, [SP, #0]
; channel_number end address is: 0 (R0)
; channel_number start address is: 0 (R0)
;Misc_Routines.c, 19 :: 		if((channel_number > 26) || (channel_number < 11)) channel_number = 11;
0x14B6	0x281A    CMP	R0, #26
0x14B8	0xDC02    BGT	L__set_channel57
0x14BA	0x280B    CMP	R0, #11
0x14BC	0xDB00    BLT	L__set_channel56
; channel_number end address is: 0 (R0)
0x14BE	0xE001    B	L_set_channel2
L__set_channel57:
L__set_channel56:
; channel_number start address is: 0 (R0)
0x14C0	0x200B    MOVS	R0, #11
0x14C2	0xB240    SXTB	R0, R0
; channel_number end address is: 0 (R0)
L_set_channel2:
;Misc_Routines.c, 20 :: 		switch(channel_number) {
; channel_number start address is: 0 (R0)
0x14C4	0xE07F    B	L_set_channel3
; channel_number end address is: 0 (R0)
;Misc_Routines.c, 21 :: 		case 11:
L_set_channel5:
;Misc_Routines.c, 22 :: 		write_ZIGBEE_long(RFCON0, 0x02);  // 0x02 for 11. channel
0x14C6	0x2102    MOVS	R1, #2
0x14C8	0xB249    SXTB	R1, R1
0x14CA	0xF2402000  MOVW	R0, #512
0x14CE	0xB200    SXTH	R0, R0
0x14D0	0xF7FEFFAE  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 23 :: 		break;
0x14D4	0xE098    B	L_set_channel4
;Misc_Routines.c, 24 :: 		case 12:
L_set_channel6:
;Misc_Routines.c, 25 :: 		write_ZIGBEE_long(RFCON0, 0x12);  // 0x12 for 12. channel
0x14D6	0x2112    MOVS	R1, #18
0x14D8	0xB249    SXTB	R1, R1
0x14DA	0xF2402000  MOVW	R0, #512
0x14DE	0xB200    SXTH	R0, R0
0x14E0	0xF7FEFFA6  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 26 :: 		break;
0x14E4	0xE090    B	L_set_channel4
;Misc_Routines.c, 27 :: 		case 13:
L_set_channel7:
;Misc_Routines.c, 28 :: 		write_ZIGBEE_long(RFCON0, 0x22);  // 0x22 for 13. channel
0x14E6	0x2122    MOVS	R1, #34
0x14E8	0xB249    SXTB	R1, R1
0x14EA	0xF2402000  MOVW	R0, #512
0x14EE	0xB200    SXTH	R0, R0
0x14F0	0xF7FEFF9E  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 29 :: 		break;
0x14F4	0xE088    B	L_set_channel4
;Misc_Routines.c, 30 :: 		case 14:
L_set_channel8:
;Misc_Routines.c, 31 :: 		write_ZIGBEE_long(RFCON0, 0x32);  // 0x32 for 14. channel
0x14F6	0x2132    MOVS	R1, #50
0x14F8	0xB249    SXTB	R1, R1
0x14FA	0xF2402000  MOVW	R0, #512
0x14FE	0xB200    SXTH	R0, R0
0x1500	0xF7FEFF96  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 32 :: 		break;
0x1504	0xE080    B	L_set_channel4
;Misc_Routines.c, 33 :: 		case 15:
L_set_channel9:
;Misc_Routines.c, 34 :: 		write_ZIGBEE_long(RFCON0, 0x42);  // 0x42 for 15. channel
0x1506	0x2142    MOVS	R1, #66
0x1508	0xB249    SXTB	R1, R1
0x150A	0xF2402000  MOVW	R0, #512
0x150E	0xB200    SXTH	R0, R0
0x1510	0xF7FEFF8E  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 35 :: 		break;
0x1514	0xE078    B	L_set_channel4
;Misc_Routines.c, 36 :: 		case 16:
L_set_channel10:
;Misc_Routines.c, 37 :: 		write_ZIGBEE_long(RFCON0, 0x52);  // 0x52 for 16. channel
0x1516	0x2152    MOVS	R1, #82
0x1518	0xB249    SXTB	R1, R1
0x151A	0xF2402000  MOVW	R0, #512
0x151E	0xB200    SXTH	R0, R0
0x1520	0xF7FEFF86  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 38 :: 		break;
0x1524	0xE070    B	L_set_channel4
;Misc_Routines.c, 39 :: 		case 17:
L_set_channel11:
;Misc_Routines.c, 40 :: 		write_ZIGBEE_long(RFCON0, 0x62);  // 0x62 for 17. channel
0x1526	0x2162    MOVS	R1, #98
0x1528	0xB249    SXTB	R1, R1
0x152A	0xF2402000  MOVW	R0, #512
0x152E	0xB200    SXTH	R0, R0
0x1530	0xF7FEFF7E  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 41 :: 		break;
0x1534	0xE068    B	L_set_channel4
;Misc_Routines.c, 42 :: 		case 18:
L_set_channel12:
;Misc_Routines.c, 43 :: 		write_ZIGBEE_long(RFCON0, 0x72);  // 0x72 for 18. channel
0x1536	0x2172    MOVS	R1, #114
0x1538	0xB249    SXTB	R1, R1
0x153A	0xF2402000  MOVW	R0, #512
0x153E	0xB200    SXTH	R0, R0
0x1540	0xF7FEFF76  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 44 :: 		break;
0x1544	0xE060    B	L_set_channel4
;Misc_Routines.c, 45 :: 		case 19:
L_set_channel13:
;Misc_Routines.c, 46 :: 		write_ZIGBEE_long(RFCON0, 0x82);  // 0x82 for 19. channel
0x1546	0x2182    MOVS	R1, #130
0x1548	0xB249    SXTB	R1, R1
0x154A	0xF2402000  MOVW	R0, #512
0x154E	0xB200    SXTH	R0, R0
0x1550	0xF7FEFF6E  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 47 :: 		break;
0x1554	0xE058    B	L_set_channel4
;Misc_Routines.c, 48 :: 		case 20:
L_set_channel14:
;Misc_Routines.c, 49 :: 		write_ZIGBEE_long(RFCON0, 0x92);  // 0x92 for 20. channel
0x1556	0x2192    MOVS	R1, #146
0x1558	0xB249    SXTB	R1, R1
0x155A	0xF2402000  MOVW	R0, #512
0x155E	0xB200    SXTH	R0, R0
0x1560	0xF7FEFF66  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 50 :: 		break;
0x1564	0xE050    B	L_set_channel4
;Misc_Routines.c, 51 :: 		case 21:
L_set_channel15:
;Misc_Routines.c, 52 :: 		write_ZIGBEE_long(RFCON0, 0xA2);  // 0xA2 for 21. channel
0x1566	0x21A2    MOVS	R1, #162
0x1568	0xB249    SXTB	R1, R1
0x156A	0xF2402000  MOVW	R0, #512
0x156E	0xB200    SXTH	R0, R0
0x1570	0xF7FEFF5E  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 53 :: 		break;
0x1574	0xE048    B	L_set_channel4
;Misc_Routines.c, 54 :: 		case 22:
L_set_channel16:
;Misc_Routines.c, 55 :: 		write_ZIGBEE_long(RFCON0, 0xB2);  // 0xB2 for 22. channel
0x1576	0x21B2    MOVS	R1, #178
0x1578	0xB249    SXTB	R1, R1
0x157A	0xF2402000  MOVW	R0, #512
0x157E	0xB200    SXTH	R0, R0
0x1580	0xF7FEFF56  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 56 :: 		break;
0x1584	0xE040    B	L_set_channel4
;Misc_Routines.c, 57 :: 		case 23:
L_set_channel17:
;Misc_Routines.c, 58 :: 		write_ZIGBEE_long(RFCON0, 0xC2);  // 0xC2 for 23. channel
0x1586	0x21C2    MOVS	R1, #194
0x1588	0xB249    SXTB	R1, R1
0x158A	0xF2402000  MOVW	R0, #512
0x158E	0xB200    SXTH	R0, R0
0x1590	0xF7FEFF4E  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 59 :: 		break;
0x1594	0xE038    B	L_set_channel4
;Misc_Routines.c, 60 :: 		case 24:
L_set_channel18:
;Misc_Routines.c, 61 :: 		write_ZIGBEE_long(RFCON0, 0xD2);  // 0xD2 for 24. channel
0x1596	0x21D2    MOVS	R1, #210
0x1598	0xB249    SXTB	R1, R1
0x159A	0xF2402000  MOVW	R0, #512
0x159E	0xB200    SXTH	R0, R0
0x15A0	0xF7FEFF46  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 62 :: 		break;
0x15A4	0xE030    B	L_set_channel4
;Misc_Routines.c, 63 :: 		case 25:
L_set_channel19:
;Misc_Routines.c, 64 :: 		write_ZIGBEE_long(RFCON0, 0xE2);  // 0xE2 for 25. channel
0x15A6	0x21E2    MOVS	R1, #226
0x15A8	0xB249    SXTB	R1, R1
0x15AA	0xF2402000  MOVW	R0, #512
0x15AE	0xB200    SXTH	R0, R0
0x15B0	0xF7FEFF3E  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 65 :: 		break;
0x15B4	0xE028    B	L_set_channel4
;Misc_Routines.c, 66 :: 		case 26:
L_set_channel20:
;Misc_Routines.c, 67 :: 		write_ZIGBEE_long(RFCON0, 0xF2);  // 0xF2 for 26. channel
0x15B6	0x21F2    MOVS	R1, #242
0x15B8	0xB249    SXTB	R1, R1
0x15BA	0xF2402000  MOVW	R0, #512
0x15BE	0xB200    SXTH	R0, R0
0x15C0	0xF7FEFF36  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 68 :: 		break;
0x15C4	0xE020    B	L_set_channel4
;Misc_Routines.c, 69 :: 		}
L_set_channel3:
; channel_number start address is: 0 (R0)
0x15C6	0x280B    CMP	R0, #11
0x15C8	0xF43FAF7D  BEQ	L_set_channel5
0x15CC	0x280C    CMP	R0, #12
0x15CE	0xD082    BEQ	L_set_channel6
0x15D0	0x280D    CMP	R0, #13
0x15D2	0xD088    BEQ	L_set_channel7
0x15D4	0x280E    CMP	R0, #14
0x15D6	0xD08E    BEQ	L_set_channel8
0x15D8	0x280F    CMP	R0, #15
0x15DA	0xD094    BEQ	L_set_channel9
0x15DC	0x2810    CMP	R0, #16
0x15DE	0xD09A    BEQ	L_set_channel10
0x15E0	0x2811    CMP	R0, #17
0x15E2	0xD0A0    BEQ	L_set_channel11
0x15E4	0x2812    CMP	R0, #18
0x15E6	0xD0A6    BEQ	L_set_channel12
0x15E8	0x2813    CMP	R0, #19
0x15EA	0xD0AC    BEQ	L_set_channel13
0x15EC	0x2814    CMP	R0, #20
0x15EE	0xD0B2    BEQ	L_set_channel14
0x15F0	0x2815    CMP	R0, #21
0x15F2	0xD0B8    BEQ	L_set_channel15
0x15F4	0x2816    CMP	R0, #22
0x15F6	0xD0BE    BEQ	L_set_channel16
0x15F8	0x2817    CMP	R0, #23
0x15FA	0xD0C4    BEQ	L_set_channel17
0x15FC	0x2818    CMP	R0, #24
0x15FE	0xD0CA    BEQ	L_set_channel18
0x1600	0x2819    CMP	R0, #25
0x1602	0xD0D0    BEQ	L_set_channel19
0x1604	0x281A    CMP	R0, #26
0x1606	0xD0D6    BEQ	L_set_channel20
; channel_number end address is: 0 (R0)
L_set_channel4:
;Misc_Routines.c, 70 :: 		RF_reset();
0x1608	0xF001F98A  BL	_RF_reset+0
;Misc_Routines.c, 71 :: 		}
L_end_set_channel:
0x160C	0xF8DDE000  LDR	LR, [SP, #0]
0x1610	0xB001    ADD	SP, SP, #4
0x1612	0x4770    BX	LR
; end of _set_channel
_nonbeacon_PAN_coordinator_device:
;Misc_Routines.c, 140 :: 		void nonbeacon_PAN_coordinator_device() {
0x2C1C	0xB081    SUB	SP, SP, #4
0x2C1E	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 141 :: 		short int temp = 0;
;Misc_Routines.c, 143 :: 		temp = read_ZIGBEE_short(RXMCR);
0x2C22	0x2000    MOVS	R0, #0
0x2C24	0xB240    SXTB	R0, R0
0x2C26	0xF7FDFDF9  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 144 :: 		temp = temp | 0x08;                 // 0x08 mask for PAN coordinator
0x2C2A	0xF0400008  ORR	R0, R0, #8
;Misc_Routines.c, 145 :: 		write_ZIGBEE_short(RXMCR, temp);
0x2C2E	0xB241    SXTB	R1, R0
0x2C30	0x2000    MOVS	R0, #0
0x2C32	0xB240    SXTB	R0, R0
0x2C34	0xF7FDFDD2  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 147 :: 		temp = read_ZIGBEE_short(TXMCR);
0x2C38	0x2011    MOVS	R0, #17
0x2C3A	0xB240    SXTB	R0, R0
0x2C3C	0xF7FDFDEE  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 148 :: 		temp = temp & 0xDF;                 // 0xDF mask for CSMA-CA mode
0x2C40	0xF00000DF  AND	R0, R0, #223
;Misc_Routines.c, 149 :: 		write_ZIGBEE_short(TXMCR, temp);
0x2C44	0xB241    SXTB	R1, R0
0x2C46	0x2011    MOVS	R0, #17
0x2C48	0xB240    SXTB	R0, R0
0x2C4A	0xF7FDFDC7  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 151 :: 		write_ZIGBEE_short(ORDER, 0xFF);    // BO, SO are 15
0x2C4E	0x21FF    MOVS	R1, #255
0x2C50	0xB249    SXTB	R1, R1
0x2C52	0x2010    MOVS	R0, #16
0x2C54	0xB240    SXTB	R0, R0
0x2C56	0xF7FDFDC1  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 152 :: 		}
L_end_nonbeacon_PAN_coordinator_device:
0x2C5A	0xF8DDE000  LDR	LR, [SP, #0]
0x2C5E	0xB001    ADD	SP, SP, #4
0x2C60	0x4770    BX	LR
; end of _nonbeacon_PAN_coordinator_device
_set_TX_power:
;Misc_Routines.c, 396 :: 		void set_TX_power(unsigned short int power) {             // 0-31 possible variants
; power start address is: 0 (R0)
0x2BE0	0xB081    SUB	SP, SP, #4
0x2BE2	0xF8CDE000  STR	LR, [SP, #0]
; power end address is: 0 (R0)
; power start address is: 0 (R0)
;Misc_Routines.c, 397 :: 		if((power < 0) || (power > 31))
0x2BE6	0x2800    CMP	R0, #0
0x2BE8	0xD302    BCC	L__set_TX_power60
0x2BEA	0x281F    CMP	R0, #31
0x2BEC	0xD800    BHI	L__set_TX_power59
; power end address is: 0 (R0)
0x2BEE	0xE000    B	L_set_TX_power48
L__set_TX_power60:
L__set_TX_power59:
;Misc_Routines.c, 398 :: 		power = 31;
; power start address is: 0 (R0)
0x2BF0	0x201F    MOVS	R0, #31
; power end address is: 0 (R0)
L_set_TX_power48:
;Misc_Routines.c, 399 :: 		power = 31 - power;                                     // 0 max, 31 min -> 31 max, 0 min
; power start address is: 0 (R0)
0x2BF2	0xF1C0011F  RSB	R1, R0, #31
; power end address is: 0 (R0)
;Misc_Routines.c, 400 :: 		power = ((power & 0b00011111) << 3) & 0b11111000;       // calculating power
0x2BF6	0xB2C9    UXTB	R1, R1
0x2BF8	0xF001011F  AND	R1, R1, #31
0x2BFC	0xB2C9    UXTB	R1, R1
0x2BFE	0x00C9    LSLS	R1, R1, #3
0x2C00	0xB289    UXTH	R1, R1
0x2C02	0xF00101F8  AND	R1, R1, #248
;Misc_Routines.c, 401 :: 		write_ZIGBEE_long(RFCON3, power);
0x2C06	0xB249    SXTB	R1, R1
0x2C08	0xF2402003  MOVW	R0, #515
0x2C0C	0xB200    SXTH	R0, R0
0x2C0E	0xF7FDFC0F  BL	_write_ZIGBEE_long+0
;Misc_Routines.c, 402 :: 		}
L_end_set_TX_power:
0x2C12	0xF8DDE000  LDR	LR, [SP, #0]
0x2C16	0xB001    ADD	SP, SP, #4
0x2C18	0x4770    BX	LR
; end of _set_TX_power
_set_frame_format_filter:
;Misc_Routines.c, 292 :: 		void set_frame_format_filter(short int fff_mode) {   // 1 all frames, 2 command only, 3 data only, 4 beacon only
; fff_mode start address is: 0 (R0)
0x2B54	0xB081    SUB	SP, SP, #4
0x2B56	0xF8CDE000  STR	LR, [SP, #0]
; fff_mode end address is: 0 (R0)
; fff_mode start address is: 0 (R0)
;Misc_Routines.c, 293 :: 		short int temp = 0;
;Misc_Routines.c, 295 :: 		switch(fff_mode) {
0x2B5A	0xE034    B	L_set_frame_format_filter35
; fff_mode end address is: 0 (R0)
;Misc_Routines.c, 296 :: 		case 1: {
L_set_frame_format_filter37:
;Misc_Routines.c, 297 :: 		temp = read_ZIGBEE_short(RXFLUSH);      // all frames
0x2B5C	0x200D    MOVS	R0, #13
0x2B5E	0xB240    SXTB	R0, R0
0x2B60	0xF7FDFE5C  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 298 :: 		temp = temp & (!0x0E);                  // mask for all frames
0x2B64	0xF0000100  AND	R1, R0, #0
;Misc_Routines.c, 299 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x2B68	0x200D    MOVS	R0, #13
0x2B6A	0xB240    SXTB	R0, R0
0x2B6C	0xF7FDFE36  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 301 :: 		break;
0x2B70	0xE031    B	L_set_frame_format_filter36
;Misc_Routines.c, 303 :: 		case 2: {
L_set_frame_format_filter38:
;Misc_Routines.c, 304 :: 		temp = read_ZIGBEE_short(RXFLUSH);      // command only
0x2B72	0x200D    MOVS	R0, #13
0x2B74	0xB240    SXTB	R0, R0
0x2B76	0xF7FDFE51  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 305 :: 		temp = temp & (!0x06);                  // mask for command only
0x2B7A	0xF0000100  AND	R1, R0, #0
0x2B7E	0xB249    SXTB	R1, R1
;Misc_Routines.c, 306 :: 		temp = temp | 0x08;                     // mask for command only
0x2B80	0xF0410108  ORR	R1, R1, #8
;Misc_Routines.c, 307 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x2B84	0x200D    MOVS	R0, #13
0x2B86	0xB240    SXTB	R0, R0
0x2B88	0xF7FDFE28  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 309 :: 		break;
0x2B8C	0xE023    B	L_set_frame_format_filter36
;Misc_Routines.c, 311 :: 		case 3: {
L_set_frame_format_filter39:
;Misc_Routines.c, 312 :: 		temp = read_ZIGBEE_short(RXFLUSH);      // data only
0x2B8E	0x200D    MOVS	R0, #13
0x2B90	0xB240    SXTB	R0, R0
0x2B92	0xF7FDFE43  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 313 :: 		temp = temp & (!0x0A);                  // mask for data only
0x2B96	0xF0000100  AND	R1, R0, #0
0x2B9A	0xB249    SXTB	R1, R1
;Misc_Routines.c, 314 :: 		temp = temp | 0x04;                     // mask for data only
0x2B9C	0xF0410104  ORR	R1, R1, #4
;Misc_Routines.c, 315 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x2BA0	0x200D    MOVS	R0, #13
0x2BA2	0xB240    SXTB	R0, R0
0x2BA4	0xF7FDFE1A  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 317 :: 		break;
0x2BA8	0xE015    B	L_set_frame_format_filter36
;Misc_Routines.c, 319 :: 		case 4: {
L_set_frame_format_filter40:
;Misc_Routines.c, 320 :: 		temp = read_ZIGBEE_short(RXFLUSH);      // beacon only
0x2BAA	0x200D    MOVS	R0, #13
0x2BAC	0xB240    SXTB	R0, R0
0x2BAE	0xF7FDFE35  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 321 :: 		temp = temp & (!0x0C);                  // mask for beacon only
0x2BB2	0xF0000100  AND	R1, R0, #0
0x2BB6	0xB249    SXTB	R1, R1
;Misc_Routines.c, 322 :: 		temp = temp | 0x02;                     // mask for beacon only
0x2BB8	0xF0410102  ORR	R1, R1, #2
;Misc_Routines.c, 323 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x2BBC	0x200D    MOVS	R0, #13
0x2BBE	0xB240    SXTB	R0, R0
0x2BC0	0xF7FDFE0C  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 325 :: 		break;
0x2BC4	0xE007    B	L_set_frame_format_filter36
;Misc_Routines.c, 326 :: 		}
L_set_frame_format_filter35:
; fff_mode start address is: 0 (R0)
0x2BC6	0x2801    CMP	R0, #1
0x2BC8	0xD0C8    BEQ	L_set_frame_format_filter37
0x2BCA	0x2802    CMP	R0, #2
0x2BCC	0xD0D1    BEQ	L_set_frame_format_filter38
0x2BCE	0x2803    CMP	R0, #3
0x2BD0	0xD0DD    BEQ	L_set_frame_format_filter39
0x2BD2	0x2804    CMP	R0, #4
0x2BD4	0xD0E9    BEQ	L_set_frame_format_filter40
; fff_mode end address is: 0 (R0)
L_set_frame_format_filter36:
;Misc_Routines.c, 327 :: 		}
L_end_set_frame_format_filter:
0x2BD6	0xF8DDE000  LDR	LR, [SP, #0]
0x2BDA	0xB001    ADD	SP, SP, #4
0x2BDC	0x4770    BX	LR
; end of _set_frame_format_filter
_set_reception_mode:
;Misc_Routines.c, 260 :: 		void set_reception_mode(short int r_mode) { // 1 normal, 2 error, 3 promiscuous mode
; r_mode start address is: 0 (R0)
0x2A04	0xB081    SUB	SP, SP, #4
0x2A06	0xF8CDE000  STR	LR, [SP, #0]
; r_mode end address is: 0 (R0)
; r_mode start address is: 0 (R0)
;Misc_Routines.c, 261 :: 		short int temp = 0;
;Misc_Routines.c, 263 :: 		switch(r_mode) {
0x2A0A	0xE026    B	L_set_reception_mode30
; r_mode end address is: 0 (R0)
;Misc_Routines.c, 264 :: 		case 1: {
L_set_reception_mode32:
;Misc_Routines.c, 265 :: 		temp = read_ZIGBEE_short(RXMCR);      // normal mode
0x2A0C	0x2000    MOVS	R0, #0
0x2A0E	0xB240    SXTB	R0, R0
0x2A10	0xF7FDFF04  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 266 :: 		temp = temp & (!0x03);                // mask for normal mode
0x2A14	0xF0000100  AND	R1, R0, #0
;Misc_Routines.c, 267 :: 		write_ZIGBEE_short(RXMCR, temp);
0x2A18	0x2000    MOVS	R0, #0
0x2A1A	0xB240    SXTB	R0, R0
0x2A1C	0xF7FDFEDE  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 269 :: 		break;
0x2A20	0xE021    B	L_set_reception_mode31
;Misc_Routines.c, 271 :: 		case 2: {
L_set_reception_mode33:
;Misc_Routines.c, 272 :: 		temp = read_ZIGBEE_short(RXMCR);      // error mode
0x2A22	0x2000    MOVS	R0, #0
0x2A24	0xB240    SXTB	R0, R0
0x2A26	0xF7FDFEF9  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 273 :: 		temp = temp & (!0x01);                // mask for error mode
0x2A2A	0xF0000100  AND	R1, R0, #0
0x2A2E	0xB249    SXTB	R1, R1
;Misc_Routines.c, 274 :: 		temp = temp | 0x02;                   // mask for error mode
0x2A30	0xF0410102  ORR	R1, R1, #2
;Misc_Routines.c, 275 :: 		write_ZIGBEE_short(RXMCR, temp);
0x2A34	0x2000    MOVS	R0, #0
0x2A36	0xB240    SXTB	R0, R0
0x2A38	0xF7FDFED0  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 277 :: 		break;
0x2A3C	0xE013    B	L_set_reception_mode31
;Misc_Routines.c, 279 :: 		case 3: {
L_set_reception_mode34:
;Misc_Routines.c, 280 :: 		temp = read_ZIGBEE_short(RXMCR);      // promiscuous mode
0x2A3E	0x2000    MOVS	R0, #0
0x2A40	0xB240    SXTB	R0, R0
0x2A42	0xF7FDFEEB  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 281 :: 		temp = temp & (!0x02);                // mask for promiscuous mode
0x2A46	0xF0000100  AND	R1, R0, #0
0x2A4A	0xB249    SXTB	R1, R1
;Misc_Routines.c, 282 :: 		temp = temp | 0x01;                   // mask for promiscuous mode
0x2A4C	0xF0410101  ORR	R1, R1, #1
;Misc_Routines.c, 283 :: 		write_ZIGBEE_short(RXMCR, temp);
0x2A50	0x2000    MOVS	R0, #0
0x2A52	0xB240    SXTB	R0, R0
0x2A54	0xF7FDFEC2  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 285 :: 		break;
0x2A58	0xE005    B	L_set_reception_mode31
;Misc_Routines.c, 286 :: 		}
L_set_reception_mode30:
; r_mode start address is: 0 (R0)
0x2A5A	0x2801    CMP	R0, #1
0x2A5C	0xD0D6    BEQ	L_set_reception_mode32
0x2A5E	0x2802    CMP	R0, #2
0x2A60	0xD0DF    BEQ	L_set_reception_mode33
0x2A62	0x2803    CMP	R0, #3
0x2A64	0xD0EB    BEQ	L_set_reception_mode34
; r_mode end address is: 0 (R0)
L_set_reception_mode31:
;Misc_Routines.c, 287 :: 		}
L_end_set_reception_mode:
0x2A66	0xF8DDE000  LDR	LR, [SP, #0]
0x2A6A	0xB001    ADD	SP, SP, #4
0x2A6C	0x4770    BX	LR
; end of _set_reception_mode
_pin_wake:
;Misc_Routines.c, 377 :: 		void pin_wake() {
;Misc_Routines.c, 378 :: 		WAKE_ = 1;
0x2A70	0x2101    MOVS	R1, #1
0x2A72	0xB249    SXTB	R1, R1
0x2A74	0x4806    LDR	R0, [PC, #24]
0x2A76	0x6001    STR	R1, [R0, #0]
;Misc_Routines.c, 379 :: 		Delay_ms(5);
0x2A78	0xF64E275F  MOVW	R7, #59999
0x2A7C	0xF2C00700  MOVT	R7, #0
L_pin_wake44:
0x2A80	0x1E7F    SUBS	R7, R7, #1
0x2A82	0xD1FD    BNE	L_pin_wake44
0x2A84	0xBF00    NOP
0x2A86	0xBF00    NOP
0x2A88	0xBF00    NOP
0x2A8A	0xBF00    NOP
0x2A8C	0xBF00    NOP
;Misc_Routines.c, 380 :: 		}
L_end_pin_wake:
0x2A8E	0x4770    BX	LR
0x2A90	0x01904221  	WAKE_+0
; end of _pin_wake
_draw_frame:
;Reciver.c, 36 :: 		void draw_frame() {
0x2DDC	0xB081    SUB	SP, SP, #4
0x2DDE	0xF8CDE000  STR	LR, [SP, #0]
;Reciver.c, 37 :: 		TFT_Init_ILI9341_8bit(320, 240);
0x2DE2	0x21F0    MOVS	R1, #240
0x2DE4	0xF2401040  MOVW	R0, #320
0x2DE8	0xF7FFFE54  BL	_TFT_Init_ILI9341_8bit+0
;Reciver.c, 38 :: 		TFT_Fill_Screen(CL_WHITE);
0x2DEC	0xF64F70FF  MOVW	R0, #65535
0x2DF0	0xF7FFFDC0  BL	_TFT_Fill_Screen+0
;Reciver.c, 39 :: 		TFT_Write_Text("BOARD ID :", 140, 40);    // Display string on TFT
0x2DF4	0x480B    LDR	R0, [PC, #44]
0x2DF6	0x2228    MOVS	R2, #40
0x2DF8	0x218C    MOVS	R1, #140
0x2DFA	0xF7FFFC95  BL	_TFT_Write_Text+0
;Reciver.c, 40 :: 		TFT_Write_Text("Button 1 :", 140, 80);
0x2DFE	0x480A    LDR	R0, [PC, #40]
0x2E00	0x2250    MOVS	R2, #80
0x2E02	0x218C    MOVS	R1, #140
0x2E04	0xF7FFFC90  BL	_TFT_Write_Text+0
;Reciver.c, 41 :: 		TFT_Write_Text("Button 2 :", 140, 120);
0x2E08	0x4808    LDR	R0, [PC, #32]
0x2E0A	0x2278    MOVS	R2, #120
0x2E0C	0x218C    MOVS	R1, #140
0x2E0E	0xF7FFFC8B  BL	_TFT_Write_Text+0
;Reciver.c, 42 :: 		TFT_Write_Text("ANALOG 1 :", 140, 160);
0x2E12	0x4807    LDR	R0, [PC, #28]
0x2E14	0x22A0    MOVS	R2, #160
0x2E16	0x218C    MOVS	R1, #140
0x2E18	0xF7FFFC86  BL	_TFT_Write_Text+0
;Reciver.c, 43 :: 		}
L_end_draw_frame:
0x2E1C	0xF8DDE000  LDR	LR, [SP, #0]
0x2E20	0xB001    ADD	SP, SP, #4
0x2E22	0x4770    BX	LR
0x2E24	0x00062000  	?lstr1_Reciver+0
0x2E28	0x00112000  	?lstr2_Reciver+0
0x2E2C	0x001C2000  	?lstr3_Reciver+0
0x2E30	0x00272000  	?lstr4_Reciver+0
; end of _draw_frame
_TFT_Init_ILI9341_8bit:
;__Lib_TFT_Defs.c, 2046 :: 		void TFT_Init_ILI9341_8bit(unsigned int display_width, unsigned int display_height) {
; display_height start address is: 4 (R1)
; display_width start address is: 0 (R0)
0x2A94	0xB081    SUB	SP, SP, #4
0x2A96	0xF8CDE000  STR	LR, [SP, #0]
0x2A9A	0xB28C    UXTH	R4, R1
0x2A9C	0xB281    UXTH	R1, R0
; display_height end address is: 4 (R1)
; display_width end address is: 0 (R0)
; display_width start address is: 4 (R1)
; display_height start address is: 16 (R4)
;__Lib_TFT_Defs.c, 2047 :: 		__controller = _8BIT_CONTROLLER;
0x2A9E	0xF24003FF  MOVW	R3, #255
0x2AA2	0x4A1F    LDR	R2, [PC, #124]
0x2AA4	0x8013    STRH	R3, [R2, #0]
;__Lib_TFT_Defs.c, 2048 :: 		if (Is_TFT_Set() != 1) {
0x2AA6	0xF7FFF821  BL	_Is_TFT_Set+0
0x2AAA	0x2801    CMP	R0, #1
0x2AAC	0xD008    BEQ	L_TFT_Init_ILI9341_8bit109
;__Lib_TFT_Defs.c, 2049 :: 		TFT_Set_Index_Ptr = TFT_Set_Index;
0x2AAE	0x4B1D    LDR	R3, [PC, #116]
0x2AB0	0x4A1D    LDR	R2, [PC, #116]
0x2AB2	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 2050 :: 		TFT_Write_Command_Ptr = TFT_Write_Command;
0x2AB4	0x4B1D    LDR	R3, [PC, #116]
0x2AB6	0x4A1E    LDR	R2, [PC, #120]
0x2AB8	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 2051 :: 		TFT_Write_Data_Ptr = TFT_Write_Data;
0x2ABA	0x4B1E    LDR	R3, [PC, #120]
0x2ABC	0x4A1E    LDR	R2, [PC, #120]
0x2ABE	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 2052 :: 		}
L_TFT_Init_ILI9341_8bit109:
;__Lib_TFT_Defs.c, 2054 :: 		TFT_DISP_WIDTH = display_width;
0x2AC0	0x4A1E    LDR	R2, [PC, #120]
0x2AC2	0x8011    STRH	R1, [R2, #0]
;__Lib_TFT_Defs.c, 2055 :: 		TFT_DISP_HEIGHT = display_height;
0x2AC4	0x4A1E    LDR	R2, [PC, #120]
0x2AC6	0x8014    STRH	R4, [R2, #0]
;__Lib_TFT_Defs.c, 2056 :: 		if (display_width >= display_height)
0x2AC8	0x42A1    CMP	R1, R4
0x2ACA	0xD303    BCC	L_TFT_Init_ILI9341_8bit110
; display_width end address is: 4 (R1)
; display_height end address is: 16 (R4)
;__Lib_TFT_Defs.c, 2057 :: 		TFT_Disp_Rotation = 0;
0x2ACC	0x2300    MOVS	R3, #0
0x2ACE	0x4A1D    LDR	R2, [PC, #116]
0x2AD0	0x7013    STRB	R3, [R2, #0]
0x2AD2	0xE002    B	L_TFT_Init_ILI9341_8bit111
L_TFT_Init_ILI9341_8bit110:
;__Lib_TFT_Defs.c, 2059 :: 		TFT_Disp_Rotation = 90;
0x2AD4	0x235A    MOVS	R3, #90
0x2AD6	0x4A1B    LDR	R2, [PC, #108]
0x2AD8	0x7013    STRB	R3, [R2, #0]
L_TFT_Init_ILI9341_8bit111:
;__Lib_TFT_Defs.c, 2061 :: 		TFT_Set_Pen(CL_BLACK, 1);
0x2ADA	0x2101    MOVS	R1, #1
0x2ADC	0xF2400000  MOVW	R0, #0
0x2AE0	0xF7FFFBDA  BL	_TFT_Set_Pen+0
;__Lib_TFT_Defs.c, 2062 :: 		TFT_Set_Brush(0, 0, 0, 0, 0, 0);
0x2AE4	0x2300    MOVS	R3, #0
0x2AE6	0x2200    MOVS	R2, #0
0x2AE8	0xB408    PUSH	(R3)
0x2AEA	0xB404    PUSH	(R2)
0x2AEC	0x2300    MOVS	R3, #0
0x2AEE	0x2200    MOVS	R2, #0
0x2AF0	0x2100    MOVS	R1, #0
0x2AF2	0x2000    MOVS	R0, #0
0x2AF4	0xF7FFFB1E  BL	_TFT_Set_Brush+0
0x2AF8	0xB002    ADD	SP, SP, #8
;__Lib_TFT_Defs.c, 2064 :: 		TFT_Move_Cursor(0, 0);
0x2AFA	0x2100    MOVS	R1, #0
0x2AFC	0x2000    MOVS	R0, #0
0x2AFE	0xF7FFFB0D  BL	_TFT_Move_Cursor+0
;__Lib_TFT_Defs.c, 2065 :: 		ExternalFontSet = 0;
0x2B02	0x2300    MOVS	R3, #0
0x2B04	0x4A10    LDR	R2, [PC, #64]
0x2B06	0x7013    STRB	R3, [R2, #0]
;__Lib_TFT_Defs.c, 2066 :: 		TFT_Set_DataPort_Direction();
0x2B08	0xF7FFF954  BL	__Lib_TFT_Defs_TFT_Set_DataPort_Direction+0
;__Lib_TFT_Defs.c, 2068 :: 		TFT_Reset_ILI9341();
0x2B0C	0xF7FDFF94  BL	__Lib_TFT_Defs_TFT_Reset_ILI9341+0
;__Lib_TFT_Defs.c, 2069 :: 		TFT_Set_Address_Ptr = TFT_Set_Address_ILI9342;
0x2B10	0x4B0E    LDR	R3, [PC, #56]
0x2B12	0x4A0F    LDR	R2, [PC, #60]
0x2B14	0x6013    STR	R3, [R2, #0]
;__Lib_TFT_Defs.c, 2070 :: 		}
L_end_TFT_Init_ILI9341_8bit:
0x2B16	0xF8DDE000  LDR	LR, [SP, #0]
0x2B1A	0xB001    ADD	SP, SP, #4
0x2B1C	0x4770    BX	LR
0x2B1E	0xBF00    NOP
0x2B20	0x00382000  	__Lib_TFT_Defs___controller+0
0x2B24	0x02290000  	_TFT_Set_Index+0
0x2B28	0x00D82000  	_TFT_Set_Index_Ptr+0
0x2B2C	0x025D0000  	_TFT_Write_Command+0
0x2B30	0x00DC2000  	_TFT_Write_Command_Ptr+0
0x2B34	0x09790000  	_TFT_Write_Data+0
0x2B38	0x00B82000  	_TFT_Write_Data_Ptr+0
0x2B3C	0x00982000  	_TFT_DISP_WIDTH+0
0x2B40	0x009A2000  	_TFT_DISP_HEIGHT+0
0x2B44	0x00352000  	__Lib_TFT_Defs_TFT_Disp_Rotation+0
0x2B48	0x008B2000  	_ExternalFontSet+0
0x2B4C	0x22B10000  	_TFT_Set_Address_ILI9342+0
0x2B50	0x00B42000  	_TFT_Set_Address_Ptr+0
; end of _TFT_Init_ILI9341_8bit
__Lib_TFT_Defs_TFT_Reset_ILI9341:
;__Lib_TFT_Defs.c, 1828 :: 		static void TFT_Reset_ILI9341(){
0x0A38	0xB081    SUB	SP, SP, #4
0x0A3A	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_TFT_Defs.c, 1829 :: 		TFT_Set_Pin_Directions();
0x0A3E	0xF7FFFC67  BL	__Lib_TFT_Defs_TFT_Set_Pin_Directions+0
;__Lib_TFT_Defs.c, 1831 :: 		Delay_100ms();
0x0A42	0xF7FFFCC9  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 1832 :: 		TFT_RST = 1;
0x0A46	0x2101    MOVS	R1, #1
0x0A48	0xB249    SXTB	R1, R1
0x0A4A	0x4895    LDR	R0, [PC, #596]
0x0A4C	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 1833 :: 		Delay_100ms();
0x0A4E	0xF7FFFCC3  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 1834 :: 		Delay_100ms();
0x0A52	0xF7FFFCC1  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 1836 :: 		TFT_CS = 0;
0x0A56	0x2100    MOVS	R1, #0
0x0A58	0xB249    SXTB	R1, R1
0x0A5A	0x4892    LDR	R0, [PC, #584]
0x0A5C	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 1837 :: 		TFT_Set_Index_Ptr(0x01);   // software reset
0x0A5E	0x2001    MOVS	R0, #1
0x0A60	0x4C91    LDR	R4, [PC, #580]
0x0A62	0x6824    LDR	R4, [R4, #0]
0x0A64	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1838 :: 		Delay_5ms();
0x0A66	0xF7FFFCC3  BL	_Delay_5ms+0
;__Lib_TFT_Defs.c, 1839 :: 		TFT_Set_Index_Ptr(0x28);   // display off
0x0A6A	0x2028    MOVS	R0, #40
0x0A6C	0x4C8E    LDR	R4, [PC, #568]
0x0A6E	0x6824    LDR	R4, [R4, #0]
0x0A70	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1841 :: 		TFT_Set_Index_Ptr(0xcf);
0x0A72	0x20CF    MOVS	R0, #207
0x0A74	0x4C8C    LDR	R4, [PC, #560]
0x0A76	0x6824    LDR	R4, [R4, #0]
0x0A78	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1842 :: 		TFT_Write_Command_Ptr(0x00);
0x0A7A	0x2000    MOVS	R0, #0
0x0A7C	0x4C8B    LDR	R4, [PC, #556]
0x0A7E	0x6824    LDR	R4, [R4, #0]
0x0A80	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1843 :: 		TFT_Write_Command_Ptr(0x83);
0x0A82	0x2083    MOVS	R0, #131
0x0A84	0x4C89    LDR	R4, [PC, #548]
0x0A86	0x6824    LDR	R4, [R4, #0]
0x0A88	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1844 :: 		TFT_Write_Command_Ptr(0x30);
0x0A8A	0x2030    MOVS	R0, #48
0x0A8C	0x4C87    LDR	R4, [PC, #540]
0x0A8E	0x6824    LDR	R4, [R4, #0]
0x0A90	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1846 :: 		TFT_Set_Index_Ptr(0xed);
0x0A92	0x20ED    MOVS	R0, #237
0x0A94	0x4C84    LDR	R4, [PC, #528]
0x0A96	0x6824    LDR	R4, [R4, #0]
0x0A98	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1847 :: 		TFT_Write_Command_Ptr(0x64);
0x0A9A	0x2064    MOVS	R0, #100
0x0A9C	0x4C83    LDR	R4, [PC, #524]
0x0A9E	0x6824    LDR	R4, [R4, #0]
0x0AA0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1848 :: 		TFT_Write_Command_Ptr(0x03);
0x0AA2	0x2003    MOVS	R0, #3
0x0AA4	0x4C81    LDR	R4, [PC, #516]
0x0AA6	0x6824    LDR	R4, [R4, #0]
0x0AA8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1849 :: 		TFT_Write_Command_Ptr(0x12);
0x0AAA	0x2012    MOVS	R0, #18
0x0AAC	0x4C7F    LDR	R4, [PC, #508]
0x0AAE	0x6824    LDR	R4, [R4, #0]
0x0AB0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1850 :: 		TFT_Write_Command_Ptr(0x81);
0x0AB2	0x2081    MOVS	R0, #129
0x0AB4	0x4C7D    LDR	R4, [PC, #500]
0x0AB6	0x6824    LDR	R4, [R4, #0]
0x0AB8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1852 :: 		TFT_Set_Index_Ptr(0xe8);
0x0ABA	0x20E8    MOVS	R0, #232
0x0ABC	0x4C7A    LDR	R4, [PC, #488]
0x0ABE	0x6824    LDR	R4, [R4, #0]
0x0AC0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1853 :: 		TFT_Write_Command_Ptr(0x85);
0x0AC2	0x2085    MOVS	R0, #133
0x0AC4	0x4C79    LDR	R4, [PC, #484]
0x0AC6	0x6824    LDR	R4, [R4, #0]
0x0AC8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1854 :: 		TFT_Write_Command_Ptr(0x01);
0x0ACA	0x2001    MOVS	R0, #1
0x0ACC	0x4C77    LDR	R4, [PC, #476]
0x0ACE	0x6824    LDR	R4, [R4, #0]
0x0AD0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1855 :: 		TFT_Write_Command_Ptr(0x79);
0x0AD2	0x2079    MOVS	R0, #121
0x0AD4	0x4C75    LDR	R4, [PC, #468]
0x0AD6	0x6824    LDR	R4, [R4, #0]
0x0AD8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1857 :: 		TFT_Set_Index_Ptr(0xcb);
0x0ADA	0x20CB    MOVS	R0, #203
0x0ADC	0x4C72    LDR	R4, [PC, #456]
0x0ADE	0x6824    LDR	R4, [R4, #0]
0x0AE0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1858 :: 		TFT_Write_Command_Ptr(0x39);
0x0AE2	0x2039    MOVS	R0, #57
0x0AE4	0x4C71    LDR	R4, [PC, #452]
0x0AE6	0x6824    LDR	R4, [R4, #0]
0x0AE8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1859 :: 		TFT_Write_Command_Ptr(0x2c);
0x0AEA	0x202C    MOVS	R0, #44
0x0AEC	0x4C6F    LDR	R4, [PC, #444]
0x0AEE	0x6824    LDR	R4, [R4, #0]
0x0AF0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1860 :: 		TFT_Write_Command_Ptr(0x00);
0x0AF2	0x2000    MOVS	R0, #0
0x0AF4	0x4C6D    LDR	R4, [PC, #436]
0x0AF6	0x6824    LDR	R4, [R4, #0]
0x0AF8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1861 :: 		TFT_Write_Command_Ptr(0x34);
0x0AFA	0x2034    MOVS	R0, #52
0x0AFC	0x4C6B    LDR	R4, [PC, #428]
0x0AFE	0x6824    LDR	R4, [R4, #0]
0x0B00	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1862 :: 		TFT_Write_Command_Ptr(0x02);
0x0B02	0x2002    MOVS	R0, #2
0x0B04	0x4C69    LDR	R4, [PC, #420]
0x0B06	0x6824    LDR	R4, [R4, #0]
0x0B08	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1864 :: 		TFT_Set_Index_Ptr(0xf7);
0x0B0A	0x20F7    MOVS	R0, #247
0x0B0C	0x4C66    LDR	R4, [PC, #408]
0x0B0E	0x6824    LDR	R4, [R4, #0]
0x0B10	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1865 :: 		TFT_Write_Command_Ptr(0x20);
0x0B12	0x2020    MOVS	R0, #32
0x0B14	0x4C65    LDR	R4, [PC, #404]
0x0B16	0x6824    LDR	R4, [R4, #0]
0x0B18	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1867 :: 		TFT_Set_Index_Ptr(0xea);
0x0B1A	0x20EA    MOVS	R0, #234
0x0B1C	0x4C62    LDR	R4, [PC, #392]
0x0B1E	0x6824    LDR	R4, [R4, #0]
0x0B20	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1868 :: 		TFT_Write_Command_Ptr(0x00);
0x0B22	0x2000    MOVS	R0, #0
0x0B24	0x4C61    LDR	R4, [PC, #388]
0x0B26	0x6824    LDR	R4, [R4, #0]
0x0B28	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1869 :: 		TFT_Write_Command_Ptr(0x00);
0x0B2A	0x2000    MOVS	R0, #0
0x0B2C	0x4C5F    LDR	R4, [PC, #380]
0x0B2E	0x6824    LDR	R4, [R4, #0]
0x0B30	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1871 :: 		TFT_Set_Index_Ptr(0xc0);     // power control
0x0B32	0x20C0    MOVS	R0, #192
0x0B34	0x4C5C    LDR	R4, [PC, #368]
0x0B36	0x6824    LDR	R4, [R4, #0]
0x0B38	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1872 :: 		TFT_Write_Command_Ptr(0x26);
0x0B3A	0x2026    MOVS	R0, #38
0x0B3C	0x4C5B    LDR	R4, [PC, #364]
0x0B3E	0x6824    LDR	R4, [R4, #0]
0x0B40	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1874 :: 		TFT_Set_Index_Ptr(0xc1);     // power control
0x0B42	0x20C1    MOVS	R0, #193
0x0B44	0x4C58    LDR	R4, [PC, #352]
0x0B46	0x6824    LDR	R4, [R4, #0]
0x0B48	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1875 :: 		TFT_Write_Command_Ptr(0x11);
0x0B4A	0x2011    MOVS	R0, #17
0x0B4C	0x4C57    LDR	R4, [PC, #348]
0x0B4E	0x6824    LDR	R4, [R4, #0]
0x0B50	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1877 :: 		TFT_Set_Index_Ptr(0xc5);     // vcom control
0x0B52	0x20C5    MOVS	R0, #197
0x0B54	0x4C54    LDR	R4, [PC, #336]
0x0B56	0x6824    LDR	R4, [R4, #0]
0x0B58	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1878 :: 		TFT_Write_Command_Ptr(0x35);
0x0B5A	0x2035    MOVS	R0, #53
0x0B5C	0x4C53    LDR	R4, [PC, #332]
0x0B5E	0x6824    LDR	R4, [R4, #0]
0x0B60	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1879 :: 		TFT_Write_Command_Ptr(0x3e);
0x0B62	0x203E    MOVS	R0, #62
0x0B64	0x4C51    LDR	R4, [PC, #324]
0x0B66	0x6824    LDR	R4, [R4, #0]
0x0B68	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1881 :: 		TFT_Set_Index_Ptr(0xc7);     // vcom control
0x0B6A	0x20C7    MOVS	R0, #199
0x0B6C	0x4C4E    LDR	R4, [PC, #312]
0x0B6E	0x6824    LDR	R4, [R4, #0]
0x0B70	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1882 :: 		TFT_Write_Command_Ptr(0xbe);
0x0B72	0x20BE    MOVS	R0, #190
0x0B74	0x4C4D    LDR	R4, [PC, #308]
0x0B76	0x6824    LDR	R4, [R4, #0]
0x0B78	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1884 :: 		TFT_Set_Index_Ptr(0x36);     // memory access control
0x0B7A	0x2036    MOVS	R0, #54
0x0B7C	0x4C4A    LDR	R4, [PC, #296]
0x0B7E	0x6824    LDR	R4, [R4, #0]
0x0B80	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1885 :: 		if (TFT_Disp_Rotation == 90)
0x0B82	0x484B    LDR	R0, [PC, #300]
0x0B84	0x7800    LDRB	R0, [R0, #0]
0x0B86	0x285A    CMP	R0, #90
0x0B88	0xD10C    BNE	L___Lib_TFT_Defs_TFT_Reset_ILI934197
;__Lib_TFT_Defs.c, 1886 :: 		if (Is_TFT_Rotated_180())
0x0B8A	0xF7FFFC3D  BL	_Is_TFT_Rotated_180+0
0x0B8E	0xB120    CBZ	R0, L___Lib_TFT_Defs_TFT_Reset_ILI934198
;__Lib_TFT_Defs.c, 1887 :: 		TFT_Write_Command_Ptr (0x88);
0x0B90	0x2088    MOVS	R0, #136
0x0B92	0x4C46    LDR	R4, [PC, #280]
0x0B94	0x6824    LDR	R4, [R4, #0]
0x0B96	0x47A0    BLX	R4
0x0B98	0xE003    B	L___Lib_TFT_Defs_TFT_Reset_ILI934199
L___Lib_TFT_Defs_TFT_Reset_ILI934198:
;__Lib_TFT_Defs.c, 1889 :: 		TFT_Write_Command_Ptr (0x48);
0x0B9A	0x2048    MOVS	R0, #72
0x0B9C	0x4C43    LDR	R4, [PC, #268]
0x0B9E	0x6824    LDR	R4, [R4, #0]
0x0BA0	0x47A0    BLX	R4
L___Lib_TFT_Defs_TFT_Reset_ILI934199:
0x0BA2	0xE00B    B	L___Lib_TFT_Defs_TFT_Reset_ILI9341100
L___Lib_TFT_Defs_TFT_Reset_ILI934197:
;__Lib_TFT_Defs.c, 1891 :: 		if (Is_TFT_Rotated_180())
0x0BA4	0xF7FFFC30  BL	_Is_TFT_Rotated_180+0
0x0BA8	0xB120    CBZ	R0, L___Lib_TFT_Defs_TFT_Reset_ILI9341101
;__Lib_TFT_Defs.c, 1892 :: 		TFT_Write_Command_Ptr (0xE8);
0x0BAA	0x20E8    MOVS	R0, #232
0x0BAC	0x4C3F    LDR	R4, [PC, #252]
0x0BAE	0x6824    LDR	R4, [R4, #0]
0x0BB0	0x47A0    BLX	R4
0x0BB2	0xE003    B	L___Lib_TFT_Defs_TFT_Reset_ILI9341102
L___Lib_TFT_Defs_TFT_Reset_ILI9341101:
;__Lib_TFT_Defs.c, 1894 :: 		TFT_Write_Command_Ptr (0x28);
0x0BB4	0x2028    MOVS	R0, #40
0x0BB6	0x4C3D    LDR	R4, [PC, #244]
0x0BB8	0x6824    LDR	R4, [R4, #0]
0x0BBA	0x47A0    BLX	R4
L___Lib_TFT_Defs_TFT_Reset_ILI9341102:
L___Lib_TFT_Defs_TFT_Reset_ILI9341100:
;__Lib_TFT_Defs.c, 1896 :: 		TFT_Set_Index_Ptr(0x3a);     // pixel format set
0x0BBC	0x203A    MOVS	R0, #58
0x0BBE	0x4C3A    LDR	R4, [PC, #232]
0x0BC0	0x6824    LDR	R4, [R4, #0]
0x0BC2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1897 :: 		TFT_Write_Command_Ptr(0x55); // 16bit/pixel
0x0BC4	0x2055    MOVS	R0, #85
0x0BC6	0x4C39    LDR	R4, [PC, #228]
0x0BC8	0x6824    LDR	R4, [R4, #0]
0x0BCA	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1899 :: 		TFT_Set_Index_Ptr(0xb1);     // frame rate
0x0BCC	0x20B1    MOVS	R0, #177
0x0BCE	0x4C36    LDR	R4, [PC, #216]
0x0BD0	0x6824    LDR	R4, [R4, #0]
0x0BD2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1900 :: 		TFT_Write_Command_Ptr(0x00);
0x0BD4	0x2000    MOVS	R0, #0
0x0BD6	0x4C35    LDR	R4, [PC, #212]
0x0BD8	0x6824    LDR	R4, [R4, #0]
0x0BDA	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1901 :: 		TFT_Write_Command_Ptr(0x1B); // 70
0x0BDC	0x201B    MOVS	R0, #27
0x0BDE	0x4C33    LDR	R4, [PC, #204]
0x0BE0	0x6824    LDR	R4, [R4, #0]
0x0BE2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1904 :: 		TFT_Set_Index_Ptr(0xf2);     // 3Gamma Function Disable
0x0BE4	0x20F2    MOVS	R0, #242
0x0BE6	0x4C30    LDR	R4, [PC, #192]
0x0BE8	0x6824    LDR	R4, [R4, #0]
0x0BEA	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1905 :: 		TFT_Write_Command_Ptr(0x08);
0x0BEC	0x2008    MOVS	R0, #8
0x0BEE	0x4C2F    LDR	R4, [PC, #188]
0x0BF0	0x6824    LDR	R4, [R4, #0]
0x0BF2	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1907 :: 		TFT_Set_Index_Ptr(0x26);
0x0BF4	0x2026    MOVS	R0, #38
0x0BF6	0x4C2C    LDR	R4, [PC, #176]
0x0BF8	0x6824    LDR	R4, [R4, #0]
0x0BFA	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1908 :: 		TFT_Write_Command_Ptr(0x01); // gamma set 4 gamma curve 01/02/04/08
0x0BFC	0x2001    MOVS	R0, #1
0x0BFE	0x4C2B    LDR	R4, [PC, #172]
0x0C00	0x6824    LDR	R4, [R4, #0]
0x0C02	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1910 :: 		TFT_Set_Index_Ptr(0xE0);     // positive gamma correction
0x0C04	0x20E0    MOVS	R0, #224
0x0C06	0x4C28    LDR	R4, [PC, #160]
0x0C08	0x6824    LDR	R4, [R4, #0]
0x0C0A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1911 :: 		TFT_Write_Command_Ptr(0x1f);
0x0C0C	0x201F    MOVS	R0, #31
0x0C0E	0x4C27    LDR	R4, [PC, #156]
0x0C10	0x6824    LDR	R4, [R4, #0]
0x0C12	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1912 :: 		TFT_Write_Command_Ptr(0x1a);
0x0C14	0x201A    MOVS	R0, #26
0x0C16	0x4C25    LDR	R4, [PC, #148]
0x0C18	0x6824    LDR	R4, [R4, #0]
0x0C1A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1913 :: 		TFT_Write_Command_Ptr(0x18);
0x0C1C	0x2018    MOVS	R0, #24
0x0C1E	0x4C23    LDR	R4, [PC, #140]
0x0C20	0x6824    LDR	R4, [R4, #0]
0x0C22	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1914 :: 		TFT_Write_Command_Ptr(0x0a);
0x0C24	0x200A    MOVS	R0, #10
0x0C26	0x4C21    LDR	R4, [PC, #132]
0x0C28	0x6824    LDR	R4, [R4, #0]
0x0C2A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1915 :: 		TFT_Write_Command_Ptr(0x0f);
0x0C2C	0x200F    MOVS	R0, #15
0x0C2E	0x4C1F    LDR	R4, [PC, #124]
0x0C30	0x6824    LDR	R4, [R4, #0]
0x0C32	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1916 :: 		TFT_Write_Command_Ptr(0x06);
0x0C34	0x2006    MOVS	R0, #6
0x0C36	0x4C1D    LDR	R4, [PC, #116]
0x0C38	0x6824    LDR	R4, [R4, #0]
0x0C3A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1917 :: 		TFT_Write_Command_Ptr(0x45);
0x0C3C	0x2045    MOVS	R0, #69
0x0C3E	0x4C1B    LDR	R4, [PC, #108]
0x0C40	0x6824    LDR	R4, [R4, #0]
0x0C42	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1918 :: 		TFT_Write_Command_Ptr(0x87);
0x0C44	0x2087    MOVS	R0, #135
0x0C46	0x4C19    LDR	R4, [PC, #100]
0x0C48	0x6824    LDR	R4, [R4, #0]
0x0C4A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1919 :: 		TFT_Write_Command_Ptr(0x32);
0x0C4C	0x2032    MOVS	R0, #50
0x0C4E	0x4C17    LDR	R4, [PC, #92]
0x0C50	0x6824    LDR	R4, [R4, #0]
0x0C52	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1920 :: 		TFT_Write_Command_Ptr(0x0a);
0x0C54	0x200A    MOVS	R0, #10
0x0C56	0x4C15    LDR	R4, [PC, #84]
0x0C58	0x6824    LDR	R4, [R4, #0]
0x0C5A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1921 :: 		TFT_Write_Command_Ptr(0x07);
0x0C5C	0x2007    MOVS	R0, #7
0x0C5E	0x4C13    LDR	R4, [PC, #76]
0x0C60	0x6824    LDR	R4, [R4, #0]
0x0C62	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1922 :: 		TFT_Write_Command_Ptr(0x02);
0x0C64	0x2002    MOVS	R0, #2
0x0C66	0x4C11    LDR	R4, [PC, #68]
0x0C68	0x6824    LDR	R4, [R4, #0]
0x0C6A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1923 :: 		TFT_Write_Command_Ptr(0x07);
0x0C6C	0x2007    MOVS	R0, #7
0x0C6E	0x4C0F    LDR	R4, [PC, #60]
0x0C70	0x6824    LDR	R4, [R4, #0]
0x0C72	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1924 :: 		TFT_Write_Command_Ptr(0x05);
0x0C74	0x2005    MOVS	R0, #5
0x0C76	0x4C0D    LDR	R4, [PC, #52]
0x0C78	0x6824    LDR	R4, [R4, #0]
0x0C7A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1925 :: 		TFT_Write_Command_Ptr(0x00);
0x0C7C	0x2000    MOVS	R0, #0
0x0C7E	0x4C0B    LDR	R4, [PC, #44]
0x0C80	0x6824    LDR	R4, [R4, #0]
0x0C82	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1927 :: 		TFT_Set_Index_Ptr(0xE1);     // negamma correction
0x0C84	0x20E1    MOVS	R0, #225
0x0C86	0x4C08    LDR	R4, [PC, #32]
0x0C88	0x6824    LDR	R4, [R4, #0]
0x0C8A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1928 :: 		TFT_Write_Command_Ptr(0x00);
0x0C8C	0x2000    MOVS	R0, #0
0x0C8E	0x4C07    LDR	R4, [PC, #28]
0x0C90	0x6824    LDR	R4, [R4, #0]
0x0C92	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1929 :: 		TFT_Write_Command_Ptr(0x25);
0x0C94	0x2025    MOVS	R0, #37
0x0C96	0x4C05    LDR	R4, [PC, #20]
0x0C98	0x6824    LDR	R4, [R4, #0]
0x0C9A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1930 :: 		TFT_Write_Command_Ptr(0x27);
0x0C9C	0x2027    MOVS	R0, #39
0x0C9E	0xE009    B	#18
0x0CA0	0x01A04223  	TFT_RST+0
0x0CA4	0x01BC4223  	TFT_CS+0
0x0CA8	0x00D82000  	_TFT_Set_Index_Ptr+0
0x0CAC	0x00DC2000  	_TFT_Write_Command_Ptr+0
0x0CB0	0x00352000  	__Lib_TFT_Defs_TFT_Disp_Rotation+0
0x0CB4	0x4C4F    LDR	R4, [PC, #316]
0x0CB6	0x6824    LDR	R4, [R4, #0]
0x0CB8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1931 :: 		TFT_Write_Command_Ptr(0x05);
0x0CBA	0x2005    MOVS	R0, #5
0x0CBC	0x4C4D    LDR	R4, [PC, #308]
0x0CBE	0x6824    LDR	R4, [R4, #0]
0x0CC0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1932 :: 		TFT_Write_Command_Ptr(0x10);
0x0CC2	0x2010    MOVS	R0, #16
0x0CC4	0x4C4B    LDR	R4, [PC, #300]
0x0CC6	0x6824    LDR	R4, [R4, #0]
0x0CC8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1933 :: 		TFT_Write_Command_Ptr(0x09);
0x0CCA	0x2009    MOVS	R0, #9
0x0CCC	0x4C49    LDR	R4, [PC, #292]
0x0CCE	0x6824    LDR	R4, [R4, #0]
0x0CD0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1934 :: 		TFT_Write_Command_Ptr(0x3a);
0x0CD2	0x203A    MOVS	R0, #58
0x0CD4	0x4C47    LDR	R4, [PC, #284]
0x0CD6	0x6824    LDR	R4, [R4, #0]
0x0CD8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1935 :: 		TFT_Write_Command_Ptr(0x78);
0x0CDA	0x2078    MOVS	R0, #120
0x0CDC	0x4C45    LDR	R4, [PC, #276]
0x0CDE	0x6824    LDR	R4, [R4, #0]
0x0CE0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1936 :: 		TFT_Write_Command_Ptr(0x4d);
0x0CE2	0x204D    MOVS	R0, #77
0x0CE4	0x4C43    LDR	R4, [PC, #268]
0x0CE6	0x6824    LDR	R4, [R4, #0]
0x0CE8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1937 :: 		TFT_Write_Command_Ptr(0x05);
0x0CEA	0x2005    MOVS	R0, #5
0x0CEC	0x4C41    LDR	R4, [PC, #260]
0x0CEE	0x6824    LDR	R4, [R4, #0]
0x0CF0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1938 :: 		TFT_Write_Command_Ptr(0x18);
0x0CF2	0x2018    MOVS	R0, #24
0x0CF4	0x4C3F    LDR	R4, [PC, #252]
0x0CF6	0x6824    LDR	R4, [R4, #0]
0x0CF8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1939 :: 		TFT_Write_Command_Ptr(0x0d);
0x0CFA	0x200D    MOVS	R0, #13
0x0CFC	0x4C3D    LDR	R4, [PC, #244]
0x0CFE	0x6824    LDR	R4, [R4, #0]
0x0D00	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1940 :: 		TFT_Write_Command_Ptr(0x38);
0x0D02	0x2038    MOVS	R0, #56
0x0D04	0x4C3B    LDR	R4, [PC, #236]
0x0D06	0x6824    LDR	R4, [R4, #0]
0x0D08	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1941 :: 		TFT_Write_Command_Ptr(0x3a);
0x0D0A	0x203A    MOVS	R0, #58
0x0D0C	0x4C39    LDR	R4, [PC, #228]
0x0D0E	0x6824    LDR	R4, [R4, #0]
0x0D10	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1942 :: 		TFT_Write_Command_Ptr(0x1f);
0x0D12	0x201F    MOVS	R0, #31
0x0D14	0x4C37    LDR	R4, [PC, #220]
0x0D16	0x6824    LDR	R4, [R4, #0]
0x0D18	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1946 :: 		TFT_Set_Index_Ptr(0x2A);
0x0D1A	0x202A    MOVS	R0, #42
0x0D1C	0x4C36    LDR	R4, [PC, #216]
0x0D1E	0x6824    LDR	R4, [R4, #0]
0x0D20	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1947 :: 		TFT_Write_Command_Ptr(0);
0x0D22	0x2000    MOVS	R0, #0
0x0D24	0x4C33    LDR	R4, [PC, #204]
0x0D26	0x6824    LDR	R4, [R4, #0]
0x0D28	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1948 :: 		TFT_Write_Command_Ptr(0);
0x0D2A	0x2000    MOVS	R0, #0
0x0D2C	0x4C31    LDR	R4, [PC, #196]
0x0D2E	0x6824    LDR	R4, [R4, #0]
0x0D30	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1949 :: 		TFT_Write_Command_Ptr((TFT_DISP_WIDTH - 1) >> 8);
0x0D32	0x4832    LDR	R0, [PC, #200]
0x0D34	0x8800    LDRH	R0, [R0, #0]
0x0D36	0x1E40    SUBS	R0, R0, #1
0x0D38	0xB280    UXTH	R0, R0
0x0D3A	0x0A04    LSRS	R4, R0, #8
0x0D3C	0xB2E0    UXTB	R0, R4
0x0D3E	0x4C2D    LDR	R4, [PC, #180]
0x0D40	0x6824    LDR	R4, [R4, #0]
0x0D42	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1950 :: 		TFT_Write_Command_Ptr(TFT_DISP_WIDTH-1);
0x0D44	0x482D    LDR	R0, [PC, #180]
0x0D46	0x8800    LDRH	R0, [R0, #0]
0x0D48	0x1E44    SUBS	R4, R0, #1
0x0D4A	0xB2E0    UXTB	R0, R4
0x0D4C	0x4C29    LDR	R4, [PC, #164]
0x0D4E	0x6824    LDR	R4, [R4, #0]
0x0D50	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1952 :: 		TFT_Set_Index_Ptr(0x2B);
0x0D52	0x202B    MOVS	R0, #43
0x0D54	0x4C28    LDR	R4, [PC, #160]
0x0D56	0x6824    LDR	R4, [R4, #0]
0x0D58	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1953 :: 		TFT_Write_Command_Ptr(0);
0x0D5A	0x2000    MOVS	R0, #0
0x0D5C	0x4C25    LDR	R4, [PC, #148]
0x0D5E	0x6824    LDR	R4, [R4, #0]
0x0D60	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1954 :: 		TFT_Write_Command_Ptr(0);
0x0D62	0x2000    MOVS	R0, #0
0x0D64	0x4C23    LDR	R4, [PC, #140]
0x0D66	0x6824    LDR	R4, [R4, #0]
0x0D68	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1955 :: 		TFT_Write_Command_Ptr((TFT_DISP_HEIGHT - 1) >> 8);
0x0D6A	0x4825    LDR	R0, [PC, #148]
0x0D6C	0x8800    LDRH	R0, [R0, #0]
0x0D6E	0x1E40    SUBS	R0, R0, #1
0x0D70	0xB280    UXTH	R0, R0
0x0D72	0x0A04    LSRS	R4, R0, #8
0x0D74	0xB2E0    UXTB	R0, R4
0x0D76	0x4C1F    LDR	R4, [PC, #124]
0x0D78	0x6824    LDR	R4, [R4, #0]
0x0D7A	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1956 :: 		TFT_Write_Command_Ptr(TFT_DISP_HEIGHT-1);
0x0D7C	0x4820    LDR	R0, [PC, #128]
0x0D7E	0x8800    LDRH	R0, [R0, #0]
0x0D80	0x1E44    SUBS	R4, R0, #1
0x0D82	0xB2E0    UXTB	R0, R4
0x0D84	0x4C1B    LDR	R4, [PC, #108]
0x0D86	0x6824    LDR	R4, [R4, #0]
0x0D88	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1958 :: 		TFT_Set_Index_Ptr(0xb7);     // entry mode set
0x0D8A	0x20B7    MOVS	R0, #183
0x0D8C	0x4C1A    LDR	R4, [PC, #104]
0x0D8E	0x6824    LDR	R4, [R4, #0]
0x0D90	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1959 :: 		TFT_Write_Command_Ptr(0x07);
0x0D92	0x2007    MOVS	R0, #7
0x0D94	0x4C17    LDR	R4, [PC, #92]
0x0D96	0x6824    LDR	R4, [R4, #0]
0x0D98	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1961 :: 		TFT_Set_Index_Ptr(0xb6);     // display function control
0x0D9A	0x20B6    MOVS	R0, #182
0x0D9C	0x4C16    LDR	R4, [PC, #88]
0x0D9E	0x6824    LDR	R4, [R4, #0]
0x0DA0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1962 :: 		TFT_Write_Command_Ptr(0x0a);
0x0DA2	0x200A    MOVS	R0, #10
0x0DA4	0x4C13    LDR	R4, [PC, #76]
0x0DA6	0x6824    LDR	R4, [R4, #0]
0x0DA8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1963 :: 		TFT_Write_Command_Ptr(0x82);
0x0DAA	0x2082    MOVS	R0, #130
0x0DAC	0x4C11    LDR	R4, [PC, #68]
0x0DAE	0x6824    LDR	R4, [R4, #0]
0x0DB0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1964 :: 		TFT_Write_Command_Ptr(0x27);
0x0DB2	0x2027    MOVS	R0, #39
0x0DB4	0x4C0F    LDR	R4, [PC, #60]
0x0DB6	0x6824    LDR	R4, [R4, #0]
0x0DB8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1965 :: 		TFT_Write_Command_Ptr(0x00);
0x0DBA	0x2000    MOVS	R0, #0
0x0DBC	0x4C0D    LDR	R4, [PC, #52]
0x0DBE	0x6824    LDR	R4, [R4, #0]
0x0DC0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1967 :: 		TFT_Set_Index_Ptr(0x11);     // sleep out
0x0DC2	0x2011    MOVS	R0, #17
0x0DC4	0x4C0C    LDR	R4, [PC, #48]
0x0DC6	0x6824    LDR	R4, [R4, #0]
0x0DC8	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1968 :: 		Delay_100ms();
0x0DCA	0xF7FFFB05  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 1969 :: 		TFT_Set_Index_Ptr(0x29);     // display on
0x0DCE	0x2029    MOVS	R0, #41
0x0DD0	0x4C09    LDR	R4, [PC, #36]
0x0DD2	0x6824    LDR	R4, [R4, #0]
0x0DD4	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1970 :: 		Delay_100ms();
0x0DD6	0xF7FFFAFF  BL	_Delay_100ms+0
;__Lib_TFT_Defs.c, 1971 :: 		TFT_Set_Index_Ptr(0x2c);     // memory write
0x0DDA	0x202C    MOVS	R0, #44
0x0DDC	0x4C06    LDR	R4, [PC, #24]
0x0DDE	0x6824    LDR	R4, [R4, #0]
0x0DE0	0x47A0    BLX	R4
;__Lib_TFT_Defs.c, 1972 :: 		TFT_CS = 1;
0x0DE2	0x2101    MOVS	R1, #1
0x0DE4	0xB249    SXTB	R1, R1
0x0DE6	0x4807    LDR	R0, [PC, #28]
0x0DE8	0x6001    STR	R1, [R0, #0]
;__Lib_TFT_Defs.c, 1973 :: 		}
L_end_TFT_Reset_ILI9341:
0x0DEA	0xF8DDE000  LDR	LR, [SP, #0]
0x0DEE	0xB001    ADD	SP, SP, #4
0x0DF0	0x4770    BX	LR
0x0DF2	0xBF00    NOP
0x0DF4	0x00DC2000  	_TFT_Write_Command_Ptr+0
0x0DF8	0x00D82000  	_TFT_Set_Index_Ptr+0
0x0DFC	0x00982000  	_TFT_DISP_WIDTH+0
0x0E00	0x009A2000  	_TFT_DISP_HEIGHT+0
0x0E04	0x01BC4223  	TFT_CS+0
; end of __Lib_TFT_Defs_TFT_Reset_ILI9341
_TFT_Write_Text:
;__Lib_TFT.c, 1266 :: 		
; y start address is: 8 (R2)
; x start address is: 4 (R1)
0x2728	0xB083    SUB	SP, SP, #12
0x272A	0xF8CDE000  STR	LR, [SP, #0]
0x272E	0x9002    STR	R0, [SP, #8]
; y end address is: 8 (R2)
; x end address is: 4 (R1)
; x start address is: 4 (R1)
; y start address is: 8 (R2)
;__Lib_TFT.c, 1269 :: 		
0x2730	0x4B1C    LDR	R3, [PC, #112]
0x2732	0x881B    LDRH	R3, [R3, #0]
0x2734	0x4299    CMP	R1, R3
0x2736	0xD300    BCC	L_TFT_Write_Text194
; x end address is: 4 (R1)
; y end address is: 8 (R2)
;__Lib_TFT.c, 1270 :: 		
0x2738	0xE02F    B	L_end_TFT_Write_Text
L_TFT_Write_Text194:
;__Lib_TFT.c, 1271 :: 		
; y start address is: 8 (R2)
; x start address is: 4 (R1)
0x273A	0x4B1B    LDR	R3, [PC, #108]
0x273C	0x881B    LDRH	R3, [R3, #0]
0x273E	0x429A    CMP	R2, R3
0x2740	0xD300    BCC	L_TFT_Write_Text195
; x end address is: 4 (R1)
; y end address is: 8 (R2)
;__Lib_TFT.c, 1272 :: 		
0x2742	0xE02A    B	L_end_TFT_Write_Text
L_TFT_Write_Text195:
;__Lib_TFT.c, 1274 :: 		
; i start address is: 0 (R0)
; y start address is: 8 (R2)
; x start address is: 4 (R1)
0x2744	0x2000    MOVS	R0, #0
;__Lib_TFT.c, 1275 :: 		
0x2746	0xF8AD0004  STRH	R0, [SP, #4]
; y end address is: 8 (R2)
0x274A	0xB288    UXTH	R0, R1
0x274C	0xB291    UXTH	R1, R2
; x end address is: 4 (R1)
0x274E	0xF7FFFCE5  BL	_TFT_Move_Cursor+0
; i end address is: 0 (R0)
0x2752	0xF8BD0004  LDRH	R0, [SP, #4]
;__Lib_TFT.c, 1276 :: 		
L_TFT_Write_Text196:
; i start address is: 0 (R0)
0x2756	0x9B02    LDR	R3, [SP, #8]
0x2758	0x181B    ADDS	R3, R3, R0
0x275A	0x781B    LDRB	R3, [R3, #0]
0x275C	0xB1EB    CBZ	R3, L_TFT_Write_Text197
;__Lib_TFT.c, 1277 :: 		
0x275E	0x4B13    LDR	R3, [PC, #76]
0x2760	0x781B    LDRB	R3, [R3, #0]
0x2762	0xB163    CBZ	R3, L_TFT_Write_Text198
;__Lib_TFT.c, 1278 :: 		
0x2764	0x9B02    LDR	R3, [SP, #8]
0x2766	0x181B    ADDS	R3, R3, R0
0x2768	0x781B    LDRB	R3, [R3, #0]
0x276A	0xF8AD0004  STRH	R0, [SP, #4]
0x276E	0xB298    UXTH	R0, R3
0x2770	0xF7FEFB60  BL	__Lib_TFT__TFT_Write_Char_E+0
0x2774	0xF8BD0004  LDRH	R0, [SP, #4]
0x2778	0x1C41    ADDS	R1, R0, #1
0x277A	0xB289    UXTH	R1, R1
; i end address is: 0 (R0)
; i start address is: 4 (R1)
; i end address is: 4 (R1)
0x277C	0xE00B    B	L_TFT_Write_Text199
L_TFT_Write_Text198:
;__Lib_TFT.c, 1280 :: 		
; i start address is: 0 (R0)
0x277E	0x9B02    LDR	R3, [SP, #8]
0x2780	0x181B    ADDS	R3, R3, R0
0x2782	0x781B    LDRB	R3, [R3, #0]
0x2784	0xF8AD0004  STRH	R0, [SP, #4]
0x2788	0xB298    UXTH	R0, R3
0x278A	0xF7FEFCEB  BL	__Lib_TFT__TFT_Write_Char+0
0x278E	0xF8BD0004  LDRH	R0, [SP, #4]
0x2792	0x1C41    ADDS	R1, R0, #1
0x2794	0xB289    UXTH	R1, R1
; i end address is: 0 (R0)
; i start address is: 4 (R1)
; i end address is: 4 (R1)
L_TFT_Write_Text199:
; i start address is: 4 (R1)
0x2796	0xB288    UXTH	R0, R1
; i end address is: 4 (R1)
0x2798	0xE7DD    B	L_TFT_Write_Text196
L_TFT_Write_Text197:
;__Lib_TFT.c, 1281 :: 		
L_end_TFT_Write_Text:
0x279A	0xF8DDE000  LDR	LR, [SP, #0]
0x279E	0xB003    ADD	SP, SP, #12
0x27A0	0x4770    BX	LR
0x27A2	0xBF00    NOP
0x27A4	0x00982000  	_TFT_DISP_WIDTH+0
0x27A8	0x009A2000  	_TFT_DISP_HEIGHT+0
0x27AC	0x008B2000  	_ExternalFontSet+0
; end of _TFT_Write_Text
__Lib_TFT__TFT_Write_Char_E:
;__Lib_TFT.c, 3361 :: 		
; ch start address is: 0 (R0)
0x0E34	0xB08B    SUB	SP, SP, #44
0x0E36	0xF8CDE000  STR	LR, [SP, #0]
; ch end address is: 0 (R0)
; ch start address is: 0 (R0)
;__Lib_TFT.c, 3363 :: 		
;__Lib_TFT.c, 3365 :: 		
0x0E3A	0xF2400100  MOVW	R1, #0
0x0E3E	0xF8AD1026  STRH	R1, [SP, #38]
0x0E42	0x2100    MOVS	R1, #0
0x0E44	0xF88D1028  STRB	R1, [SP, #40]
;__Lib_TFT.c, 3366 :: 		
;__Lib_TFT.c, 3373 :: 		
0x0E48	0x49B5    LDR	R1, [PC, #724]
0x0E4A	0x8809    LDRH	R1, [R1, #0]
0x0E4C	0x4288    CMP	R0, R1
0x0E4E	0xD200    BCS	L___Lib_TFT__TFT_Write_Char_E687
; ch end address is: 0 (R0)
;__Lib_TFT.c, 3374 :: 		
0x0E50	0xE162    B	L_end__TFT_Write_Char_E
L___Lib_TFT__TFT_Write_Char_E687:
;__Lib_TFT.c, 3375 :: 		
; ch start address is: 0 (R0)
0x0E52	0x49B4    LDR	R1, [PC, #720]
0x0E54	0x8809    LDRH	R1, [R1, #0]
0x0E56	0x4288    CMP	R0, R1
0x0E58	0xD900    BLS	L___Lib_TFT__TFT_Write_Char_E688
; ch end address is: 0 (R0)
;__Lib_TFT.c, 3376 :: 		
0x0E5A	0xE15D    B	L_end__TFT_Write_Char_E
L___Lib_TFT__TFT_Write_Char_E688:
;__Lib_TFT.c, 3379 :: 		
; ch start address is: 0 (R0)
0x0E5C	0x49B0    LDR	R1, [PC, #704]
0x0E5E	0x8809    LDRH	R1, [R1, #0]
0x0E60	0x1A41    SUB	R1, R0, R1
0x0E62	0xB289    UXTH	R1, R1
; ch end address is: 0 (R0)
0x0E64	0x008A    LSLS	R2, R1, #2
0x0E66	0xB292    UXTH	R2, R2
;__Lib_TFT.c, 3380 :: 		
0x0E68	0x49AF    LDR	R1, [PC, #700]
0x0E6A	0x6809    LDR	R1, [R1, #0]
0x0E6C	0x3108    ADDS	R1, #8
0x0E6E	0x1889    ADDS	R1, R1, R2
;__Lib_TFT.c, 3383 :: 		
0x0E70	0x4608    MOV	R0, R1
0x0E72	0x2104    MOVS	R1, #4
0x0E74	0xF7FFFC3C  BL	__Lib_TFT__TFT_getHeader+0
;__Lib_TFT.c, 3384 :: 		
; ptr start address is: 0 (R0)
0x0E78	0x48AC    LDR	R0, [PC, #688]
;__Lib_TFT.c, 3386 :: 		
0x0E7A	0x7803    LDRB	R3, [R0, #0]
0x0E7C	0xF88D3024  STRB	R3, [SP, #36]
;__Lib_TFT.c, 3388 :: 		
0x0E80	0x1C41    ADDS	R1, R0, #1
0x0E82	0x7809    LDRB	R1, [R1, #0]
0x0E84	0xB2CA    UXTB	R2, R1
0x0E86	0x1C81    ADDS	R1, R0, #2
0x0E88	0x7809    LDRB	R1, [R1, #0]
0x0E8A	0x0209    LSLS	R1, R1, #8
0x0E8C	0x1852    ADDS	R2, R2, R1
0x0E8E	0x1CC1    ADDS	R1, R0, #3
; ptr end address is: 0 (R0)
0x0E90	0x7809    LDRB	R1, [R1, #0]
0x0E92	0x0409    LSLS	R1, R1, #16
0x0E94	0x1852    ADDS	R2, R2, R1
;__Lib_TFT.c, 3390 :: 		
0x0E96	0x49A4    LDR	R1, [PC, #656]
0x0E98	0x6809    LDR	R1, [R1, #0]
0x0E9A	0x1889    ADDS	R1, R1, R2
0x0E9C	0x9104    STR	R1, [SP, #16]
;__Lib_TFT.c, 3392 :: 		
0x0E9E	0x08DA    LSRS	R2, R3, #3
0x0EA0	0xB2D2    UXTB	R2, R2
0x0EA2	0x49A3    LDR	R1, [PC, #652]
0x0EA4	0x8809    LDRH	R1, [R1, #0]
0x0EA6	0x4351    MULS	R1, R2, R1
0x0EA8	0xB289    UXTH	R1, R1
0x0EAA	0x9106    STR	R1, [SP, #24]
;__Lib_TFT.c, 3393 :: 		
0x0EAC	0xF0030107  AND	R1, R3, #7
0x0EB0	0xB2C9    UXTB	R1, R1
0x0EB2	0xB121    CBZ	R1, L___Lib_TFT__TFT_Write_Char_E689
;__Lib_TFT.c, 3394 :: 		
0x0EB4	0x499E    LDR	R1, [PC, #632]
0x0EB6	0x880A    LDRH	R2, [R1, #0]
0x0EB8	0x9906    LDR	R1, [SP, #24]
0x0EBA	0x1889    ADDS	R1, R1, R2
0x0EBC	0x9106    STR	R1, [SP, #24]
L___Lib_TFT__TFT_Write_Char_E689:
;__Lib_TFT.c, 3395 :: 		
0x0EBE	0x9906    LDR	R1, [SP, #24]
0x0EC0	0x9108    STR	R1, [SP, #32]
;__Lib_TFT.c, 3396 :: 		
0x0EC2	0xAC05    ADD	R4, SP, #20
0x0EC4	0x4622    MOV	R2, R4
0x0EC6	0x9906    LDR	R1, [SP, #24]
0x0EC8	0x9804    LDR	R0, [SP, #16]
0x0ECA	0x4C9A    LDR	R4, [PC, #616]
0x0ECC	0x6824    LDR	R4, [R4, #0]
0x0ECE	0x47A0    BLX	R4
; ptr start address is: 16 (R4)
0x0ED0	0x4604    MOV	R4, R0
;__Lib_TFT.c, 3397 :: 		
0x0ED2	0x9A05    LDR	R2, [SP, #20]
0x0ED4	0x9904    LDR	R1, [SP, #16]
0x0ED6	0x1889    ADDS	R1, R1, R2
0x0ED8	0x9104    STR	R1, [SP, #16]
;__Lib_TFT.c, 3398 :: 		
0x0EDA	0x9A05    LDR	R2, [SP, #20]
0x0EDC	0x9906    LDR	R1, [SP, #24]
0x0EDE	0x1A89    SUB	R1, R1, R2
0x0EE0	0x9106    STR	R1, [SP, #24]
;__Lib_TFT.c, 3400 :: 		
0x0EE2	0x2100    MOVS	R1, #0
0x0EE4	0x9107    STR	R1, [SP, #28]
;__Lib_TFT.c, 3401 :: 		
0x0EE6	0x4994    LDR	R1, [PC, #592]
0x0EE8	0x7809    LDRB	R1, [R1, #0]
0x0EEA	0xB121    CBZ	R1, L___Lib_TFT__TFT_Write_Char_E974
0x0EEC	0x4992    LDR	R1, [PC, #584]
0x0EEE	0x7809    LDRB	R1, [R1, #0]
0x0EF0	0x2902    CMP	R1, #2
0x0EF2	0xD000    BEQ	L___Lib_TFT__TFT_Write_Char_E973
0x0EF4	0xE08C    B	L___Lib_TFT__TFT_Write_Char_E692
L___Lib_TFT__TFT_Write_Char_E974:
L___Lib_TFT__TFT_Write_Char_E973:
;__Lib_TFT.c, 3402 :: 		
0x0EF6	0x4991    LDR	R1, [PC, #580]
0x0EF8	0x8809    LDRH	R1, [R1, #0]
0x0EFA	0xF8AD100A  STRH	R1, [SP, #10]
;__Lib_TFT.c, 3403 :: 		
0x0EFE	0x2100    MOVS	R1, #0
0x0F00	0xF88D1009  STRB	R1, [SP, #9]
; ptr end address is: 16 (R4)
0x0F04	0x4620    MOV	R0, R4
L___Lib_TFT__TFT_Write_Char_E693:
; ptr start address is: 0 (R0)
0x0F06	0x498A    LDR	R1, [PC, #552]
0x0F08	0x880A    LDRH	R2, [R1, #0]
0x0F0A	0xF89D1009  LDRB	R1, [SP, #9]
0x0F0E	0x4291    CMP	R1, R2
0x0F10	0xF0808070  BCS	L___Lib_TFT__TFT_Write_Char_E694
;__Lib_TFT.c, 3404 :: 		
0x0F14	0x498A    LDR	R1, [PC, #552]
0x0F16	0x8809    LDRH	R1, [R1, #0]
0x0F18	0xF8AD1026  STRH	R1, [SP, #38]
;__Lib_TFT.c, 3405 :: 		
0x0F1C	0x2100    MOVS	R1, #0
0x0F1E	0xF88D100C  STRB	R1, [SP, #12]
;__Lib_TFT.c, 3406 :: 		
0x0F22	0x2100    MOVS	R1, #0
0x0F24	0xF88D1008  STRB	R1, [SP, #8]
; ptr end address is: 0 (R0)
0x0F28	0x4604    MOV	R4, R0
L___Lib_TFT__TFT_Write_Char_E696:
; ptr start address is: 16 (R4)
0x0F2A	0xF89D2024  LDRB	R2, [SP, #36]
0x0F2E	0xF89D1008  LDRB	R1, [SP, #8]
0x0F32	0x4291    CMP	R1, R2
0x0F34	0xD252    BCS	L___Lib_TFT__TFT_Write_Char_E697
;__Lib_TFT.c, 3407 :: 		
0x0F36	0xF89D100C  LDRB	R1, [SP, #12]
0x0F3A	0xBB59    CBNZ	R1, L___Lib_TFT__TFT_Write_Char_E977
;__Lib_TFT.c, 3408 :: 		
0x0F3C	0x9907    LDR	R1, [SP, #28]
0x0F3E	0x1C49    ADDS	R1, R1, #1
0x0F40	0x9107    STR	R1, [SP, #28]
;__Lib_TFT.c, 3409 :: 		
0x0F42	0x9A08    LDR	R2, [SP, #32]
0x0F44	0x9905    LDR	R1, [SP, #20]
0x0F46	0x4291    CMP	R1, R2
0x0F48	0xD21B    BCS	L___Lib_TFT__TFT_Write_Char_E976
;__Lib_TFT.c, 3410 :: 		
0x0F4A	0x9A05    LDR	R2, [SP, #20]
0x0F4C	0x9907    LDR	R1, [SP, #28]
0x0F4E	0x4291    CMP	R1, R2
0x0F50	0xD915    BLS	L___Lib_TFT__TFT_Write_Char_E975
; ptr end address is: 16 (R4)
;__Lib_TFT.c, 3411 :: 		
0x0F52	0x2101    MOVS	R1, #1
0x0F54	0x9107    STR	R1, [SP, #28]
;__Lib_TFT.c, 3412 :: 		
0x0F56	0xAC05    ADD	R4, SP, #20
0x0F58	0x4622    MOV	R2, R4
0x0F5A	0x9906    LDR	R1, [SP, #24]
0x0F5C	0x9804    LDR	R0, [SP, #16]
0x0F5E	0x4C75    LDR	R4, [PC, #468]
0x0F60	0x6824    LDR	R4, [R4, #0]
0x0F62	0x47A0    BLX	R4
; ptr start address is: 16 (R4)
0x0F64	0x4604    MOV	R4, R0
;__Lib_TFT.c, 3413 :: 		
0x0F66	0x9906    LDR	R1, [SP, #24]
0x0F68	0x9108    STR	R1, [SP, #32]
;__Lib_TFT.c, 3414 :: 		
0x0F6A	0x9A05    LDR	R2, [SP, #20]
0x0F6C	0x9904    LDR	R1, [SP, #16]
0x0F6E	0x1889    ADDS	R1, R1, R2
0x0F70	0x9104    STR	R1, [SP, #16]
;__Lib_TFT.c, 3415 :: 		
0x0F72	0x9A05    LDR	R2, [SP, #20]
0x0F74	0x9906    LDR	R1, [SP, #24]
0x0F76	0x1A89    SUB	R1, R1, R2
0x0F78	0x9106    STR	R1, [SP, #24]
; ptr end address is: 16 (R4)
0x0F7A	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3416 :: 		
0x0F7C	0xE000    B	L___Lib_TFT__TFT_Write_Char_E701
L___Lib_TFT__TFT_Write_Char_E975:
;__Lib_TFT.c, 3410 :: 		
0x0F7E	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3416 :: 		
L___Lib_TFT__TFT_Write_Char_E701:
;__Lib_TFT.c, 3417 :: 		
; ptr start address is: 0 (R0)
; ptr end address is: 0 (R0)
0x0F80	0xE000    B	L___Lib_TFT__TFT_Write_Char_E700
L___Lib_TFT__TFT_Write_Char_E976:
;__Lib_TFT.c, 3409 :: 		
0x0F82	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3417 :: 		
L___Lib_TFT__TFT_Write_Char_E700:
;__Lib_TFT.c, 3418 :: 		
; ptr start address is: 0 (R0)
0x0F84	0x7801    LDRB	R1, [R0, #0]
0x0F86	0xF88D1028  STRB	R1, [SP, #40]
0x0F8A	0x1C40    ADDS	R0, R0, #1
;__Lib_TFT.c, 3419 :: 		
0x0F8C	0x2101    MOVS	R1, #1
0x0F8E	0xF88D100C  STRB	R1, [SP, #12]
; ptr end address is: 0 (R0)
;__Lib_TFT.c, 3420 :: 		
0x0F92	0xE000    B	L___Lib_TFT__TFT_Write_Char_E699
L___Lib_TFT__TFT_Write_Char_E977:
;__Lib_TFT.c, 3407 :: 		
0x0F94	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3420 :: 		
L___Lib_TFT__TFT_Write_Char_E699:
;__Lib_TFT.c, 3422 :: 		
; ptr start address is: 0 (R0)
0x0F96	0xF89D200C  LDRB	R2, [SP, #12]
0x0F9A	0xF89D1028  LDRB	R1, [SP, #40]
0x0F9E	0x4011    ANDS	R1, R2
0x0FA0	0xB2C9    UXTB	R1, R1
0x0FA2	0xB151    CBZ	R1, L___Lib_TFT__TFT_Write_Char_E702
;__Lib_TFT.c, 3423 :: 		
0x0FA4	0x4967    LDR	R1, [PC, #412]
0x0FA6	0x8809    LDRH	R1, [R1, #0]
0x0FA8	0x9001    STR	R0, [SP, #4]
0x0FAA	0xB28A    UXTH	R2, R1
0x0FAC	0xF8BD100A  LDRH	R1, [SP, #10]
0x0FB0	0xF8BD0026  LDRH	R0, [SP, #38]
0x0FB4	0xF7FFFBCE  BL	_TFT_Dot+0
0x0FB8	0x9801    LDR	R0, [SP, #4]
;__Lib_TFT.c, 3424 :: 		
L___Lib_TFT__TFT_Write_Char_E702:
;__Lib_TFT.c, 3426 :: 		
0x0FBA	0xF8BD1026  LDRH	R1, [SP, #38]
0x0FBE	0x1C49    ADDS	R1, R1, #1
0x0FC0	0xF8AD1026  STRH	R1, [SP, #38]
;__Lib_TFT.c, 3427 :: 		
0x0FC4	0xF89D100C  LDRB	R1, [SP, #12]
0x0FC8	0x0049    LSLS	R1, R1, #1
0x0FCA	0xF88D100C  STRB	R1, [SP, #12]
;__Lib_TFT.c, 3406 :: 		
0x0FCE	0xF89D1008  LDRB	R1, [SP, #8]
0x0FD2	0x1C49    ADDS	R1, R1, #1
0x0FD4	0xF88D1008  STRB	R1, [SP, #8]
;__Lib_TFT.c, 3428 :: 		
0x0FD8	0x4604    MOV	R4, R0
; ptr end address is: 0 (R0)
0x0FDA	0xE7A6    B	L___Lib_TFT__TFT_Write_Char_E696
L___Lib_TFT__TFT_Write_Char_E697:
;__Lib_TFT.c, 3429 :: 		
; ptr start address is: 16 (R4)
0x0FDC	0xF8BD100A  LDRH	R1, [SP, #10]
0x0FE0	0x1C49    ADDS	R1, R1, #1
0x0FE2	0xF8AD100A  STRH	R1, [SP, #10]
;__Lib_TFT.c, 3403 :: 		
0x0FE6	0xF89D1009  LDRB	R1, [SP, #9]
0x0FEA	0x1C49    ADDS	R1, R1, #1
0x0FEC	0xF88D1009  STRB	R1, [SP, #9]
;__Lib_TFT.c, 3430 :: 		
0x0FF0	0x4620    MOV	R0, R4
; ptr end address is: 16 (R4)
0x0FF2	0xE788    B	L___Lib_TFT__TFT_Write_Char_E693
L___Lib_TFT__TFT_Write_Char_E694:
;__Lib_TFT.c, 3432 :: 		
0x0FF4	0x4950    LDR	R1, [PC, #320]
0x0FF6	0x7809    LDRB	R1, [R1, #0]
0x0FF8	0xB929    CBNZ	R1, L___Lib_TFT__TFT_Write_Char_E703
;__Lib_TFT.c, 3433 :: 		
0x0FFA	0xF8BD1026  LDRH	R1, [SP, #38]
0x0FFE	0x1C4A    ADDS	R2, R1, #1
0x1000	0x494F    LDR	R1, [PC, #316]
0x1002	0x800A    STRH	R2, [R1, #0]
0x1004	0xE003    B	L___Lib_TFT__TFT_Write_Char_E704
L___Lib_TFT__TFT_Write_Char_E703:
;__Lib_TFT.c, 3435 :: 		
0x1006	0xF8BD200A  LDRH	R2, [SP, #10]
0x100A	0x494C    LDR	R1, [PC, #304]
0x100C	0x800A    STRH	R2, [R1, #0]
L___Lib_TFT__TFT_Write_Char_E704:
;__Lib_TFT.c, 3436 :: 		
0x100E	0xE083    B	L___Lib_TFT__TFT_Write_Char_E705
L___Lib_TFT__TFT_Write_Char_E692:
;__Lib_TFT.c, 3437 :: 		
; ptr start address is: 16 (R4)
0x1010	0x494B    LDR	R1, [PC, #300]
0x1012	0x8809    LDRH	R1, [R1, #0]
0x1014	0xF8AD100A  STRH	R1, [SP, #10]
;__Lib_TFT.c, 3438 :: 		
0x1018	0x2100    MOVS	R1, #0
0x101A	0xF88D1009  STRB	R1, [SP, #9]
; ptr end address is: 16 (R4)
0x101E	0x4620    MOV	R0, R4
L___Lib_TFT__TFT_Write_Char_E706:
; ptr start address is: 0 (R0)
0x1020	0x4943    LDR	R1, [PC, #268]
0x1022	0x880A    LDRH	R2, [R1, #0]
0x1024	0xF89D1009  LDRB	R1, [SP, #9]
0x1028	0x4291    CMP	R1, R2
0x102A	0xF0808070  BCS	L___Lib_TFT__TFT_Write_Char_E707
;__Lib_TFT.c, 3439 :: 		
0x102E	0x4943    LDR	R1, [PC, #268]
0x1030	0x8809    LDRH	R1, [R1, #0]
0x1032	0xF8AD1026  STRH	R1, [SP, #38]
;__Lib_TFT.c, 3440 :: 		
0x1036	0x2100    MOVS	R1, #0
0x1038	0xF88D100C  STRB	R1, [SP, #12]
;__Lib_TFT.c, 3441 :: 		
0x103C	0x2100    MOVS	R1, #0
0x103E	0xF88D1008  STRB	R1, [SP, #8]
; ptr end address is: 0 (R0)
0x1042	0x4604    MOV	R4, R0
L___Lib_TFT__TFT_Write_Char_E709:
; ptr start address is: 16 (R4)
0x1044	0xF89D2024  LDRB	R2, [SP, #36]
0x1048	0xF89D1008  LDRB	R1, [SP, #8]
0x104C	0x4291    CMP	R1, R2
0x104E	0xD252    BCS	L___Lib_TFT__TFT_Write_Char_E710
;__Lib_TFT.c, 3442 :: 		
0x1050	0xF89D100C  LDRB	R1, [SP, #12]
0x1054	0xBB59    CBNZ	R1, L___Lib_TFT__TFT_Write_Char_E980
;__Lib_TFT.c, 3443 :: 		
0x1056	0x9907    LDR	R1, [SP, #28]
0x1058	0x1C49    ADDS	R1, R1, #1
0x105A	0x9107    STR	R1, [SP, #28]
;__Lib_TFT.c, 3444 :: 		
0x105C	0x9A08    LDR	R2, [SP, #32]
0x105E	0x9905    LDR	R1, [SP, #20]
0x1060	0x4291    CMP	R1, R2
0x1062	0xD21B    BCS	L___Lib_TFT__TFT_Write_Char_E979
;__Lib_TFT.c, 3445 :: 		
0x1064	0x9A05    LDR	R2, [SP, #20]
0x1066	0x9907    LDR	R1, [SP, #28]
0x1068	0x4291    CMP	R1, R2
0x106A	0xD915    BLS	L___Lib_TFT__TFT_Write_Char_E978
; ptr end address is: 16 (R4)
;__Lib_TFT.c, 3446 :: 		
0x106C	0x2101    MOVS	R1, #1
0x106E	0x9107    STR	R1, [SP, #28]
;__Lib_TFT.c, 3447 :: 		
0x1070	0xAC05    ADD	R4, SP, #20
0x1072	0x4622    MOV	R2, R4
0x1074	0x9906    LDR	R1, [SP, #24]
0x1076	0x9804    LDR	R0, [SP, #16]
0x1078	0x4C2E    LDR	R4, [PC, #184]
0x107A	0x6824    LDR	R4, [R4, #0]
0x107C	0x47A0    BLX	R4
; ptr start address is: 16 (R4)
0x107E	0x4604    MOV	R4, R0
;__Lib_TFT.c, 3448 :: 		
0x1080	0x9906    LDR	R1, [SP, #24]
0x1082	0x9108    STR	R1, [SP, #32]
;__Lib_TFT.c, 3449 :: 		
0x1084	0x9A05    LDR	R2, [SP, #20]
0x1086	0x9904    LDR	R1, [SP, #16]
0x1088	0x1889    ADDS	R1, R1, R2
0x108A	0x9104    STR	R1, [SP, #16]
;__Lib_TFT.c, 3450 :: 		
0x108C	0x9A05    LDR	R2, [SP, #20]
0x108E	0x9906    LDR	R1, [SP, #24]
0x1090	0x1A89    SUB	R1, R1, R2
0x1092	0x9106    STR	R1, [SP, #24]
; ptr end address is: 16 (R4)
0x1094	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3451 :: 		
0x1096	0xE000    B	L___Lib_TFT__TFT_Write_Char_E714
L___Lib_TFT__TFT_Write_Char_E978:
;__Lib_TFT.c, 3445 :: 		
0x1098	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3451 :: 		
L___Lib_TFT__TFT_Write_Char_E714:
;__Lib_TFT.c, 3452 :: 		
; ptr start address is: 0 (R0)
; ptr end address is: 0 (R0)
0x109A	0xE000    B	L___Lib_TFT__TFT_Write_Char_E713
L___Lib_TFT__TFT_Write_Char_E979:
;__Lib_TFT.c, 3444 :: 		
0x109C	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3452 :: 		
L___Lib_TFT__TFT_Write_Char_E713:
;__Lib_TFT.c, 3453 :: 		
; ptr start address is: 0 (R0)
0x109E	0x7801    LDRB	R1, [R0, #0]
0x10A0	0xF88D1028  STRB	R1, [SP, #40]
0x10A4	0x1C40    ADDS	R0, R0, #1
;__Lib_TFT.c, 3454 :: 		
0x10A6	0x2101    MOVS	R1, #1
0x10A8	0xF88D100C  STRB	R1, [SP, #12]
; ptr end address is: 0 (R0)
;__Lib_TFT.c, 3455 :: 		
0x10AC	0xE000    B	L___Lib_TFT__TFT_Write_Char_E712
L___Lib_TFT__TFT_Write_Char_E980:
;__Lib_TFT.c, 3442 :: 		
0x10AE	0x4620    MOV	R0, R4
;__Lib_TFT.c, 3455 :: 		
L___Lib_TFT__TFT_Write_Char_E712:
;__Lib_TFT.c, 3457 :: 		
; ptr start address is: 0 (R0)
0x10B0	0xF89D200C  LDRB	R2, [SP, #12]
0x10B4	0xF89D1028  LDRB	R1, [SP, #40]
0x10B8	0x4011    ANDS	R1, R2
0x10BA	0xB2C9    UXTB	R1, R1
0x10BC	0xB151    CBZ	R1, L___Lib_TFT__TFT_Write_Char_E715
;__Lib_TFT.c, 3458 :: 		
0x10BE	0x4921    LDR	R1, [PC, #132]
0x10C0	0x8809    LDRH	R1, [R1, #0]
0x10C2	0x9001    STR	R0, [SP, #4]
0x10C4	0xB28A    UXTH	R2, R1
0x10C6	0xF8BD1026  LDRH	R1, [SP, #38]
0x10CA	0xF8BD000A  LDRH	R0, [SP, #10]
0x10CE	0xF7FFFB41  BL	_TFT_Dot+0
0x10D2	0x9801    LDR	R0, [SP, #4]
;__Lib_TFT.c, 3459 :: 		
L___Lib_TFT__TFT_Write_Char_E715:
;__Lib_TFT.c, 3461 :: 		
0x10D4	0xF8BD1026  LDRH	R1, [SP, #38]
0x10D8	0x1E49    SUBS	R1, R1, #1
0x10DA	0xF8AD1026  STRH	R1, [SP, #38]
;__Lib_TFT.c, 3462 :: 		
0x10DE	0xF89D100C  LDRB	R1, [SP, #12]
0x10E2	0x0049    LSLS	R1, R1, #1
0x10E4	0xF88D100C  STRB	R1, [SP, #12]
;__Lib_TFT.c, 3441 :: 		
0x10E8	0xF89D1008  LDRB	R1, [SP, #8]
0x10EC	0x1C49    ADDS	R1, R1, #1
0x10EE	0xF88D1008  STRB	R1, [SP, #8]
;__Lib_TFT.c, 3463 :: 		
0x10F2	0x4604    MOV	R4, R0
; ptr end address is: 0 (R0)
0x10F4	0xE7A6    B	L___Lib_TFT__TFT_Write_Char_E709
L___Lib_TFT__TFT_Write_Char_E710:
;__Lib_TFT.c, 3465 :: 		
; ptr start address is: 16 (R4)
0x10F6	0xF8BD100A  LDRH	R1, [SP, #10]
0x10FA	0x1C49    ADDS	R1, R1, #1
0x10FC	0xF8AD100A  STRH	R1, [SP, #10]
;__Lib_TFT.c, 3438 :: 		
0x1100	0xF89D1009  LDRB	R1, [SP, #9]
0x1104	0x1C49    ADDS	R1, R1, #1
0x1106	0xF88D1009  STRB	R1, [SP, #9]
;__Lib_TFT.c, 3466 :: 		
0x110A	0x4620    MOV	R0, R4
; ptr end address is: 16 (R4)
0x110C	0xE788    B	L___Lib_TFT__TFT_Write_Char_E706
L___Lib_TFT__TFT_Write_Char_E707:
;__Lib_TFT.c, 3469 :: 		
0x110E	0xF8BD1026  LDRH	R1, [SP, #38]
0x1112	0x1E4A    SUBS	R2, R1, #1
0x1114	0x4909    LDR	R1, [PC, #36]
0x1116	0x800A    STRH	R2, [R1, #0]
;__Lib_TFT.c, 3470 :: 		
L___Lib_TFT__TFT_Write_Char_E705:
;__Lib_TFT.c, 3471 :: 		
L_end__TFT_Write_Char_E:
0x1118	0xF8DDE000  LDR	LR, [SP, #0]
0x111C	0xB00B    ADD	SP, SP, #44
0x111E	0x4770    BX	LR
0x1120	0x009C2000  	__Lib_TFT__fontFirstChar+0
0x1124	0x009E2000  	__Lib_TFT__fontLastChar+0
0x1128	0x00BC2000  	__Lib_TFT_activeExtFont+0
0x112C	0x00C02000  	__Lib_TFT_headerBuffer+0
0x1130	0x00A82000  	__Lib_TFT__fontHeight+0
0x1134	0x00CC2000  	_TFT_Get_Ext_Data_Ptr+0
0x1138	0x00A42000  	__Lib_TFT_FontOrientation+0
0x113C	0x00A62000  	__Lib_TFT_y_cord+0
0x1140	0x00AA2000  	__Lib_TFT_x_cord+0
0x1144	0x00AC2000  	__Lib_TFT_FontColor+0
; end of __Lib_TFT__TFT_Write_Char_E
__Lib_TFT__TFT_getHeader:
;__Lib_TFT.c, 3325 :: 		
; count start address is: 4 (R1)
; offset start address is: 0 (R0)
0x06F0	0xB085    SUB	SP, SP, #20
0x06F2	0xF8CDE000  STR	LR, [SP, #0]
; count end address is: 4 (R1)
; offset end address is: 0 (R0)
; offset start address is: 0 (R0)
; count start address is: 4 (R1)
;__Lib_TFT.c, 3329 :: 		
; ptrH start address is: 20 (R5)
0x06F6	0x4D15    LDR	R5, [PC, #84]
; offset end address is: 0 (R0)
; ptrH end address is: 20 (R5)
; count end address is: 4 (R1)
0x06F8	0x4603    MOV	R3, R0
;__Lib_TFT.c, 3330 :: 		
L___Lib_TFT__TFT_getHeader682:
; ptrH start address is: 20 (R5)
; count start address is: 4 (R1)
; offset start address is: 12 (R3)
0x06FA	0x2900    CMP	R1, #0
0x06FC	0xD922    BLS	L___Lib_TFT__TFT_getHeader683
;__Lib_TFT.c, 3331 :: 		
0x06FE	0xAC04    ADD	R4, SP, #16
0x0700	0x9301    STR	R3, [SP, #4]
0x0702	0xF8AD1008  STRH	R1, [SP, #8]
0x0706	0x9503    STR	R5, [SP, #12]
0x0708	0x4622    MOV	R2, R4
0x070A	0x4618    MOV	R0, R3
0x070C	0x4C10    LDR	R4, [PC, #64]
0x070E	0x6824    LDR	R4, [R4, #0]
0x0710	0x47A0    BLX	R4
0x0712	0x9D03    LDR	R5, [SP, #12]
0x0714	0xF8BD1008  LDRH	R1, [SP, #8]
0x0718	0x9B01    LDR	R3, [SP, #4]
; ptr start address is: 16 (R4)
0x071A	0x4604    MOV	R4, R0
;__Lib_TFT.c, 3332 :: 		
; i start address is: 0 (R0)
0x071C	0x2000    MOVS	R0, #0
; ptrH end address is: 20 (R5)
; ptr end address is: 16 (R4)
; i end address is: 0 (R0)
; count end address is: 4 (R1)
; offset end address is: 12 (R3)
L___Lib_TFT__TFT_getHeader684:
; i start address is: 0 (R0)
; ptr start address is: 16 (R4)
; offset start address is: 12 (R3)
; count start address is: 4 (R1)
; ptrH start address is: 20 (R5)
0x071E	0xF8BD2010  LDRH	R2, [SP, #16]
0x0722	0x4290    CMP	R0, R2
0x0724	0xD206    BCS	L___Lib_TFT__TFT_getHeader685
;__Lib_TFT.c, 3333 :: 		
0x0726	0x7822    LDRB	R2, [R4, #0]
0x0728	0x702A    STRB	R2, [R5, #0]
;__Lib_TFT.c, 3334 :: 		
0x072A	0x1C6D    ADDS	R5, R5, #1
;__Lib_TFT.c, 3335 :: 		
0x072C	0x1C64    ADDS	R4, R4, #1
;__Lib_TFT.c, 3332 :: 		
0x072E	0x1C40    ADDS	R0, R0, #1
0x0730	0xB280    UXTH	R0, R0
;__Lib_TFT.c, 3336 :: 		
; ptr end address is: 16 (R4)
; i end address is: 0 (R0)
0x0732	0xE7F4    B	L___Lib_TFT__TFT_getHeader684
L___Lib_TFT__TFT_getHeader685:
;__Lib_TFT.c, 3337 :: 		
0x0734	0xF8BD2010  LDRH	R2, [SP, #16]
0x0738	0x1A89    SUB	R1, R1, R2
0x073A	0xB289    UXTH	R1, R1
;__Lib_TFT.c, 3338 :: 		
0x073C	0xF8BD2010  LDRH	R2, [SP, #16]
0x0740	0x189B    ADDS	R3, R3, R2
;__Lib_TFT.c, 3339 :: 		
; ptrH end address is: 20 (R5)
; count end address is: 4 (R1)
; offset end address is: 12 (R3)
0x0742	0xE7DA    B	L___Lib_TFT__TFT_getHeader682
L___Lib_TFT__TFT_getHeader683:
;__Lib_TFT.c, 3341 :: 		
L_end__TFT_getHeader:
0x0744	0xF8DDE000  LDR	LR, [SP, #0]
0x0748	0xB005    ADD	SP, SP, #20
0x074A	0x4770    BX	LR
0x074C	0x00C02000  	__Lib_TFT_headerBuffer+0
0x0750	0x00CC2000  	_TFT_Get_Ext_Data_Ptr+0
; end of __Lib_TFT__TFT_getHeader
_TFT_Dot:
;__Lib_TFT.c, 544 :: 		
; y start address is: 4 (R1)
; x start address is: 0 (R0)
0x0754	0xB082    SUB	SP, SP, #8
0x0756	0xF8CDE000  STR	LR, [SP, #0]
0x075A	0xF8AD2004  STRH	R2, [SP, #4]
0x075E	0xB20A    SXTH	R2, R1
0x0760	0xB201    SXTH	R1, R0
; y end address is: 4 (R1)
; x end address is: 0 (R0)
; x start address is: 4 (R1)
; y start address is: 8 (R2)
;__Lib_TFT.c, 546 :: 		
0x0762	0x2900    CMP	R1, #0
0x0764	0xDB04    BLT	L__TFT_Dot949
0x0766	0x4B17    LDR	R3, [PC, #92]
0x0768	0x881B    LDRH	R3, [R3, #0]
0x076A	0x4299    CMP	R1, R3
0x076C	0xD200    BCS	L__TFT_Dot948
0x076E	0xE000    B	L_TFT_Dot6
; x end address is: 4 (R1)
; y end address is: 8 (R2)
L__TFT_Dot949:
L__TFT_Dot948:
;__Lib_TFT.c, 547 :: 		
0x0770	0xE024    B	L_end_TFT_Dot
L_TFT_Dot6:
;__Lib_TFT.c, 548 :: 		
; y start address is: 8 (R2)
; x start address is: 4 (R1)
0x0772	0x2A00    CMP	R2, #0
0x0774	0xDB04    BLT	L__TFT_Dot951
0x0776	0x4B14    LDR	R3, [PC, #80]
0x0778	0x881B    LDRH	R3, [R3, #0]
0x077A	0x429A    CMP	R2, R3
0x077C	0xD200    BCS	L__TFT_Dot950
0x077E	0xE000    B	L_TFT_Dot9
; x end address is: 4 (R1)
; y end address is: 8 (R2)
L__TFT_Dot951:
L__TFT_Dot950:
;__Lib_TFT.c, 549 :: 		
0x0780	0xE01C    B	L_end_TFT_Dot
L_TFT_Dot9:
;__Lib_TFT.c, 551 :: 		
; y start address is: 8 (R2)
; x start address is: 4 (R1)
0x0782	0x2400    MOVS	R4, #0
0x0784	0xB264    SXTB	R4, R4
0x0786	0x4B11    LDR	R3, [PC, #68]
0x0788	0x601C    STR	R4, [R3, #0]
;__Lib_TFT.c, 552 :: 		
0x078A	0xF000F8D7  BL	__Lib_TFT_Is_SSD1963_Set+0
0x078E	0xB138    CBZ	R0, L_TFT_Dot10
;__Lib_TFT.c, 553 :: 		
0x0790	0xB293    UXTH	R3, R2
0x0792	0xB28A    UXTH	R2, R1
0x0794	0xB299    UXTH	R1, R3
; y end address is: 8 (R2)
0x0796	0xB290    UXTH	R0, R2
; x end address is: 4 (R1)
0x0798	0x4C0D    LDR	R4, [PC, #52]
0x079A	0x6824    LDR	R4, [R4, #0]
0x079C	0x47A0    BLX	R4
0x079E	0xE004    B	L_TFT_Dot11
L_TFT_Dot10:
;__Lib_TFT.c, 555 :: 		
; y start address is: 8 (R2)
; x start address is: 4 (R1)
0x07A0	0xB288    UXTH	R0, R1
; y end address is: 8 (R2)
0x07A2	0xB291    UXTH	R1, R2
; x end address is: 4 (R1)
0x07A4	0x4C0B    LDR	R4, [PC, #44]
0x07A6	0x6824    LDR	R4, [R4, #0]
0x07A8	0x47A0    BLX	R4
L_TFT_Dot11:
;__Lib_TFT.c, 556 :: 		
0x07AA	0xF8BD0004  LDRH	R0, [SP, #4]
0x07AE	0x4C0A    LDR	R4, [PC, #40]
0x07B0	0x6824    LDR	R4, [R4, #0]
0x07B2	0x47A0    BLX	R4
;__Lib_TFT.c, 557 :: 		
0x07B4	0x2401    MOVS	R4, #1
0x07B6	0xB264    SXTB	R4, R4
0x07B8	0x4B04    LDR	R3, [PC, #16]
0x07BA	0x601C    STR	R4, [R3, #0]
;__Lib_TFT.c, 558 :: 		
L_end_TFT_Dot:
0x07BC	0xF8DDE000  LDR	LR, [SP, #0]
0x07C0	0xB002    ADD	SP, SP, #8
0x07C2	0x4770    BX	LR
0x07C4	0x00982000  	_TFT_DISP_WIDTH+0
0x07C8	0x009A2000  	_TFT_DISP_HEIGHT+0
0x07CC	0x01BC4223  	TFT_CS+0
0x07D0	0x00B02000  	_TFT_SSD1963_Set_Address_Ptr+0
0x07D4	0x00B42000  	_TFT_Set_Address_Ptr+0
0x07D8	0x00B82000  	_TFT_Write_Data_Ptr+0
; end of _TFT_Dot
__Lib_TFT__TFT_Write_Char:
;__Lib_TFT.c, 1149 :: 		
; ch start address is: 0 (R0)
0x1164	0xB086    SUB	SP, SP, #24
0x1166	0xF8CDE000  STR	LR, [SP, #0]
0x116A	0xB287    UXTH	R7, R0
; ch end address is: 0 (R0)
; ch start address is: 28 (R7)
;__Lib_TFT.c, 1151 :: 		
;__Lib_TFT.c, 1153 :: 		
; x start address is: 20 (R5)
0x116C	0xF2400500  MOVW	R5, #0
;__Lib_TFT.c, 1154 :: 		
; temp start address is: 24 (R6)
0x1170	0x2600    MOVS	R6, #0
;__Lib_TFT.c, 1160 :: 		
0x1172	0x4972    LDR	R1, [PC, #456]
0x1174	0x7809    LDRB	R1, [R1, #0]
0x1176	0xB949    CBNZ	R1, L___Lib_TFT__TFT_Write_Char162
;__Lib_TFT.c, 1161 :: 		
0x1178	0x4971    LDR	R1, [PC, #452]
0x117A	0x2200    MOVS	R2, #0
0x117C	0x4608    MOV	R0, R1
0x117E	0xF2400100  MOVW	R1, #0
0x1182	0xF7FFF9ED  BL	_TFT_Set_Font+0
;__Lib_TFT.c, 1162 :: 		
0x1186	0x2201    MOVS	R2, #1
0x1188	0x496C    LDR	R1, [PC, #432]
0x118A	0x700A    STRB	R2, [R1, #0]
;__Lib_TFT.c, 1163 :: 		
L___Lib_TFT__TFT_Write_Char162:
;__Lib_TFT.c, 1165 :: 		
0x118C	0x496D    LDR	R1, [PC, #436]
0x118E	0x8809    LDRH	R1, [R1, #0]
0x1190	0x428F    CMP	R7, R1
0x1192	0xD200    BCS	L___Lib_TFT__TFT_Write_Char163
; ch end address is: 28 (R7)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
;__Lib_TFT.c, 1166 :: 		
0x1194	0xE0CE    B	L_end__TFT_Write_Char
L___Lib_TFT__TFT_Write_Char163:
;__Lib_TFT.c, 1167 :: 		
; x start address is: 20 (R5)
; temp start address is: 24 (R6)
; ch start address is: 28 (R7)
0x1196	0x496C    LDR	R1, [PC, #432]
0x1198	0x8809    LDRH	R1, [R1, #0]
0x119A	0x428F    CMP	R7, R1
0x119C	0xD900    BLS	L___Lib_TFT__TFT_Write_Char164
; ch end address is: 28 (R7)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
;__Lib_TFT.c, 1168 :: 		
0x119E	0xE0C9    B	L_end__TFT_Write_Char
L___Lib_TFT__TFT_Write_Char164:
;__Lib_TFT.c, 1171 :: 		
; x start address is: 20 (R5)
; temp start address is: 24 (R6)
; ch start address is: 28 (R7)
0x11A0	0x4968    LDR	R1, [PC, #416]
0x11A2	0x8809    LDRH	R1, [R1, #0]
0x11A4	0x1A79    SUB	R1, R7, R1
0x11A6	0xB289    UXTH	R1, R1
; ch end address is: 28 (R7)
0x11A8	0x008A    LSLS	R2, R1, #2
0x11AA	0xB292    UXTH	R2, R2
;__Lib_TFT.c, 1172 :: 		
0x11AC	0x4C67    LDR	R4, [PC, #412]
0x11AE	0x6821    LDR	R1, [R4, #0]
0x11B0	0x3108    ADDS	R1, #8
0x11B2	0x188B    ADDS	R3, R1, R2
;__Lib_TFT.c, 1173 :: 		
0x11B4	0x7818    LDRB	R0, [R3, #0]
; chWidth start address is: 0 (R0)
;__Lib_TFT.c, 1175 :: 		
0x11B6	0x1C59    ADDS	R1, R3, #1
0x11B8	0x7809    LDRB	R1, [R1, #0]
0x11BA	0xB2CA    UXTB	R2, R1
0x11BC	0x1C99    ADDS	R1, R3, #2
0x11BE	0x7809    LDRB	R1, [R1, #0]
0x11C0	0x0209    LSLS	R1, R1, #8
0x11C2	0x1852    ADDS	R2, R2, R1
0x11C4	0x1CD9    ADDS	R1, R3, #3
0x11C6	0x7809    LDRB	R1, [R1, #0]
0x11C8	0x0409    LSLS	R1, R1, #16
0x11CA	0x1852    ADDS	R2, R2, R1
;__Lib_TFT.c, 1177 :: 		
0x11CC	0x4621    MOV	R1, R4
0x11CE	0x6809    LDR	R1, [R1, #0]
0x11D0	0x188C    ADDS	R4, R1, R2
; pChBitMap start address is: 16 (R4)
;__Lib_TFT.c, 1179 :: 		
0x11D2	0x495F    LDR	R1, [PC, #380]
0x11D4	0x7809    LDRB	R1, [R1, #0]
0x11D6	0xB121    CBZ	R1, L___Lib_TFT__TFT_Write_Char969
0x11D8	0x495D    LDR	R1, [PC, #372]
0x11DA	0x7809    LDRB	R1, [R1, #0]
0x11DC	0x2902    CMP	R1, #2
0x11DE	0xD000    BEQ	L___Lib_TFT__TFT_Write_Char968
0x11E0	0xE057    B	L___Lib_TFT__TFT_Write_Char167
L___Lib_TFT__TFT_Write_Char969:
L___Lib_TFT__TFT_Write_Char968:
;__Lib_TFT.c, 1180 :: 		
0x11E2	0x495C    LDR	R1, [PC, #368]
; y start address is: 12 (R3)
0x11E4	0x880B    LDRH	R3, [R1, #0]
;__Lib_TFT.c, 1181 :: 		
; yCnt start address is: 8 (R2)
0x11E6	0x2200    MOVS	R2, #0
; pChBitMap end address is: 16 (R4)
; chWidth end address is: 0 (R0)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
; y end address is: 12 (R3)
; yCnt end address is: 8 (R2)
0x11E8	0x46A0    MOV	R8, R4
0x11EA	0xB2AC    UXTH	R4, R5
L___Lib_TFT__TFT_Write_Char168:
; yCnt start address is: 8 (R2)
; y start address is: 12 (R3)
; pChBitMap start address is: 32 (R8)
; chWidth start address is: 0 (R0)
; temp start address is: 24 (R6)
; x start address is: 16 (R4)
0x11EC	0x495A    LDR	R1, [PC, #360]
0x11EE	0x8809    LDRH	R1, [R1, #0]
0x11F0	0x428A    CMP	R2, R1
0x11F2	0xD244    BCS	L___Lib_TFT__TFT_Write_Char169
; x end address is: 16 (R4)
;__Lib_TFT.c, 1182 :: 		
0x11F4	0x4959    LDR	R1, [PC, #356]
; x start address is: 20 (R5)
0x11F6	0x880D    LDRH	R5, [R1, #0]
;__Lib_TFT.c, 1183 :: 		
; mask start address is: 28 (R7)
0x11F8	0x2700    MOVS	R7, #0
;__Lib_TFT.c, 1184 :: 		
; xCnt start address is: 16 (R4)
0x11FA	0x2400    MOVS	R4, #0
; chWidth end address is: 0 (R0)
; pChBitMap end address is: 32 (R8)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
; mask end address is: 28 (R7)
; xCnt end address is: 16 (R4)
; y end address is: 12 (R3)
; yCnt end address is: 8 (R2)
L___Lib_TFT__TFT_Write_Char171:
; xCnt start address is: 16 (R4)
; mask start address is: 28 (R7)
; x start address is: 20 (R5)
; temp start address is: 24 (R6)
; chWidth start address is: 0 (R0)
; pChBitMap start address is: 32 (R8)
; y start address is: 12 (R3)
; yCnt start address is: 8 (R2)
0x11FC	0x4284    CMP	R4, R0
0x11FE	0xD238    BCS	L___Lib_TFT__TFT_Write_Char172
;__Lib_TFT.c, 1185 :: 		
0x1200	0xB92F    CBNZ	R7, L___Lib_TFT__TFT_Write_Char970
; temp end address is: 24 (R6)
; mask end address is: 28 (R7)
;__Lib_TFT.c, 1186 :: 		
0x1202	0xF8986000  LDRB	R6, [R8, #0]
; temp start address is: 24 (R6)
0x1206	0xF1080801  ADD	R8, R8, #1
;__Lib_TFT.c, 1187 :: 		
; mask start address is: 28 (R7)
0x120A	0x2701    MOVS	R7, #1
; pChBitMap end address is: 32 (R8)
; temp end address is: 24 (R6)
; mask end address is: 28 (R7)
;__Lib_TFT.c, 1188 :: 		
0x120C	0xE7FF    B	L___Lib_TFT__TFT_Write_Char174
L___Lib_TFT__TFT_Write_Char970:
;__Lib_TFT.c, 1185 :: 		
;__Lib_TFT.c, 1188 :: 		
L___Lib_TFT__TFT_Write_Char174:
;__Lib_TFT.c, 1190 :: 		
; mask start address is: 28 (R7)
; pChBitMap start address is: 32 (R8)
; temp start address is: 24 (R6)
0x120E	0xEA060107  AND	R1, R6, R7, LSL #0
0x1212	0xB2C9    UXTB	R1, R1
0x1214	0xB331    CBZ	R1, L___Lib_TFT__TFT_Write_Char175
;__Lib_TFT.c, 1191 :: 		
0x1216	0x4952    LDR	R1, [PC, #328]
0x1218	0x8809    LDRH	R1, [R1, #0]
0x121A	0xF88D6004  STRB	R6, [SP, #4]
0x121E	0xF8CD8008  STR	R8, [SP, #8]
0x1222	0xF88D700C  STRB	R7, [SP, #12]
0x1226	0xF88D200D  STRB	R2, [SP, #13]
0x122A	0xF8AD300E  STRH	R3, [SP, #14]
0x122E	0xF88D0010  STRB	R0, [SP, #16]
0x1232	0xF8AD5012  STRH	R5, [SP, #18]
0x1236	0xF88D4014  STRB	R4, [SP, #20]
0x123A	0xB28A    UXTH	R2, R1
0x123C	0xB219    SXTH	R1, R3
0x123E	0xB228    SXTH	R0, R5
0x1240	0xF7FFFA88  BL	_TFT_Dot+0
0x1244	0xF89D4014  LDRB	R4, [SP, #20]
0x1248	0xF8BD5012  LDRH	R5, [SP, #18]
0x124C	0xF89D0010  LDRB	R0, [SP, #16]
0x1250	0xF8BD300E  LDRH	R3, [SP, #14]
0x1254	0xF89D200D  LDRB	R2, [SP, #13]
0x1258	0xF89D700C  LDRB	R7, [SP, #12]
0x125C	0xF8DD8008  LDR	R8, [SP, #8]
0x1260	0xF89D6004  LDRB	R6, [SP, #4]
;__Lib_TFT.c, 1192 :: 		
L___Lib_TFT__TFT_Write_Char175:
;__Lib_TFT.c, 1194 :: 		
0x1264	0x1C6D    ADDS	R5, R5, #1
0x1266	0xB2AD    UXTH	R5, R5
;__Lib_TFT.c, 1195 :: 		
0x1268	0x0079    LSLS	R1, R7, #1
0x126A	0xB2CF    UXTB	R7, R1
;__Lib_TFT.c, 1184 :: 		
0x126C	0x1C64    ADDS	R4, R4, #1
0x126E	0xB2E4    UXTB	R4, R4
;__Lib_TFT.c, 1196 :: 		
; mask end address is: 28 (R7)
; xCnt end address is: 16 (R4)
0x1270	0xE7C4    B	L___Lib_TFT__TFT_Write_Char171
L___Lib_TFT__TFT_Write_Char172:
;__Lib_TFT.c, 1197 :: 		
0x1272	0x1C5B    ADDS	R3, R3, #1
0x1274	0xB29B    UXTH	R3, R3
;__Lib_TFT.c, 1181 :: 		
0x1276	0x1C52    ADDS	R2, R2, #1
0x1278	0xB2D2    UXTB	R2, R2
;__Lib_TFT.c, 1198 :: 		
0x127A	0xB2AC    UXTH	R4, R5
; chWidth end address is: 0 (R0)
; pChBitMap end address is: 32 (R8)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
; yCnt end address is: 8 (R2)
0x127C	0xE7B6    B	L___Lib_TFT__TFT_Write_Char168
L___Lib_TFT__TFT_Write_Char169:
;__Lib_TFT.c, 1200 :: 		
; x start address is: 16 (R4)
0x127E	0x4934    LDR	R1, [PC, #208]
0x1280	0x7809    LDRB	R1, [R1, #0]
0x1282	0xB919    CBNZ	R1, L___Lib_TFT__TFT_Write_Char176
; y end address is: 12 (R3)
;__Lib_TFT.c, 1201 :: 		
0x1284	0x1C62    ADDS	R2, R4, #1
; x end address is: 16 (R4)
0x1286	0x4935    LDR	R1, [PC, #212]
0x1288	0x800A    STRH	R2, [R1, #0]
0x128A	0xE001    B	L___Lib_TFT__TFT_Write_Char177
L___Lib_TFT__TFT_Write_Char176:
;__Lib_TFT.c, 1203 :: 		
; y start address is: 12 (R3)
0x128C	0x4931    LDR	R1, [PC, #196]
0x128E	0x800B    STRH	R3, [R1, #0]
; y end address is: 12 (R3)
L___Lib_TFT__TFT_Write_Char177:
;__Lib_TFT.c, 1204 :: 		
0x1290	0xE050    B	L___Lib_TFT__TFT_Write_Char178
L___Lib_TFT__TFT_Write_Char167:
;__Lib_TFT.c, 1205 :: 		
; x start address is: 20 (R5)
; temp start address is: 24 (R6)
; chWidth start address is: 0 (R0)
; pChBitMap start address is: 16 (R4)
0x1292	0x4932    LDR	R1, [PC, #200]
; y start address is: 12 (R3)
0x1294	0x880B    LDRH	R3, [R1, #0]
;__Lib_TFT.c, 1206 :: 		
; yCnt start address is: 8 (R2)
0x1296	0x2200    MOVS	R2, #0
; pChBitMap end address is: 16 (R4)
; chWidth end address is: 0 (R0)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
; y end address is: 12 (R3)
; yCnt end address is: 8 (R2)
L___Lib_TFT__TFT_Write_Char179:
; yCnt start address is: 8 (R2)
; y start address is: 12 (R3)
; pChBitMap start address is: 16 (R4)
; chWidth start address is: 0 (R0)
; temp start address is: 24 (R6)
; x start address is: 20 (R5)
0x1298	0x492F    LDR	R1, [PC, #188]
0x129A	0x8809    LDRH	R1, [R1, #0]
0x129C	0x428A    CMP	R2, R1
0x129E	0xD246    BCS	L___Lib_TFT__TFT_Write_Char180
; x end address is: 20 (R5)
;__Lib_TFT.c, 1207 :: 		
0x12A0	0x492C    LDR	R1, [PC, #176]
; x start address is: 20 (R5)
0x12A2	0x880D    LDRH	R5, [R1, #0]
;__Lib_TFT.c, 1208 :: 		
; mask start address is: 28 (R7)
0x12A4	0x2700    MOVS	R7, #0
;__Lib_TFT.c, 1209 :: 		
; xCnt start address is: 4 (R1)
0x12A6	0x2100    MOVS	R1, #0
; pChBitMap end address is: 16 (R4)
; xCnt end address is: 4 (R1)
; chWidth end address is: 0 (R0)
; temp end address is: 24 (R6)
; x end address is: 20 (R5)
; mask end address is: 28 (R7)
; y end address is: 12 (R3)
; yCnt end address is: 8 (R2)
0x12A8	0x46A0    MOV	R8, R4
0x12AA	0xB2CC    UXTB	R4, R1
L___Lib_TFT__TFT_Write_Char182:
; xCnt start address is: 16 (R4)
; mask start address is: 28 (R7)
; x start address is: 20 (R5)
; temp start address is: 24 (R6)
; chWidth start address is: 0 (R0)
; pChBitMap start address is: 32 (R8)
; y start address is: 12 (R3)
; yCnt start address is: 8 (R2)
0x12AC	0x4284    CMP	R4, R0
0x12AE	0xD238    BCS	L___Lib_TFT__TFT_Write_Char183
;__Lib_TFT.c, 1210 :: 		
0x12B0	0xB92F    CBNZ	R7, L___Lib_TFT__TFT_Write_Char971
; temp end address is: 24 (R6)
; mask end address is: 28 (R7)
;__Lib_TFT.c, 1211 :: 		
0x12B2	0xF8986000  LDRB	R6, [R8, #0]
; temp start address is: 24 (R6)
0x12B6	0xF1080801  ADD	R8, R8, #1
;__Lib_TFT.c, 1212 :: 		
; mask start address is: 28 (R7)
0x12BA	0x2701    MOVS	R7, #1
; pChBitMap end address is: 32 (R8)
; temp end address is: 24 (R6)
; mask end address is: 28 (R7)
;__Lib_TFT.c, 1213 :: 		
0x12BC	0xE7FF    B	L___Lib_TFT__TFT_Write_Char185
L___Lib_TFT__TFT_Write_Char971:
;__Lib_TFT.c, 1210 :: 		
;__Lib_TFT.c, 1213 :: 		
L___Lib_TFT__TFT_Write_Char185:
;__Lib_TFT.c, 1215 :: 		
; mask start address is: 28 (R7)
; pChBitMap start address is: 32 (R8)
; temp start address is: 24 (R6)
0x12BE	0xEA060107  AND	R1, R6, R7, LSL #0
0x12C2	0xB2C9    UXTB	R1, R1
0x12C4	0xB331    CBZ	R1, L___Lib_TFT__TFT_Write_Char186
;__Lib_TFT.c, 1216 :: 		
0x12C6	0x4926    LDR	R1, [PC, #152]
0x12C8	0x8809    LDRH	R1, [R1, #0]
0x12CA	0xF88D6004  STRB	R6, [SP, #4]
0x12CE	0xF8CD8008  STR	R8, [SP, #8]
0x12D2	0xF88D700C  STRB	R7, [SP, #12]
0x12D6	0xF88D200D  STRB	R2, [SP, #13]
0x12DA	0xF8AD300E  STRH	R3, [SP, #14]
0x12DE	0xF88D0010  STRB	R0, [SP, #16]
0x12E2	0xF8AD5012  STRH	R5, [SP, #18]
0x12E6	0xF88D4014  STRB	R4, [SP, #20]
0x12EA	0xB28A    UXTH	R2, R1
0x12EC	0xB229    SXTH	R1, R5
0x12EE	0xB218    SXTH	R0, R3
0x12F0	0xF7FFFA30  BL	_TFT_Dot+0
0x12F4	0xF89D4014  LDRB	R4, [SP, #20]
0x12F8	0xF8BD5012  LDRH	R5, [SP, #18]
0x12FC	0xF89D0010  LDRB	R0, [SP, #16]
0x1300	0xF8BD300E  LDRH	R3, [SP, #14]
0x1304	0xF89D200D  LDRB	R2, [SP, #13]
0x1308	0xF89D700C  LDRB	R7, [SP, #12]
0x130C	0xF8DD8008  LDR	R8, [SP, #8]
0x1310	0xF89D6004  LDRB	R6, [SP, #4]
;__Lib_TFT.c, 1217 :: 		
L___Lib_TFT__TFT_Write_Char186:
;__Lib_TFT.c, 1219 :: 		
0x1314	0x1E6D    SUBS	R5, R5, #1
0x1316	0xB2AD    UXTH	R5, R5
;__Lib_TFT.c, 1220 :: 		
0x1318	0x0079    LSLS	R1, R7, #1
0x131A	0xB2CF    UXTB	R7, R1
;__Lib_TFT.c, 1209 :: 		
0x131C	0x1C64    ADDS	R4, R4, #1
0x131E	0xB2E4    UXTB	R4, R4
;__Lib_TFT.c, 1221 :: 		
; mask end address is: 28 (R7)
; xCnt end address is: 16 (R4)
0x1320	0xE7C4    B	L___Lib_TFT__TFT_Write_Char182
L___Lib_TFT__TFT_Write_Char183:
;__Lib_TFT.c, 1223 :: 		
0x1322	0x1C5B    ADDS	R3, R3, #1
0x1324	0xB29B    UXTH	R3, R3
;__Lib_TFT.c, 1206 :: 		
0x1326	0x1C52    ADDS	R2, R2, #1
0x1328	0xB2D2    UXTB	R2, R2
;__Lib_TFT.c, 1224 :: 		
; chWidth end address is: 0 (R0)
; pChBitMap end address is: 32 (R8)
; temp end address is: 24 (R6)
; y end address is: 12 (R3)
; yCnt end address is: 8 (R2)
0x132A	0x4644    MOV	R4, R8
0x132C	0xE7B4    B	L___Lib_TFT__TFT_Write_Char179
L___Lib_TFT__TFT_Write_Char180:
;__Lib_TFT.c, 1227 :: 		
0x132E	0x1E6A    SUBS	R2, R5, #1
; x end address is: 20 (R5)
0x1330	0x4908    LDR	R1, [PC, #32]
0x1332	0x800A    STRH	R2, [R1, #0]
;__Lib_TFT.c, 1228 :: 		
L___Lib_TFT__TFT_Write_Char178:
;__Lib_TFT.c, 1229 :: 		
L_end__TFT_Write_Char:
0x1334	0xF8DDE000  LDR	LR, [SP, #0]
0x1338	0xB006    ADD	SP, SP, #24
0x133A	0x4770    BX	LR
0x133C	0x00012000  	__Lib_TFT_FontInitialized+0
0x1340	0x31BC0000  	_TFT_defaultFont+0
0x1344	0x009C2000  	__Lib_TFT__fontFirstChar+0
0x1348	0x009E2000  	__Lib_TFT__fontLastChar+0
0x134C	0x00A02000  	__Lib_TFT__font+0
0x1350	0x00A42000  	__Lib_TFT_FontOrientation+0
0x1354	0x00A62000  	__Lib_TFT_y_cord+0
0x1358	0x00A82000  	__Lib_TFT__fontHeight+0
0x135C	0x00AA2000  	__Lib_TFT_x_cord+0
0x1360	0x00AC2000  	__Lib_TFT_FontColor+0
; end of __Lib_TFT__TFT_Write_Char
_TFT_Set_Font:
;__Lib_TFT.c, 169 :: 		
; font_orientation start address is: 8 (R2)
; font_color start address is: 4 (R1)
; activeFont start address is: 0 (R0)
0x0560	0xB081    SUB	SP, SP, #4
; font_orientation end address is: 8 (R2)
; font_color end address is: 4 (R1)
; activeFont end address is: 0 (R0)
; activeFont start address is: 0 (R0)
; font_color start address is: 4 (R1)
; font_orientation start address is: 8 (R2)
;__Lib_TFT.c, 170 :: 		
0x0562	0x4B12    LDR	R3, [PC, #72]
0x0564	0x6018    STR	R0, [R3, #0]
;__Lib_TFT.c, 171 :: 		
0x0566	0x1C83    ADDS	R3, R0, #2
0x0568	0x781C    LDRB	R4, [R3, #0]
0x056A	0x1CC3    ADDS	R3, R0, #3
0x056C	0x781B    LDRB	R3, [R3, #0]
0x056E	0x021B    LSLS	R3, R3, #8
0x0570	0xB29B    UXTH	R3, R3
0x0572	0x18E4    ADDS	R4, R4, R3
0x0574	0x4B0E    LDR	R3, [PC, #56]
0x0576	0x801C    STRH	R4, [R3, #0]
;__Lib_TFT.c, 172 :: 		
0x0578	0x1D03    ADDS	R3, R0, #4
0x057A	0x781C    LDRB	R4, [R3, #0]
0x057C	0x1D43    ADDS	R3, R0, #5
0x057E	0x781B    LDRB	R3, [R3, #0]
0x0580	0x021B    LSLS	R3, R3, #8
0x0582	0xB29B    UXTH	R3, R3
0x0584	0x18E4    ADDS	R4, R4, R3
0x0586	0x4B0B    LDR	R3, [PC, #44]
0x0588	0x801C    STRH	R4, [R3, #0]
;__Lib_TFT.c, 173 :: 		
0x058A	0x1D83    ADDS	R3, R0, #6
; activeFont end address is: 0 (R0)
0x058C	0x781C    LDRB	R4, [R3, #0]
0x058E	0x4B0A    LDR	R3, [PC, #40]
0x0590	0x801C    STRH	R4, [R3, #0]
;__Lib_TFT.c, 175 :: 		
0x0592	0x4B0A    LDR	R3, [PC, #40]
0x0594	0x8019    STRH	R1, [R3, #0]
; font_color end address is: 4 (R1)
;__Lib_TFT.c, 176 :: 		
0x0596	0x4B0A    LDR	R3, [PC, #40]
0x0598	0x701A    STRB	R2, [R3, #0]
; font_orientation end address is: 8 (R2)
;__Lib_TFT.c, 177 :: 		
0x059A	0x2401    MOVS	R4, #1
0x059C	0x4B09    LDR	R3, [PC, #36]
0x059E	0x701C    STRB	R4, [R3, #0]
;__Lib_TFT.c, 178 :: 		
0x05A0	0x2400    MOVS	R4, #0
0x05A2	0x4B09    LDR	R3, [PC, #36]
0x05A4	0x701C    STRB	R4, [R3, #0]
;__Lib_TFT.c, 179 :: 		
L_end_TFT_Set_Font:
0x05A6	0xB001    ADD	SP, SP, #4
0x05A8	0x4770    BX	LR
0x05AA	0xBF00    NOP
0x05AC	0x00A02000  	__Lib_TFT__font+0
0x05B0	0x009C2000  	__Lib_TFT__fontFirstChar+0
0x05B4	0x009E2000  	__Lib_TFT__fontLastChar+0
0x05B8	0x00A82000  	__Lib_TFT__fontHeight+0
0x05BC	0x00AC2000  	__Lib_TFT_FontColor+0
0x05C0	0x00A42000  	__Lib_TFT_FontOrientation+0
0x05C4	0x00012000  	__Lib_TFT_FontInitialized+0
0x05C8	0x008B2000  	_ExternalFontSet+0
; end of _TFT_Set_Font
_listen_for_id:
;Reciver.c, 86 :: 		void listen_for_id() {
0x2D78	0xB081    SUB	SP, SP, #4
0x2D7A	0xF8CDE000  STR	LR, [SP, #0]
;Reciver.c, 87 :: 		brodcast_id_request();
0x2D7E	0xF7FFFB2B  BL	_brodcast_id_request+0
;Reciver.c, 88 :: 		delay_ms(100);
0x2D82	0xF644777F  MOVW	R7, #20351
0x2D86	0xF2C00712  MOVT	R7, #18
L_listen_for_id0:
0x2D8A	0x1E7F    SUBS	R7, R7, #1
0x2D8C	0xD1FD    BNE	L_listen_for_id0
0x2D8E	0xBF00    NOP
0x2D90	0xBF00    NOP
0x2D92	0xBF00    NOP
0x2D94	0xBF00    NOP
0x2D96	0xBF00    NOP
;Reciver.c, 90 :: 		if (Debounce_INT() == 0) {
0x2D98	0xF7FFFCB0  BL	_Debounce_INT+0
0x2D9C	0xB988    CBNZ	R0, L_listen_for_id2
;Reciver.c, 91 :: 		temp1 = read_ZIGBEE_short(INTSTAT); // Read and flush register INTSTAT
0x2D9E	0x2031    MOVS	R0, #49
0x2DA0	0xB240    SXTB	R0, R0
0x2DA2	0xF7FDFD3B  BL	_read_ZIGBEE_short+0
0x2DA6	0x4909    LDR	R1, [PC, #36]
0x2DA8	0x7008    STRB	R0, [R1, #0]
;Reciver.c, 92 :: 		read_RX_FIFO();                     // Read receive data
0x2DAA	0xF7FFFC37  BL	_read_RX_FIFO+0
;Reciver.c, 94 :: 		if (DATA_RX[0] == 0x70) { //0xff is controler to senzor message id, which is send only for senzort to get id
0x2DAE	0x4808    LDR	R0, [PC, #32]
0x2DB0	0xF9900000  LDRSB	R0, [R0, #0]
0x2DB4	0x2870    CMP	R0, #112
0x2DB6	0xD104    BNE	L_listen_for_id3
;Reciver.c, 95 :: 		deviceIdByte = DATA_RX[2];
0x2DB8	0x4806    LDR	R0, [PC, #24]
0x2DBA	0xF9901000  LDRSB	R1, [R0, #0]
0x2DBE	0x4806    LDR	R0, [PC, #24]
0x2DC0	0x7001    STRB	R1, [R0, #0]
;Reciver.c, 96 :: 		}
L_listen_for_id3:
;Reciver.c, 97 :: 		}
L_listen_for_id2:
;Reciver.c, 98 :: 		}
L_end_listen_for_id:
0x2DC2	0xF8DDE000  LDR	LR, [SP, #0]
0x2DC6	0xB001    ADD	SP, SP, #4
0x2DC8	0x4770    BX	LR
0x2DCA	0xBF00    NOP
0x2DCC	0x008A2000  	_temp1+0
0x2DD0	0x00702000  	_DATA_RX+0
0x2DD4	0x00722000  	_DATA_RX+2
0x2DD8	0x00002000  	_deviceIdByte+0
; end of _listen_for_id
_brodcast_id_request:
;Reciver.c, 100 :: 		void brodcast_id_request() {
0x23D8	0xB081    SUB	SP, SP, #4
0x23DA	0xF8CDE000  STR	LR, [SP, #0]
;Reciver.c, 103 :: 		DATA_TX[0] = 0x40;
0x23DE	0x2140    MOVS	R1, #64
0x23E0	0xB249    SXTB	R1, R1
0x23E2	0x480C    LDR	R0, [PC, #48]
0x23E4	0x7001    STRB	R1, [R0, #0]
;Reciver.c, 104 :: 		DATA_TX[1] = 0;
0x23E6	0x2100    MOVS	R1, #0
0x23E8	0xB249    SXTB	R1, R1
0x23EA	0x480B    LDR	R0, [PC, #44]
0x23EC	0x7001    STRB	R1, [R0, #0]
;Reciver.c, 105 :: 		DATA_TX[2] = deviceIdByte;
0x23EE	0x480B    LDR	R0, [PC, #44]
0x23F0	0x7801    LDRB	R1, [R0, #0]
0x23F2	0x480B    LDR	R0, [PC, #44]
0x23F4	0x7001    STRB	R1, [R0, #0]
;Reciver.c, 107 :: 		if (life_notifyer_counter > 50) {
0x23F6	0x480B    LDR	R0, [PC, #44]
0x23F8	0xF9B00000  LDRSH	R0, [R0, #0]
0x23FC	0x2832    CMP	R0, #50
0x23FE	0xDD03    BLE	L_brodcast_id_request4
;Reciver.c, 108 :: 		life_notifyer_counter = 0;
0x2400	0x2100    MOVS	R1, #0
0x2402	0xB209    SXTH	R1, R1
0x2404	0x4807    LDR	R0, [PC, #28]
0x2406	0x8001    STRH	R1, [R0, #0]
;Reciver.c, 109 :: 		}
L_brodcast_id_request4:
;Reciver.c, 112 :: 		write_TX_normal_FIFO();          // Transmiting
0x2408	0xF7FEFFAC  BL	_write_TX_normal_FIFO+0
;Reciver.c, 113 :: 		}
L_end_brodcast_id_request:
0x240C	0xF8DDE000  LDR	LR, [SP, #0]
0x2410	0xB001    ADD	SP, SP, #4
0x2412	0x4770    BX	LR
0x2414	0x005A2000  	_DATA_TX+0
0x2418	0x005B2000  	_DATA_TX+1
0x241C	0x00002000  	_deviceIdByte+0
0x2420	0x005C2000  	_DATA_TX+2
0x2424	0x00022000  	_life_notifyer_counter+0
; end of _brodcast_id_request
_write_TX_normal_FIFO:
;ReadWrite_Routines.c, 123 :: 		void write_TX_normal_FIFO() {
0x1364	0xB081    SUB	SP, SP, #4
0x1366	0xF8CDE000  STR	LR, [SP, #0]
;ReadWrite_Routines.c, 124 :: 		int i = 0;
;ReadWrite_Routines.c, 126 :: 		data_TX_normal_FIFO[0]  = HEADER_LENGHT;
0x136A	0x210B    MOVS	R1, #11
0x136C	0xB249    SXTB	R1, R1
0x136E	0x4833    LDR	R0, [PC, #204]
0x1370	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 127 :: 		data_TX_normal_FIFO[1]  = HEADER_LENGHT + DATA_LENGHT;
0x1372	0x210E    MOVS	R1, #14
0x1374	0xB249    SXTB	R1, R1
0x1376	0x4832    LDR	R0, [PC, #200]
0x1378	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 128 :: 		data_TX_normal_FIFO[2]  = 0x01;                        // control frame
0x137A	0x2101    MOVS	R1, #1
0x137C	0xB249    SXTB	R1, R1
0x137E	0x4831    LDR	R0, [PC, #196]
0x1380	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 129 :: 		data_TX_normal_FIFO[3]  = 0x88;
0x1382	0x2188    MOVS	R1, #136
0x1384	0xB249    SXTB	R1, R1
0x1386	0x4830    LDR	R0, [PC, #192]
0x1388	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 130 :: 		data_TX_normal_FIFO[4]  = SEQ_NUMBER;                  // sequence number
0x138A	0x4830    LDR	R0, [PC, #192]
0x138C	0xF9901000  LDRSB	R1, [R0, #0]
0x1390	0x482F    LDR	R0, [PC, #188]
0x1392	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 131 :: 		data_TX_normal_FIFO[5]  = PAN_ID_2[1];                 // destinatoin pan
0x1394	0x482F    LDR	R0, [PC, #188]
0x1396	0xF9901000  LDRSB	R1, [R0, #0]
0x139A	0x482F    LDR	R0, [PC, #188]
0x139C	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 132 :: 		data_TX_normal_FIFO[6]  = PAN_ID_2[0];
0x139E	0x482F    LDR	R0, [PC, #188]
0x13A0	0xF9901000  LDRSB	R1, [R0, #0]
0x13A4	0x482E    LDR	R0, [PC, #184]
0x13A6	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 133 :: 		data_TX_normal_FIFO[7]  = ADDRESS_short_2[0];          // destination address
0x13A8	0x482E    LDR	R0, [PC, #184]
0x13AA	0xF9901000  LDRSB	R1, [R0, #0]
0x13AE	0x482E    LDR	R0, [PC, #184]
0x13B0	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 134 :: 		data_TX_normal_FIFO[8]  = ADDRESS_short_2[1];
0x13B2	0x482E    LDR	R0, [PC, #184]
0x13B4	0xF9901000  LDRSB	R1, [R0, #0]
0x13B8	0x482D    LDR	R0, [PC, #180]
0x13BA	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 135 :: 		data_TX_normal_FIFO[9]  = PAN_ID_1[0];                 // source pan
0x13BC	0x482D    LDR	R0, [PC, #180]
0x13BE	0xF9901000  LDRSB	R1, [R0, #0]
0x13C2	0x482D    LDR	R0, [PC, #180]
0x13C4	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 136 :: 		data_TX_normal_FIFO[10] = PAN_ID_1[1];
0x13C6	0x482D    LDR	R0, [PC, #180]
0x13C8	0xF9901000  LDRSB	R1, [R0, #0]
0x13CC	0x482C    LDR	R0, [PC, #176]
0x13CE	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 137 :: 		data_TX_normal_FIFO[11] = ADDRESS_short_1[0];          // source address
0x13D0	0x482C    LDR	R0, [PC, #176]
0x13D2	0xF9901000  LDRSB	R1, [R0, #0]
0x13D6	0x482C    LDR	R0, [PC, #176]
0x13D8	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 138 :: 		data_TX_normal_FIFO[12] = ADDRESS_short_1[1];
0x13DA	0x482C    LDR	R0, [PC, #176]
0x13DC	0xF9901000  LDRSB	R1, [R0, #0]
0x13E0	0x482B    LDR	R0, [PC, #172]
0x13E2	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 139 :: 		data_TX_normal_FIFO[13] = DATA_TX[0];                  // data
0x13E4	0x482B    LDR	R0, [PC, #172]
0x13E6	0xF9901000  LDRSB	R1, [R0, #0]
0x13EA	0x482B    LDR	R0, [PC, #172]
0x13EC	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 140 :: 		data_TX_normal_FIFO[14] = DATA_TX[1];
0x13EE	0x482B    LDR	R0, [PC, #172]
0x13F0	0xF9901000  LDRSB	R1, [R0, #0]
0x13F4	0x482A    LDR	R0, [PC, #168]
0x13F6	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 141 :: 		data_TX_normal_FIFO[15] = DATA_TX[2];
0x13F8	0x482A    LDR	R0, [PC, #168]
0x13FA	0xF9901000  LDRSB	R1, [R0, #0]
0x13FE	0x482A    LDR	R0, [PC, #168]
0x1400	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 142 :: 		for(i = 0; i < (HEADER_LENGHT + DATA_LENGHT + 2); i++) {
; i start address is: 24 (R6)
0x1402	0x2600    MOVS	R6, #0
0x1404	0xB236    SXTH	R6, R6
; i end address is: 24 (R6)
L_write_TX_normal_FIFO5:
; i start address is: 24 (R6)
0x1406	0x2E10    CMP	R6, #16
0x1408	0xDA0D    BGE	L_write_TX_normal_FIFO6
;ReadWrite_Routines.c, 143 :: 		write_ZIGBEE_long(address_TX_normal_FIFO + i, data_TX_normal_FIFO[i]); // write frame into normal FIFO
0x140A	0x480C    LDR	R0, [PC, #48]
0x140C	0x1980    ADDS	R0, R0, R6
0x140E	0xF9900000  LDRSB	R0, [R0, #0]
0x1412	0xB241    SXTB	R1, R0
0x1414	0x4825    LDR	R0, [PC, #148]
0x1416	0xF9B00000  LDRSH	R0, [R0, #0]
0x141A	0x1980    ADDS	R0, R0, R6
0x141C	0xF7FFF808  BL	_write_ZIGBEE_long+0
;ReadWrite_Routines.c, 142 :: 		for(i = 0; i < (HEADER_LENGHT + DATA_LENGHT + 2); i++) {
0x1420	0x1C76    ADDS	R6, R6, #1
0x1422	0xB236    SXTH	R6, R6
;ReadWrite_Routines.c, 144 :: 		}
; i end address is: 24 (R6)
0x1424	0xE7EF    B	L_write_TX_normal_FIFO5
L_write_TX_normal_FIFO6:
;ReadWrite_Routines.c, 146 :: 		set_not_ACK();
0x1426	0xF7FFF83D  BL	_set_not_ACK+0
;ReadWrite_Routines.c, 147 :: 		set_not_encrypt();
0x142A	0xF7FFF8CF  BL	_set_not_encrypt+0
;ReadWrite_Routines.c, 148 :: 		start_transmit();
0x142E	0xF7FFF907  BL	_start_transmit+0
;ReadWrite_Routines.c, 149 :: 		}
L_end_write_TX_normal_FIFO:
0x1432	0xF8DDE000  LDR	LR, [SP, #0]
0x1436	0xB001    ADD	SP, SP, #4
0x1438	0x4770    BX	LR
0x143A	0xBF00    NOP
0x143C	0x00732000  	_data_TX_normal_FIFO+0
0x1440	0x00742000  	_data_TX_normal_FIFO+1
0x1444	0x00752000  	_data_TX_normal_FIFO+2
0x1448	0x00762000  	_data_TX_normal_FIFO+3
0x144C	0x003B2000  	_SEQ_NUMBER+0
0x1450	0x00772000  	_data_TX_normal_FIFO+4
0x1454	0x00492000  	_PAN_ID_2+1
0x1458	0x00782000  	_data_TX_normal_FIFO+5
0x145C	0x00482000  	_PAN_ID_2+0
0x1460	0x00792000  	_data_TX_normal_FIFO+6
0x1464	0x00442000  	_ADDRESS_short_2+0
0x1468	0x007A2000  	_data_TX_normal_FIFO+7
0x146C	0x00452000  	_ADDRESS_short_2+1
0x1470	0x007B2000  	_data_TX_normal_FIFO+8
0x1474	0x00462000  	_PAN_ID_1+0
0x1478	0x007C2000  	_data_TX_normal_FIFO+9
0x147C	0x00472000  	_PAN_ID_1+1
0x1480	0x007D2000  	_data_TX_normal_FIFO+10
0x1484	0x00422000  	_ADDRESS_short_1+0
0x1488	0x007E2000  	_data_TX_normal_FIFO+11
0x148C	0x00432000  	_ADDRESS_short_1+1
0x1490	0x007F2000  	_data_TX_normal_FIFO+12
0x1494	0x005A2000  	_DATA_TX+0
0x1498	0x00802000  	_data_TX_normal_FIFO+13
0x149C	0x005B2000  	_DATA_TX+1
0x14A0	0x00812000  	_data_TX_normal_FIFO+14
0x14A4	0x005C2000  	_DATA_TX+2
0x14A8	0x00822000  	_data_TX_normal_FIFO+15
0x14AC	0x00402000  	_address_TX_normal_FIFO+0
; end of _write_TX_normal_FIFO
_set_not_ACK:
;Misc_Routines.c, 191 :: 		void set_not_ACK() {
0x04A4	0xB081    SUB	SP, SP, #4
0x04A6	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 192 :: 		short int temp = 0;
;Misc_Routines.c, 194 :: 		temp = read_ZIGBEE_short(TXNCON);
0x04AA	0x201B    MOVS	R0, #27
0x04AC	0xB240    SXTB	R0, R0
0x04AE	0xF000F9B5  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 195 :: 		temp = temp & (!0x04);              // 0x04 mask for set not ACK
0x04B2	0xF0000000  AND	R0, R0, #0
;Misc_Routines.c, 196 :: 		write_ZIGBEE_short(TXNCON, temp);
0x04B6	0xB241    SXTB	R1, R0
0x04B8	0x201B    MOVS	R0, #27
0x04BA	0xB240    SXTB	R0, R0
0x04BC	0xF000F98E  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 197 :: 		}
L_end_set_not_ACK:
0x04C0	0xF8DDE000  LDR	LR, [SP, #0]
0x04C4	0xB001    ADD	SP, SP, #4
0x04C6	0x4770    BX	LR
; end of _set_not_ACK
_set_not_encrypt:
;Misc_Routines.c, 210 :: 		void set_not_encrypt(void){
0x05CC	0xB081    SUB	SP, SP, #4
0x05CE	0xF8CDE000  STR	LR, [SP, #0]
;Misc_Routines.c, 211 :: 		short int temp = 0;
;Misc_Routines.c, 213 :: 		temp = read_ZIGBEE_short(TXNCON);
0x05D2	0x201B    MOVS	R0, #27
0x05D4	0xB240    SXTB	R0, R0
0x05D6	0xF000F921  BL	_read_ZIGBEE_short+0
;Misc_Routines.c, 214 :: 		temp = temp & (!0x02);              // mask for set not encrypt
0x05DA	0xF0000000  AND	R0, R0, #0
;Misc_Routines.c, 215 :: 		write_ZIGBEE_short(TXNCON, temp);
0x05DE	0xB241    SXTB	R1, R0
0x05E0	0x201B    MOVS	R0, #27
0x05E2	0xB240    SXTB	R0, R0
0x05E4	0xF000F8FA  BL	_write_ZIGBEE_short+0
;Misc_Routines.c, 216 :: 		}
L_end_set_not_encrypt:
0x05E8	0xF8DDE000  LDR	LR, [SP, #0]
0x05EC	0xB001    ADD	SP, SP, #4
0x05EE	0x4770    BX	LR
; end of _set_not_encrypt
_start_transmit:
;ReadWrite_Routines.c, 86 :: 		void start_transmit() {
0x0640	0xB081    SUB	SP, SP, #4
0x0642	0xF8CDE000  STR	LR, [SP, #0]
;ReadWrite_Routines.c, 87 :: 		short int temp = 0;
;ReadWrite_Routines.c, 89 :: 		temp = read_ZIGBEE_short(TXNCON);
0x0646	0x201B    MOVS	R0, #27
0x0648	0xB240    SXTB	R0, R0
0x064A	0xF000F8E7  BL	_read_ZIGBEE_short+0
;ReadWrite_Routines.c, 90 :: 		temp = temp | 0x01;                 // mask for start transmit
0x064E	0xF0400001  ORR	R0, R0, #1
;ReadWrite_Routines.c, 91 :: 		write_ZIGBEE_short(TXNCON, temp);
0x0652	0xB241    SXTB	R1, R0
0x0654	0x201B    MOVS	R0, #27
0x0656	0xB240    SXTB	R0, R0
0x0658	0xF000F8C0  BL	_write_ZIGBEE_short+0
;ReadWrite_Routines.c, 92 :: 		}
L_end_start_transmit:
0x065C	0xF8DDE000  LDR	LR, [SP, #0]
0x0660	0xB001    ADD	SP, SP, #4
0x0662	0x4770    BX	LR
; end of _start_transmit
_Debounce_INT:
;Misc_Routines.c, 427 :: 		char Debounce_INT() {
;Misc_Routines.c, 428 :: 		char i = 0, j = 0, intn_d = 0;
; j start address is: 8 (R2)
0x26FC	0x2200    MOVS	R2, #0
;Misc_Routines.c, 429 :: 		for(i = 0; i < 5; i++) {
; i start address is: 4 (R1)
0x26FE	0x2100    MOVS	R1, #0
; j end address is: 8 (R2)
; i end address is: 4 (R1)
L_Debounce_INT49:
; i start address is: 4 (R1)
; j start address is: 8 (R2)
0x2700	0x2905    CMP	R1, #5
0x2702	0xD209    BCS	L_Debounce_INT50
;Misc_Routines.c, 430 :: 		intn_d = INT;
0x2704	0x4807    LDR	R0, [PC, #28]
; intn_d start address is: 0 (R0)
0x2706	0x6800    LDR	R0, [R0, #0]
;Misc_Routines.c, 431 :: 		if (intn_d == 1)
0x2708	0x2801    CMP	R0, #1
0x270A	0xD102    BNE	L__Debounce_INT61
; intn_d end address is: 0 (R0)
;Misc_Routines.c, 432 :: 		j++;
0x270C	0x1C52    ADDS	R2, R2, #1
0x270E	0xB2D2    UXTB	R2, R2
; j end address is: 8 (R2)
0x2710	0xE7FF    B	L_Debounce_INT52
L__Debounce_INT61:
;Misc_Routines.c, 431 :: 		if (intn_d == 1)
;Misc_Routines.c, 432 :: 		j++;
L_Debounce_INT52:
;Misc_Routines.c, 429 :: 		for(i = 0; i < 5; i++) {
; j start address is: 8 (R2)
0x2712	0x1C49    ADDS	R1, R1, #1
0x2714	0xB2C9    UXTB	R1, R1
;Misc_Routines.c, 433 :: 		}
; i end address is: 4 (R1)
0x2716	0xE7F3    B	L_Debounce_INT49
L_Debounce_INT50:
;Misc_Routines.c, 434 :: 		if (j > 2)
0x2718	0x2A02    CMP	R2, #2
0x271A	0xD901    BLS	L_Debounce_INT53
; j end address is: 8 (R2)
;Misc_Routines.c, 435 :: 		return 1;
0x271C	0x2001    MOVS	R0, #1
0x271E	0xE000    B	L_end_Debounce_INT
L_Debounce_INT53:
;Misc_Routines.c, 437 :: 		return 0;
0x2720	0x2000    MOVS	R0, #0
;Misc_Routines.c, 438 :: 		}
L_end_Debounce_INT:
0x2722	0x4770    BX	LR
0x2724	0x81A84222  	INT+0
; end of _Debounce_INT
_read_RX_FIFO:
;ReadWrite_Routines.c, 97 :: 		void read_RX_FIFO() {
0x261C	0xB082    SUB	SP, SP, #8
0x261E	0xF8CDE000  STR	LR, [SP, #0]
;ReadWrite_Routines.c, 98 :: 		unsigned short int temp = 0;
;ReadWrite_Routines.c, 99 :: 		int i = 0;
;ReadWrite_Routines.c, 101 :: 		temp = read_ZIGBEE_short(BBREG1);      // disable receiving packets off air.
0x2622	0x2039    MOVS	R0, #57
0x2624	0xB240    SXTB	R0, R0
0x2626	0xF7FEF8F9  BL	_read_ZIGBEE_short+0
;ReadWrite_Routines.c, 102 :: 		temp = temp | 0x04;                    // mask for disable receiving packets
0x262A	0xB2C0    UXTB	R0, R0
0x262C	0xF0400004  ORR	R0, R0, #4
;ReadWrite_Routines.c, 103 :: 		write_ZIGBEE_short(BBREG1, temp);
0x2630	0xB241    SXTB	R1, R0
0x2632	0x2039    MOVS	R0, #57
0x2634	0xB240    SXTB	R0, R0
0x2636	0xF7FEF8D1  BL	_write_ZIGBEE_short+0
;ReadWrite_Routines.c, 105 :: 		for(i=0; i<128; i++) {
; i start address is: 24 (R6)
0x263A	0x2600    MOVS	R6, #0
0x263C	0xB236    SXTH	R6, R6
; i end address is: 24 (R6)
L_read_RX_FIFO0:
; i start address is: 24 (R6)
0x263E	0x2E80    CMP	R6, #128
0x2640	0xDA19    BGE	L_read_RX_FIFO1
;ReadWrite_Routines.c, 106 :: 		if(i <  (1 + DATA_LENGHT + HEADER_LENGHT + 2 + 1 + 1))
0x2642	0x2E13    CMP	R6, #19
0x2644	0xDA0A    BGE	L_read_RX_FIFO3
;ReadWrite_Routines.c, 107 :: 		data_RX_FIFO[i] = read_ZIGBEE_long(address_RX_FIFO + i);  // reading valid data from RX FIFO
0x2646	0x4820    LDR	R0, [PC, #128]
0x2648	0x1980    ADDS	R0, R0, R6
0x264A	0x9001    STR	R0, [SP, #4]
0x264C	0x481F    LDR	R0, [PC, #124]
0x264E	0xF9B00000  LDRSH	R0, [R0, #0]
0x2652	0x1980    ADDS	R0, R0, R6
0x2654	0xF7FFF866  BL	_read_ZIGBEE_long+0
0x2658	0x9901    LDR	R1, [SP, #4]
0x265A	0x7008    STRB	R0, [R1, #0]
L_read_RX_FIFO3:
;ReadWrite_Routines.c, 108 :: 		if(i >= (1 + DATA_LENGHT + HEADER_LENGHT + 2 + 1 + 1))
0x265C	0x2E13    CMP	R6, #19
0x265E	0xDB07    BLT	L_read_RX_FIFO4
;ReadWrite_Routines.c, 109 :: 		lost_data = read_ZIGBEE_long(address_RX_FIFO + i);        // reading invalid data from RX FIFO
0x2660	0x481A    LDR	R0, [PC, #104]
0x2662	0xF9B00000  LDRSH	R0, [R0, #0]
0x2666	0x1980    ADDS	R0, R0, R6
0x2668	0xF7FFF85C  BL	_read_ZIGBEE_long+0
0x266C	0x4918    LDR	R1, [PC, #96]
0x266E	0x7008    STRB	R0, [R1, #0]
L_read_RX_FIFO4:
;ReadWrite_Routines.c, 105 :: 		for(i=0; i<128; i++) {
0x2670	0x1C76    ADDS	R6, R6, #1
0x2672	0xB236    SXTH	R6, R6
;ReadWrite_Routines.c, 110 :: 		}
; i end address is: 24 (R6)
0x2674	0xE7E3    B	L_read_RX_FIFO0
L_read_RX_FIFO1:
;ReadWrite_Routines.c, 112 :: 		DATA_RX[0] = data_RX_FIFO[HEADER_LENGHT + 1];               // coping valid data
0x2676	0x4817    LDR	R0, [PC, #92]
0x2678	0xF9901000  LDRSB	R1, [R0, #0]
0x267C	0x4816    LDR	R0, [PC, #88]
0x267E	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 113 :: 		DATA_RX[1] = data_RX_FIFO[HEADER_LENGHT + 2];
0x2680	0x4816    LDR	R0, [PC, #88]
0x2682	0xF9901000  LDRSB	R1, [R0, #0]
0x2686	0x4816    LDR	R0, [PC, #88]
0x2688	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 114 :: 		DATA_RX[2] = data_RX_FIFO[HEADER_LENGHT + 3];
0x268A	0x4816    LDR	R0, [PC, #88]
0x268C	0xF9901000  LDRSB	R1, [R0, #0]
0x2690	0x4815    LDR	R0, [PC, #84]
0x2692	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 115 :: 		LQI   = data_RX_FIFO[1 + HEADER_LENGHT + DATA_LENGHT + 2];  // coping valid data
0x2694	0x4815    LDR	R0, [PC, #84]
0x2696	0xF9901000  LDRSB	R1, [R0, #0]
0x269A	0x4815    LDR	R0, [PC, #84]
0x269C	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 116 :: 		RSSI2 = data_RX_FIFO[1 + HEADER_LENGHT + DATA_LENGHT + 3];  // coping valid data
0x269E	0x4815    LDR	R0, [PC, #84]
0x26A0	0xF9901000  LDRSB	R1, [R0, #0]
0x26A4	0x4814    LDR	R0, [PC, #80]
0x26A6	0x7001    STRB	R1, [R0, #0]
;ReadWrite_Routines.c, 118 :: 		temp = read_ZIGBEE_short(BBREG1);      // enable receiving packets off air.
0x26A8	0x2039    MOVS	R0, #57
0x26AA	0xB240    SXTB	R0, R0
0x26AC	0xF7FEF8B6  BL	_read_ZIGBEE_short+0
;ReadWrite_Routines.c, 119 :: 		temp = temp & (!0x04);                 // mask for enable receiving
0x26B0	0xB2C0    UXTB	R0, R0
0x26B2	0xF0000000  AND	R0, R0, #0
;ReadWrite_Routines.c, 120 :: 		write_ZIGBEE_short(BBREG1, temp);
0x26B6	0xB241    SXTB	R1, R0
0x26B8	0x2039    MOVS	R0, #57
0x26BA	0xB240    SXTB	R0, R0
0x26BC	0xF7FEF88E  BL	_write_ZIGBEE_short+0
;ReadWrite_Routines.c, 121 :: 		}
L_end_read_RX_FIFO:
0x26C0	0xF8DDE000  LDR	LR, [SP, #0]
0x26C4	0xB002    ADD	SP, SP, #8
0x26C6	0x4770    BX	LR
0x26C8	0x005D2000  	_data_RX_FIFO+0
0x26CC	0x003E2000  	_address_RX_FIFO+0
0x26D0	0x003C2000  	_lost_data+0
0x26D4	0x00692000  	_data_RX_FIFO+12
0x26D8	0x00702000  	_DATA_RX+0
0x26DC	0x006A2000  	_data_RX_FIFO+13
0x26E0	0x00712000  	_DATA_RX+1
0x26E4	0x006B2000  	_data_RX_FIFO+14
0x26E8	0x00722000  	_DATA_RX+2
0x26EC	0x006E2000  	_data_RX_FIFO+17
0x26F0	0x00372000  	_LQI+0
0x26F4	0x006F2000  	_data_RX_FIFO+18
0x26F8	0x003A2000  	_RSSI2+0
; end of _read_RX_FIFO
_read_ZIGBEE_long:
;ReadWrite_Routines.c, 67 :: 		short int read_ZIGBEE_long(int address) {
; address start address is: 0 (R0)
0x1724	0xB081    SUB	SP, SP, #4
0x1726	0xF8CDE000  STR	LR, [SP, #0]
; address end address is: 0 (R0)
; address start address is: 0 (R0)
;ReadWrite_Routines.c, 68 :: 		short int data_r = 0, dummy_data_r = 0;
; dummy_data_r start address is: 16 (R4)
0x172A	0x2400    MOVS	R4, #0
0x172C	0xB264    SXTB	R4, R4
;ReadWrite_Routines.c, 69 :: 		short int address_high = 0, address_low = 0;
;ReadWrite_Routines.c, 71 :: 		CS = 0;
0x172E	0x2200    MOVS	R2, #0
0x1730	0x4911    LDR	R1, [PC, #68]
0x1732	0x600A    STR	R2, [R1, #0]
;ReadWrite_Routines.c, 73 :: 		address_high = ((short int)(address >> 3) & 0b01111111) | 0x80;  //calculating addressing mode
0x1734	0x10C1    ASRS	R1, R0, #3
0x1736	0xB249    SXTB	R1, R1
0x1738	0xF001017F  AND	R1, R1, #127
0x173C	0xB249    SXTB	R1, R1
0x173E	0xF0410280  ORR	R2, R1, #128
;ReadWrite_Routines.c, 74 :: 		address_low  = ((short int)(address << 5) & 0b11100000);         //calculating addressing mode
0x1742	0x0141    LSLS	R1, R0, #5
; address end address is: 0 (R0)
0x1744	0xB249    SXTB	R1, R1
0x1746	0xF00101E0  AND	R1, R1, #224
; address_low start address is: 20 (R5)
0x174A	0xB24D    SXTB	R5, R1
;ReadWrite_Routines.c, 75 :: 		SPI3_Write(address_high);            // addressing register
0x174C	0xB250    SXTB	R0, R2
0x174E	0xB280    UXTH	R0, R0
0x1750	0xF000FD10  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 76 :: 		SPI3_Write(address_low);             // addressing register
0x1754	0xB268    SXTB	R0, R5
0x1756	0xB280    UXTH	R0, R0
; address_low end address is: 20 (R5)
0x1758	0xF000FD0C  BL	_SPI3_Write+0
;ReadWrite_Routines.c, 77 :: 		data_r = SPI3_Read(dummy_data_r);    // read data from register
0x175C	0xB260    SXTB	R0, R4
0x175E	0xB280    UXTH	R0, R0
; dummy_data_r end address is: 16 (R4)
0x1760	0xF7FEFDA8  BL	_SPI3_Read+0
;ReadWrite_Routines.c, 79 :: 		CS = 1;
0x1764	0x2201    MOVS	R2, #1
0x1766	0xB252    SXTB	R2, R2
0x1768	0x4903    LDR	R1, [PC, #12]
0x176A	0x600A    STR	R2, [R1, #0]
;ReadWrite_Routines.c, 80 :: 		return data_r;
0x176C	0xB240    SXTB	R0, R0
;ReadWrite_Routines.c, 81 :: 		}
L_end_read_ZIGBEE_long:
0x176E	0xF8DDE000  LDR	LR, [SP, #0]
0x1772	0xB001    ADD	SP, SP, #4
0x1774	0x4770    BX	LR
0x1776	0xBF00    NOP
0x1778	0x81B44222  	CS+0
; end of _read_ZIGBEE_long
_beeReciveData:
;Reciver.c, 122 :: 		void beeReciveData() {
0x2D20	0xB081    SUB	SP, SP, #4
0x2D22	0xF8CDE000  STR	LR, [SP, #0]
;Reciver.c, 123 :: 		if (Debounce_INT() == 0) {
0x2D26	0xF7FFFCE9  BL	_Debounce_INT+0
0x2D2A	0xB9C0    CBNZ	R0, L_beeReciveData5
;Reciver.c, 124 :: 		temp1 = read_ZIGBEE_short(INTSTAT); // Read and flush register INTSTAT
0x2D2C	0x2031    MOVS	R0, #49
0x2D2E	0xB240    SXTB	R0, R0
0x2D30	0xF7FDFD74  BL	_read_ZIGBEE_short+0
0x2D34	0x490C    LDR	R1, [PC, #48]
0x2D36	0x7008    STRB	R0, [R1, #0]
;Reciver.c, 125 :: 		read_RX_FIFO();
0x2D38	0xF7FFFC70  BL	_read_RX_FIFO+0
;Reciver.c, 126 :: 		if (DATA_RX[2] == deviceIdByte) {
0x2D3C	0x480B    LDR	R0, [PC, #44]
0x2D3E	0x7801    LDRB	R1, [R0, #0]
0x2D40	0x480B    LDR	R0, [PC, #44]
0x2D42	0xF9900000  LDRSB	R0, [R0, #0]
0x2D46	0x4288    CMP	R0, R1
0x2D48	0xD105    BNE	L_beeReciveData6
;Reciver.c, 127 :: 		clearScreen();
0x2D4A	0xF7FFFB6D  BL	_clearScreen+0
;Reciver.c, 128 :: 		processRecivedData();
0x2D4E	0xF7FFFC03  BL	_processRecivedData+0
;Reciver.c, 129 :: 		display_on_screen();
0x2D52	0xF7FFFBBB  BL	_display_on_screen+0
;Reciver.c, 130 :: 		}
L_beeReciveData6:
;Reciver.c, 131 :: 		DATA_RX[2] = 0;
0x2D56	0x2100    MOVS	R1, #0
0x2D58	0xB249    SXTB	R1, R1
0x2D5A	0x4805    LDR	R0, [PC, #20]
0x2D5C	0x7001    STRB	R1, [R0, #0]
;Reciver.c, 132 :: 		}
L_beeReciveData5:
;Reciver.c, 134 :: 		}
L_end_beeReciveData:
0x2D5E	0xF8DDE000  LDR	LR, [SP, #0]
0x2D62	0xB001    ADD	SP, SP, #4
0x2D64	0x4770    BX	LR
0x2D66	0xBF00    NOP
0x2D68	0x008A2000  	_temp1+0
0x2D6C	0x00002000  	_deviceIdByte+0
0x2D70	0x00722000  	_DATA_RX+2
; end of _beeReciveData
_clearScreen:
;Reciver.c, 69 :: 		void clearScreen() {
0x2428	0xB081    SUB	SP, SP, #4
0x242A	0xF8CDE000  STR	LR, [SP, #0]
;Reciver.c, 71 :: 		TFT_Set_Font(&TFT_defaultFont, CL_WHITE, FO_HORIZONTAL);
0x242E	0x2200    MOVS	R2, #0
0x2430	0xF64F71FF  MOVW	R1, #65535
0x2434	0x4818    LDR	R0, [PC, #96]
0x2436	0xF7FEF893  BL	_TFT_Set_Font+0
;Reciver.c, 73 :: 		ByteToStr(deviceIdByte, &txt);
0x243A	0x4818    LDR	R0, [PC, #96]
0x243C	0x7800    LDRB	R0, [R0, #0]
0x243E	0x4918    LDR	R1, [PC, #96]
0x2440	0xF7FFF948  BL	_ByteToStr+0
;Reciver.c, 74 :: 		TFT_Write_Text(txt, 215, 40);
0x2444	0x2228    MOVS	R2, #40
0x2446	0x21D7    MOVS	R1, #215
0x2448	0x4815    LDR	R0, [PC, #84]
0x244A	0xF000F96D  BL	_TFT_Write_Text+0
;Reciver.c, 76 :: 		ByteToStr(button1, &txt);
0x244E	0x4815    LDR	R0, [PC, #84]
0x2450	0xF9900000  LDRSB	R0, [R0, #0]
0x2454	0x4912    LDR	R1, [PC, #72]
0x2456	0xF7FFF93D  BL	_ByteToStr+0
;Reciver.c, 77 :: 		TFT_Write_Text(txt, 215, 80);
0x245A	0x2250    MOVS	R2, #80
0x245C	0x21D7    MOVS	R1, #215
0x245E	0x4810    LDR	R0, [PC, #64]
0x2460	0xF000F962  BL	_TFT_Write_Text+0
;Reciver.c, 79 :: 		ByteToStr(button2, &txt);
0x2464	0x4810    LDR	R0, [PC, #64]
0x2466	0xF9900000  LDRSB	R0, [R0, #0]
0x246A	0x490D    LDR	R1, [PC, #52]
0x246C	0xF7FFF932  BL	_ByteToStr+0
;Reciver.c, 80 :: 		TFT_Write_Text(txt, 215, 120);
0x2470	0x2278    MOVS	R2, #120
0x2472	0x21D7    MOVS	R1, #215
0x2474	0x480A    LDR	R0, [PC, #40]
0x2476	0xF000F957  BL	_TFT_Write_Text+0
;Reciver.c, 82 :: 		ByteToStr(adc_result, &txt);
0x247A	0x480C    LDR	R0, [PC, #48]
0x247C	0xF9B00000  LDRSH	R0, [R0, #0]
0x2480	0x4907    LDR	R1, [PC, #28]
0x2482	0xF7FFF927  BL	_ByteToStr+0
;Reciver.c, 83 :: 		TFT_Write_Text(txt, 215, 160);
0x2486	0x22A0    MOVS	R2, #160
0x2488	0x21D7    MOVS	R1, #215
0x248A	0x4805    LDR	R0, [PC, #20]
0x248C	0xF000F94C  BL	_TFT_Write_Text+0
;Reciver.c, 84 :: 		}
L_end_clearScreen:
0x2490	0xF8DDE000  LDR	LR, [SP, #0]
0x2494	0xB001    ADD	SP, SP, #4
0x2496	0x4770    BX	LR
0x2498	0x31BC0000  	_TFT_defaultFont+0
0x249C	0x00002000  	_deviceIdByte+0
0x24A0	0x00832000  	_txt+0
0x24A4	0x003D2000  	_button1+0
0x24A8	0x00872000  	_button2+0
0x24AC	0x00042000  	_adc_result+0
; end of _clearScreen
_ByteToStr:
;__Lib_Conversions.c, 82 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x16D4	0xB081    SUB	SP, SP, #4
0x16D6	0x460A    MOV	R2, R1
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 0 (R0)
; output start address is: 8 (R2)
;__Lib_Conversions.c, 85 :: 		
; DigitPos start address is: 4 (R1)
0x16D8	0x2100    MOVS	R1, #0
; input end address is: 0 (R0)
; output end address is: 8 (R2)
; DigitPos end address is: 4 (R1)
0x16DA	0xB2C5    UXTB	R5, R0
0x16DC	0x4610    MOV	R0, R2
L_ByteToStr0:
; DigitPos start address is: 4 (R1)
; output start address is: 0 (R0)
; input start address is: 20 (R5)
0x16DE	0x2903    CMP	R1, #3
0x16E0	0xD205    BCS	L_ByteToStr1
;__Lib_Conversions.c, 86 :: 		
0x16E2	0x1843    ADDS	R3, R0, R1
0x16E4	0x2220    MOVS	R2, #32
0x16E6	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 85 :: 		
0x16E8	0x1C49    ADDS	R1, R1, #1
0x16EA	0xB2C9    UXTB	R1, R1
;__Lib_Conversions.c, 86 :: 		
0x16EC	0xE7F7    B	L_ByteToStr0
L_ByteToStr1:
;__Lib_Conversions.c, 88 :: 		
0x16EE	0x1843    ADDS	R3, R0, R1
0x16F0	0x2200    MOVS	R2, #0
0x16F2	0x701A    STRB	R2, [R3, #0]
0x16F4	0x1E49    SUBS	R1, R1, #1
0x16F6	0xB2C9    UXTB	R1, R1
; output end address is: 0 (R0)
; DigitPos end address is: 4 (R1)
;__Lib_Conversions.c, 90 :: 		
L_ByteToStr3:
;__Lib_Conversions.c, 91 :: 		
; DigitPos start address is: 4 (R1)
; input start address is: 20 (R5)
; output start address is: 0 (R0)
0x16F8	0x1844    ADDS	R4, R0, R1
0x16FA	0x230A    MOVS	R3, #10
0x16FC	0xFBB5F2F3  UDIV	R2, R5, R3
0x1700	0xFB035212  MLS	R2, R3, R2, R5
0x1704	0xB2D2    UXTB	R2, R2
0x1706	0x3230    ADDS	R2, #48
0x1708	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 92 :: 		
0x170A	0x220A    MOVS	R2, #10
0x170C	0xFBB5F2F2  UDIV	R2, R5, R2
0x1710	0xB2D2    UXTB	R2, R2
0x1712	0xB2D5    UXTB	R5, R2
; input end address is: 20 (R5)
;__Lib_Conversions.c, 93 :: 		
0x1714	0xB902    CBNZ	R2, L_ByteToStr5
; output end address is: 0 (R0)
; input end address is: 20 (R5)
; DigitPos end address is: 4 (R1)
;__Lib_Conversions.c, 94 :: 		
0x1716	0xE002    B	L_ByteToStr4
L_ByteToStr5:
;__Lib_Conversions.c, 95 :: 		
; DigitPos start address is: 4 (R1)
; input start address is: 20 (R5)
; output start address is: 0 (R0)
0x1718	0x1E49    SUBS	R1, R1, #1
0x171A	0xB2C9    UXTB	R1, R1
;__Lib_Conversions.c, 96 :: 		
; output end address is: 0 (R0)
; input end address is: 20 (R5)
; DigitPos end address is: 4 (R1)
0x171C	0xE7EC    B	L_ByteToStr3
L_ByteToStr4:
;__Lib_Conversions.c, 97 :: 		
L_end_ByteToStr:
0x171E	0xB001    ADD	SP, SP, #4
0x1720	0x4770    BX	LR
; end of _ByteToStr
_processRecivedData:
;Reciver.c, 115 :: 		void processRecivedData() {
;Reciver.c, 116 :: 		button1 = DATA_RX[0] & 0x20;
0x2558	0x4A0F    LDR	R2, [PC, #60]
0x255A	0xF9920000  LDRSB	R0, [R2, #0]
0x255E	0xF0000120  AND	R1, R0, #32
0x2562	0x480E    LDR	R0, [PC, #56]
0x2564	0x7001    STRB	R1, [R0, #0]
;Reciver.c, 117 :: 		button2 = DATA_RX[0] & 0x19;
0x2566	0x4610    MOV	R0, R2
0x2568	0xF9900000  LDRSB	R0, [R0, #0]
0x256C	0xF0000119  AND	R1, R0, #25
0x2570	0x480B    LDR	R0, [PC, #44]
0x2572	0x7001    STRB	R1, [R0, #0]
;Reciver.c, 118 :: 		adc_h = DATA_RX[0] % 0x0f;
0x2574	0x4610    MOV	R0, R2
0x2576	0xF9902000  LDRSB	R2, [R0, #0]
0x257A	0x200F    MOVS	R0, #15
0x257C	0xB240    SXTB	R0, R0
0x257E	0xFB92F1F0  SDIV	R1, R2, R0
0x2582	0xFB002111  MLS	R1, R0, R1, R2
0x2586	0x4807    LDR	R0, [PC, #28]
0x2588	0x7001    STRB	R1, [R0, #0]
;Reciver.c, 119 :: 		adc_l = DATA_RX[1];
0x258A	0x4807    LDR	R0, [PC, #28]
0x258C	0xF9901000  LDRSB	R1, [R0, #0]
0x2590	0x4806    LDR	R0, [PC, #24]
0x2592	0x7001    STRB	R1, [R0, #0]
;Reciver.c, 120 :: 		}
L_end_processRecivedData:
0x2594	0x4770    BX	LR
0x2596	0xBF00    NOP
0x2598	0x00702000  	_DATA_RX+0
0x259C	0x003D2000  	_button1+0
0x25A0	0x00872000  	_button2+0
0x25A4	0x00882000  	_adc_h+0
0x25A8	0x00712000  	_DATA_RX+1
0x25AC	0x00892000  	_adc_l+0
; end of _processRecivedData
_display_on_screen:
;Reciver.c, 51 :: 		void display_on_screen() {
0x24CC	0xB081    SUB	SP, SP, #4
0x24CE	0xF8CDE000  STR	LR, [SP, #0]
;Reciver.c, 53 :: 		TFT_Set_Font(&TFT_defaultFont, CL_BLACK, FO_HORIZONTAL);
0x24D2	0x2200    MOVS	R2, #0
0x24D4	0xF2400100  MOVW	R1, #0
0x24D8	0x4819    LDR	R0, [PC, #100]
0x24DA	0xF7FEF841  BL	_TFT_Set_Font+0
;Reciver.c, 55 :: 		ByteToStr(deviceIdByte, &txt);
0x24DE	0x4819    LDR	R0, [PC, #100]
0x24E0	0x7800    LDRB	R0, [R0, #0]
0x24E2	0x4919    LDR	R1, [PC, #100]
0x24E4	0xF7FFF8F6  BL	_ByteToStr+0
;Reciver.c, 56 :: 		TFT_Write_Text(txt, 215, 40);
0x24E8	0x2228    MOVS	R2, #40
0x24EA	0x21D7    MOVS	R1, #215
0x24EC	0x4816    LDR	R0, [PC, #88]
0x24EE	0xF000F91B  BL	_TFT_Write_Text+0
;Reciver.c, 58 :: 		ByteToStr(button1, &txt);      // Convert byte to string
0x24F2	0x4816    LDR	R0, [PC, #88]
0x24F4	0xF9900000  LDRSB	R0, [R0, #0]
0x24F8	0x4913    LDR	R1, [PC, #76]
0x24FA	0xF7FFF8EB  BL	_ByteToStr+0
;Reciver.c, 59 :: 		TFT_Write_Text(txt, 215, 80);    // Display string on TFT
0x24FE	0x2250    MOVS	R2, #80
0x2500	0x21D7    MOVS	R1, #215
0x2502	0x4811    LDR	R0, [PC, #68]
0x2504	0xF000F910  BL	_TFT_Write_Text+0
;Reciver.c, 61 :: 		ByteToStr(button2, &txt);
0x2508	0x4811    LDR	R0, [PC, #68]
0x250A	0xF9900000  LDRSB	R0, [R0, #0]
0x250E	0x490E    LDR	R1, [PC, #56]
0x2510	0xF7FFF8E0  BL	_ByteToStr+0
;Reciver.c, 62 :: 		TFT_Write_Text(txt, 215, 120);
0x2514	0x2278    MOVS	R2, #120
0x2516	0x21D7    MOVS	R1, #215
0x2518	0x480B    LDR	R0, [PC, #44]
0x251A	0xF000F905  BL	_TFT_Write_Text+0
;Reciver.c, 64 :: 		parse_adc_values();
0x251E	0xF7FEFC73  BL	_parse_adc_values+0
;Reciver.c, 65 :: 		IntToStr(adc_result, &txt);
0x2522	0x480C    LDR	R0, [PC, #48]
0x2524	0xF9B00000  LDRSH	R0, [R0, #0]
0x2528	0x4907    LDR	R1, [PC, #28]
0x252A	0xF7FEF9CF  BL	_IntToStr+0
;Reciver.c, 66 :: 		TFT_Write_Text(txt, 215, 160);
0x252E	0x22A0    MOVS	R2, #160
0x2530	0x21D7    MOVS	R1, #215
0x2532	0x4805    LDR	R0, [PC, #20]
0x2534	0xF000F8F8  BL	_TFT_Write_Text+0
;Reciver.c, 67 :: 		}
L_end_display_on_screen:
0x2538	0xF8DDE000  LDR	LR, [SP, #0]
0x253C	0xB001    ADD	SP, SP, #4
0x253E	0x4770    BX	LR
0x2540	0x31BC0000  	_TFT_defaultFont+0
0x2544	0x00002000  	_deviceIdByte+0
0x2548	0x00832000  	_txt+0
0x254C	0x003D2000  	_button1+0
0x2550	0x00872000  	_button2+0
0x2554	0x00042000  	_adc_result+0
; end of _display_on_screen
_parse_adc_values:
;Reciver.c, 45 :: 		void parse_adc_values() {
;Reciver.c, 46 :: 		adc_result = adc_h * 265;
0x0E08	0x4807    LDR	R0, [PC, #28]
0x0E0A	0x7801    LDRB	R1, [R0, #0]
0x0E0C	0xF2401009  MOVW	R0, #265
0x0E10	0xB200    SXTH	R0, R0
0x0E12	0xFB01F200  MUL	R2, R1, R0
0x0E16	0xB212    SXTH	R2, R2
0x0E18	0x4904    LDR	R1, [PC, #16]
0x0E1A	0x800A    STRH	R2, [R1, #0]
;Reciver.c, 47 :: 		adc_result = adc_result + adc_l;
0x0E1C	0x4804    LDR	R0, [PC, #16]
0x0E1E	0x7800    LDRB	R0, [R0, #0]
0x0E20	0x1810    ADDS	R0, R2, R0
0x0E22	0x8008    STRH	R0, [R1, #0]
;Reciver.c, 49 :: 		}
L_end_parse_adc_values:
0x0E24	0x4770    BX	LR
0x0E26	0xBF00    NOP
0x0E28	0x00882000  	_adc_h+0
0x0E2C	0x00042000  	_adc_result+0
0x0E30	0x00892000  	_adc_l+0
; end of _parse_adc_values
_IntToStr:
;__Lib_Conversions.c, 211 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x08CC	0xB081    SUB	SP, SP, #4
0x08CE	0xF8CDE000  STR	LR, [SP, #0]
0x08D2	0x460E    MOV	R6, R1
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 0 (R0)
; output start address is: 24 (R6)
;__Lib_Conversions.c, 217 :: 		
; negative start address is: 4 (R1)
0x08D4	0x2100    MOVS	R1, #0
;__Lib_Conversions.c, 218 :: 		
; inword start address is: 12 (R3)
0x08D6	0xB283    UXTH	R3, R0
;__Lib_Conversions.c, 219 :: 		
0x08D8	0x2800    CMP	R0, #0
0x08DA	0xDA05    BGE	L__IntToStr165
; inword end address is: 12 (R3)
;__Lib_Conversions.c, 220 :: 		
0x08DC	0x2101    MOVS	R1, #1
;__Lib_Conversions.c, 221 :: 		
0x08DE	0x4240    RSBS	R0, R0, #0
0x08E0	0xB280    UXTH	R0, R0
; input end address is: 0 (R0)
; inword start address is: 0 (R0)
0x08E2	0xB280    UXTH	R0, R0
; negative end address is: 4 (R1)
; inword end address is: 0 (R0)
0x08E4	0xB28F    UXTH	R7, R1
;__Lib_Conversions.c, 222 :: 		
0x08E6	0xE001    B	L_IntToStr37
L__IntToStr165:
;__Lib_Conversions.c, 219 :: 		
0x08E8	0xB298    UXTH	R0, R3
0x08EA	0xB28F    UXTH	R7, R1
;__Lib_Conversions.c, 222 :: 		
L_IntToStr37:
;__Lib_Conversions.c, 223 :: 		
; inword start address is: 0 (R0)
; negative start address is: 28 (R7)
0x08EC	0x4631    MOV	R1, R6
; inword end address is: 0 (R0)
0x08EE	0xF7FFFE7F  BL	_WordToStr+0
;__Lib_Conversions.c, 225 :: 		
; i start address is: 4 (R1)
0x08F2	0x2106    MOVS	R1, #6
; output end address is: 24 (R6)
; negative end address is: 28 (R7)
; i end address is: 4 (R1)
0x08F4	0x4634    MOV	R4, R6
0x08F6	0xB2B8    UXTH	R0, R7
;__Lib_Conversions.c, 226 :: 		
L_IntToStr38:
; i start address is: 4 (R1)
; negative start address is: 0 (R0)
; output start address is: 16 (R4)
0x08F8	0x2900    CMP	R1, #0
0x08FA	0xD908    BLS	L_IntToStr39
;__Lib_Conversions.c, 227 :: 		
0x08FC	0x1863    ADDS	R3, R4, R1
0x08FE	0x1E4A    SUBS	R2, R1, #1
0x0900	0xB292    UXTH	R2, R2
0x0902	0x18A2    ADDS	R2, R4, R2
0x0904	0x7812    LDRB	R2, [R2, #0]
0x0906	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 228 :: 		
0x0908	0x1E49    SUBS	R1, R1, #1
0x090A	0xB289    UXTH	R1, R1
;__Lib_Conversions.c, 229 :: 		
; i end address is: 4 (R1)
0x090C	0xE7F4    B	L_IntToStr38
L_IntToStr39:
;__Lib_Conversions.c, 230 :: 		
0x090E	0x2220    MOVS	R2, #32
0x0910	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 231 :: 		
0x0912	0xB170    CBZ	R0, L_IntToStr40
; negative end address is: 0 (R0)
;__Lib_Conversions.c, 232 :: 		
; i start address is: 0 (R0)
0x0914	0x2000    MOVS	R0, #0
; output end address is: 16 (R4)
; i end address is: 0 (R0)
0x0916	0xB281    UXTH	R1, R0
0x0918	0x4620    MOV	R0, R4
;__Lib_Conversions.c, 233 :: 		
L_IntToStr41:
; i start address is: 4 (R1)
; output start address is: 0 (R0)
0x091A	0x1842    ADDS	R2, R0, R1
0x091C	0x7812    LDRB	R2, [R2, #0]
0x091E	0x2A20    CMP	R2, #32
0x0920	0xD102    BNE	L_IntToStr42
0x0922	0x1C49    ADDS	R1, R1, #1
0x0924	0xB289    UXTH	R1, R1
0x0926	0xE7F8    B	L_IntToStr41
L_IntToStr42:
;__Lib_Conversions.c, 234 :: 		
0x0928	0x1E4A    SUBS	R2, R1, #1
0x092A	0xB292    UXTH	R2, R2
; i end address is: 4 (R1)
;__Lib_Conversions.c, 235 :: 		
0x092C	0x1883    ADDS	R3, R0, R2
; output end address is: 0 (R0)
0x092E	0x222D    MOVS	R2, #45
0x0930	0x701A    STRB	R2, [R3, #0]
L_IntToStr40:
;__Lib_Conversions.c, 236 :: 		
L_end_IntToStr:
0x0932	0xF8DDE000  LDR	LR, [SP, #0]
0x0936	0xB001    ADD	SP, SP, #4
0x0938	0x4770    BX	LR
; end of _IntToStr
_WordToStr:
;__Lib_Conversions.c, 114 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x05F0	0xB081    SUB	SP, SP, #4
0x05F2	0x460A    MOV	R2, R1
0x05F4	0xB281    UXTH	R1, R0
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 4 (R1)
; output start address is: 8 (R2)
;__Lib_Conversions.c, 119 :: 		
; len start address is: 0 (R0)
0x05F6	0x2000    MOVS	R0, #0
; input end address is: 4 (R1)
; output end address is: 8 (R2)
; len end address is: 0 (R0)
0x05F8	0xB28D    UXTH	R5, R1
0x05FA	0x4611    MOV	R1, R2
L_WordToStr11:
; len start address is: 0 (R0)
; output start address is: 4 (R1)
; input start address is: 20 (R5)
0x05FC	0x2805    CMP	R0, #5
0x05FE	0xD205    BCS	L_WordToStr12
;__Lib_Conversions.c, 120 :: 		
0x0600	0x180B    ADDS	R3, R1, R0
0x0602	0x2220    MOVS	R2, #32
0x0604	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 119 :: 		
0x0606	0x1C40    ADDS	R0, R0, #1
0x0608	0xB2C0    UXTB	R0, R0
;__Lib_Conversions.c, 120 :: 		
0x060A	0xE7F7    B	L_WordToStr11
L_WordToStr12:
;__Lib_Conversions.c, 121 :: 		
0x060C	0x180B    ADDS	R3, R1, R0
0x060E	0x2200    MOVS	R2, #0
0x0610	0x701A    STRB	R2, [R3, #0]
0x0612	0x1E40    SUBS	R0, R0, #1
0x0614	0xB2C0    UXTB	R0, R0
; output end address is: 4 (R1)
; len end address is: 0 (R0)
;__Lib_Conversions.c, 123 :: 		
L_WordToStr14:
;__Lib_Conversions.c, 124 :: 		
; len start address is: 0 (R0)
; input start address is: 20 (R5)
; output start address is: 4 (R1)
0x0616	0x180C    ADDS	R4, R1, R0
0x0618	0x230A    MOVS	R3, #10
0x061A	0xFBB5F2F3  UDIV	R2, R5, R3
0x061E	0xFB035212  MLS	R2, R3, R2, R5
0x0622	0xB292    UXTH	R2, R2
0x0624	0x3230    ADDS	R2, #48
0x0626	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 125 :: 		
0x0628	0x220A    MOVS	R2, #10
0x062A	0xFBB5F2F2  UDIV	R2, R5, R2
0x062E	0xB292    UXTH	R2, R2
0x0630	0xB295    UXTH	R5, R2
; input end address is: 20 (R5)
;__Lib_Conversions.c, 126 :: 		
0x0632	0xB902    CBNZ	R2, L_WordToStr16
; output end address is: 4 (R1)
; input end address is: 20 (R5)
; len end address is: 0 (R0)
;__Lib_Conversions.c, 127 :: 		
0x0634	0xE002    B	L_WordToStr15
L_WordToStr16:
;__Lib_Conversions.c, 128 :: 		
; len start address is: 0 (R0)
; input start address is: 20 (R5)
; output start address is: 4 (R1)
0x0636	0x1E40    SUBS	R0, R0, #1
0x0638	0xB2C0    UXTB	R0, R0
;__Lib_Conversions.c, 129 :: 		
; output end address is: 4 (R1)
; input end address is: 20 (R5)
; len end address is: 0 (R0)
0x063A	0xE7EC    B	L_WordToStr14
L_WordToStr15:
;__Lib_Conversions.c, 130 :: 		
L_end_WordToStr:
0x063C	0xB001    ADD	SP, SP, #4
0x063E	0x4770    BX	LR
; end of _WordToStr
__Lib_System_105_107_InitialSetUpRCCRCC2:
;__Lib_System_105_107.c, 374 :: 		
0x3078	0xB081    SUB	SP, SP, #4
0x307A	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_105_107.c, 377 :: 		
; ulRCC_CR start address is: 8 (R2)
0x307E	0x4A46    LDR	R2, [PC, #280]
;__Lib_System_105_107.c, 378 :: 		
; ulRCC_CFGR start address is: 12 (R3)
0x3080	0x4B46    LDR	R3, [PC, #280]
;__Lib_System_105_107.c, 379 :: 		
; ulRCC_CFGR2 start address is: 16 (R4)
0x3082	0x4C47    LDR	R4, [PC, #284]
;__Lib_System_105_107.c, 380 :: 		
; Fosc_kHz start address is: 4 (R1)
0x3084	0x4947    LDR	R1, [PC, #284]
;__Lib_System_105_107.c, 387 :: 		
0x3086	0xF64B3080  MOVW	R0, #48000
0x308A	0x4281    CMP	R1, R0
0x308C	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC231
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_105_107.c, 388 :: 		
0x308E	0x4846    LDR	R0, [PC, #280]
0x3090	0x6800    LDR	R0, [R0, #0]
0x3092	0xF0400102  ORR	R1, R0, #2
0x3096	0x4844    LDR	R0, [PC, #272]
0x3098	0x6001    STR	R1, [R0, #0]
0x309A	0xE011    B	L___Lib_System_105_107_InitialSetUpRCCRCC232
L___Lib_System_105_107_InitialSetUpRCCRCC231:
;__Lib_System_105_107.c, 389 :: 		
; Fosc_kHz start address is: 4 (R1)
0x309C	0xF64550C0  MOVW	R0, #24000
0x30A0	0x4281    CMP	R1, R0
0x30A2	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC233
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_105_107.c, 390 :: 		
0x30A4	0x4840    LDR	R0, [PC, #256]
0x30A6	0x6800    LDR	R0, [R0, #0]
0x30A8	0xF0400101  ORR	R1, R0, #1
0x30AC	0x483E    LDR	R0, [PC, #248]
0x30AE	0x6001    STR	R1, [R0, #0]
0x30B0	0xE006    B	L___Lib_System_105_107_InitialSetUpRCCRCC234
L___Lib_System_105_107_InitialSetUpRCCRCC233:
;__Lib_System_105_107.c, 392 :: 		
0x30B2	0x483D    LDR	R0, [PC, #244]
0x30B4	0x6801    LDR	R1, [R0, #0]
0x30B6	0xF06F0007  MVN	R0, #7
0x30BA	0x4001    ANDS	R1, R0
0x30BC	0x483A    LDR	R0, [PC, #232]
0x30BE	0x6001    STR	R1, [R0, #0]
L___Lib_System_105_107_InitialSetUpRCCRCC234:
L___Lib_System_105_107_InitialSetUpRCCRCC232:
;__Lib_System_105_107.c, 394 :: 		
0x30C0	0xF7FFFDD0  BL	__Lib_System_105_107_SystemClockSetDefault+0
;__Lib_System_105_107.c, 396 :: 		
0x30C4	0x4839    LDR	R0, [PC, #228]
0x30C6	0x6003    STR	R3, [R0, #0]
;__Lib_System_105_107.c, 397 :: 		
0x30C8	0x4839    LDR	R0, [PC, #228]
0x30CA	0x6004    STR	R4, [R0, #0]
; ulRCC_CFGR2 end address is: 16 (R4)
;__Lib_System_105_107.c, 398 :: 		
0x30CC	0x4839    LDR	R0, [PC, #228]
0x30CE	0xEA020100  AND	R1, R2, R0, LSL #0
0x30D2	0x4839    LDR	R0, [PC, #228]
0x30D4	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 400 :: 		
0x30D6	0xF0020001  AND	R0, R2, #1
0x30DA	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC252
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x30DC	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 401 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC236:
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x30DE	0x4836    LDR	R0, [PC, #216]
0x30E0	0x6800    LDR	R0, [R0, #0]
0x30E2	0xF0000002  AND	R0, R0, #2
0x30E6	0x2800    CMP	R0, #0
0x30E8	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC237
;__Lib_System_105_107.c, 402 :: 		
0x30EA	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC236
L___Lib_System_105_107_InitialSetUpRCCRCC237:
;__Lib_System_105_107.c, 403 :: 		
; ulRCC_CFGR end address is: 4 (R1)
0x30EC	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC235
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC252:
;__Lib_System_105_107.c, 400 :: 		
0x30EE	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 403 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC235:
;__Lib_System_105_107.c, 405 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x30F0	0xF4023080  AND	R0, R2, #65536
0x30F4	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC253
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 4 (R1)
0x30F6	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 406 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC239:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x30F8	0x482F    LDR	R0, [PC, #188]
0x30FA	0x6800    LDR	R0, [R0, #0]
0x30FC	0xF4003000  AND	R0, R0, #131072
0x3100	0x2800    CMP	R0, #0
0x3102	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC240
;__Lib_System_105_107.c, 407 :: 		
0x3104	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC239
L___Lib_System_105_107_InitialSetUpRCCRCC240:
;__Lib_System_105_107.c, 408 :: 		
; ulRCC_CR end address is: 8 (R2)
0x3106	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC238
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC253:
;__Lib_System_105_107.c, 405 :: 		
0x3108	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 408 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC238:
;__Lib_System_105_107.c, 410 :: 		
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x310A	0xF0025080  AND	R0, R2, #268435456
0x310E	0xB168    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC254
;__Lib_System_105_107.c, 411 :: 		
0x3110	0x4829    LDR	R0, [PC, #164]
0x3112	0x6800    LDR	R0, [R0, #0]
0x3114	0xF0405180  ORR	R1, R0, #268435456
0x3118	0x4827    LDR	R0, [PC, #156]
0x311A	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
;__Lib_System_105_107.c, 412 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC242:
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x311C	0x4826    LDR	R0, [PC, #152]
0x311E	0x6800    LDR	R0, [R0, #0]
0x3120	0xF0005000  AND	R0, R0, #536870912
0x3124	0x2800    CMP	R0, #0
0x3126	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC243
;__Lib_System_105_107.c, 413 :: 		
0x3128	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC242
L___Lib_System_105_107_InitialSetUpRCCRCC243:
;__Lib_System_105_107.c, 414 :: 		
; ulRCC_CR end address is: 8 (R2)
0x312A	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC241
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC254:
;__Lib_System_105_107.c, 410 :: 		
;__Lib_System_105_107.c, 414 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC241:
;__Lib_System_105_107.c, 416 :: 		
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x312C	0xF0026080  AND	R0, R2, #67108864
0x3130	0xB178    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC255
;__Lib_System_105_107.c, 417 :: 		
0x3132	0x4821    LDR	R0, [PC, #132]
0x3134	0x6800    LDR	R0, [R0, #0]
0x3136	0xF0406180  ORR	R1, R0, #67108864
0x313A	0x481F    LDR	R0, [PC, #124]
0x313C	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x313E	0x4611    MOV	R1, R2
0x3140	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 418 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC245:
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x3142	0x481D    LDR	R0, [PC, #116]
0x3144	0x6800    LDR	R0, [R0, #0]
0x3146	0xF0006000  AND	R0, R0, #134217728
0x314A	0x2800    CMP	R0, #0
0x314C	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC246
;__Lib_System_105_107.c, 419 :: 		
0x314E	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC245
L___Lib_System_105_107_InitialSetUpRCCRCC246:
;__Lib_System_105_107.c, 420 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x3150	0xE001    B	L___Lib_System_105_107_InitialSetUpRCCRCC244
; ulRCC_CR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC255:
;__Lib_System_105_107.c, 416 :: 		
0x3152	0x4611    MOV	R1, R2
0x3154	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 420 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC244:
;__Lib_System_105_107.c, 422 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x3156	0xF0017080  AND	R0, R1, #16777216
; ulRCC_CR end address is: 4 (R1)
0x315A	0xB170    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC256
;__Lib_System_105_107.c, 423 :: 		
0x315C	0x4816    LDR	R0, [PC, #88]
0x315E	0x6800    LDR	R0, [R0, #0]
0x3160	0xF0407180  ORR	R1, R0, #16777216
0x3164	0x4814    LDR	R0, [PC, #80]
0x3166	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
0x3168	0x4611    MOV	R1, R2
;__Lib_System_105_107.c, 424 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC248:
; ulRCC_CFGR start address is: 4 (R1)
0x316A	0x4813    LDR	R0, [PC, #76]
0x316C	0x6800    LDR	R0, [R0, #0]
0x316E	0xF0007000  AND	R0, R0, #33554432
0x3172	0xB900    CBNZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC249
;__Lib_System_105_107.c, 425 :: 		
0x3174	0xE7F9    B	L___Lib_System_105_107_InitialSetUpRCCRCC248
L___Lib_System_105_107_InitialSetUpRCCRCC249:
;__Lib_System_105_107.c, 426 :: 		
0x3176	0x460A    MOV	R2, R1
0x3178	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC247
; ulRCC_CFGR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC256:
;__Lib_System_105_107.c, 422 :: 		
;__Lib_System_105_107.c, 426 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC247:
;__Lib_System_105_107.c, 430 :: 		
; ulRCC_CFGR start address is: 8 (R2)
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC250:
; ulRCC_CFGR start address is: 8 (R2)
0x317A	0x480C    LDR	R0, [PC, #48]
0x317C	0x6800    LDR	R0, [R0, #0]
0x317E	0xF000010C  AND	R1, R0, #12
0x3182	0x0090    LSLS	R0, R2, #2
0x3184	0xF000000C  AND	R0, R0, #12
0x3188	0x4281    CMP	R1, R0
0x318A	0xD000    BEQ	L___Lib_System_105_107_InitialSetUpRCCRCC251
;__Lib_System_105_107.c, 431 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x318C	0xE7F5    B	L___Lib_System_105_107_InitialSetUpRCCRCC250
L___Lib_System_105_107_InitialSetUpRCCRCC251:
;__Lib_System_105_107.c, 432 :: 		
L_end_InitialSetUpRCCRCC2:
0x318E	0xF8DDE000  LDR	LR, [SP, #0]
0x3192	0xB001    ADD	SP, SP, #4
0x3194	0x4770    BX	LR
0x3196	0xBF00    NOP
0x3198	0x00811501  	#352387201
0x319C	0x8402091D  	#152929282
0x31A0	0xF6440001  	#128580
0x31A4	0x19400001  	#72000
0x31A8	0x20004002  	FLASH_ACR+0
0x31AC	0x10044002  	RCC_CFGR+0
0x31B0	0x102C4002  	RCC_CFGR2+0
0x31B4	0xFFFF000F  	#1048575
0x31B8	0x10004002  	RCC_CR+0
; end of __Lib_System_105_107_InitialSetUpRCCRCC2
__Lib_System_105_107_SystemClockSetDefault:
;__Lib_System_105_107.c, 347 :: 		
0x2C64	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 350 :: 		
0x2C66	0x4815    LDR	R0, [PC, #84]
0x2C68	0x6800    LDR	R0, [R0, #0]
0x2C6A	0xF0400101  ORR	R1, R0, #1
0x2C6E	0x4813    LDR	R0, [PC, #76]
0x2C70	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 353 :: 		
0x2C72	0x4913    LDR	R1, [PC, #76]
0x2C74	0x4813    LDR	R0, [PC, #76]
0x2C76	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 356 :: 		
0x2C78	0x4810    LDR	R0, [PC, #64]
0x2C7A	0x6801    LDR	R1, [R0, #0]
0x2C7C	0x4812    LDR	R0, [PC, #72]
0x2C7E	0x4001    ANDS	R1, R0
0x2C80	0x480E    LDR	R0, [PC, #56]
0x2C82	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 359 :: 		
0x2C84	0x480D    LDR	R0, [PC, #52]
0x2C86	0x6801    LDR	R1, [R0, #0]
0x2C88	0xF46F2080  MVN	R0, #262144
0x2C8C	0x4001    ANDS	R1, R0
0x2C8E	0x480B    LDR	R0, [PC, #44]
0x2C90	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 362 :: 		
0x2C92	0x480C    LDR	R0, [PC, #48]
0x2C94	0x6801    LDR	R1, [R0, #0]
0x2C96	0xF46F00FE  MVN	R0, #8323072
0x2C9A	0x4001    ANDS	R1, R0
0x2C9C	0x4809    LDR	R0, [PC, #36]
0x2C9E	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 365 :: 		
0x2CA0	0x4806    LDR	R0, [PC, #24]
0x2CA2	0x6801    LDR	R1, [R0, #0]
0x2CA4	0xF06F50A0  MVN	R0, #335544320
0x2CA8	0x4001    ANDS	R1, R0
0x2CAA	0x4804    LDR	R0, [PC, #16]
0x2CAC	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 368 :: 		
0x2CAE	0xF04F0100  MOV	R1, #0
0x2CB2	0x4806    LDR	R0, [PC, #24]
0x2CB4	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 372 :: 		
L_end_SystemClockSetDefault:
0x2CB6	0xB001    ADD	SP, SP, #4
0x2CB8	0x4770    BX	LR
0x2CBA	0xBF00    NOP
0x2CBC	0x10004002  	RCC_CR+0
0x2CC0	0x0000F0FF  	#-251723776
0x2CC4	0x10044002  	RCC_CFGR+0
0x2CC8	0xFFFFFEF6  	#-17367041
0x2CCC	0x102C4002  	RCC_CFGR2+0
; end of __Lib_System_105_107_SystemClockSetDefault
__Lib_System_105_107_InitialSetUpFosc:
;__Lib_System_105_107.c, 434 :: 		
0x2FC4	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 435 :: 		
0x2FC6	0x4902    LDR	R1, [PC, #8]
0x2FC8	0x4802    LDR	R0, [PC, #8]
0x2FCA	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 436 :: 		
L_end_InitialSetUpFosc:
0x2FCC	0xB001    ADD	SP, SP, #4
0x2FCE	0x4770    BX	LR
0x2FD0	0x19400001  	#72000
0x2FD4	0x00942000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_105_107_InitialSetUpFosc
___GenExcept:
;__Lib_System_105_107.c, 298 :: 		
0x2FD8	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 299 :: 		
L___GenExcept27:
0x2FDA	0xE7FE    B	L___GenExcept27
;__Lib_System_105_107.c, 300 :: 		
L_end___GenExcept:
0x2FDC	0xB001    ADD	SP, SP, #4
0x2FDE	0x4770    BX	LR
; end of ___GenExcept
0x3AD8	0xB500    PUSH	(R14)
0x3ADA	0xF8DFB024  LDR	R11, [PC, #36]
0x3ADE	0xF8DFA024  LDR	R10, [PC, #36]
0x3AE2	0xF8DFC024  LDR	R12, [PC, #36]
0x3AE6	0xF7FFF911  BL	11532
0x3AEA	0xF8DFB020  LDR	R11, [PC, #32]
0x3AEE	0xF8DFA020  LDR	R10, [PC, #32]
0x3AF2	0xF8DFC020  LDR	R12, [PC, #32]
0x3AF6	0xF7FFF909  BL	11532
0x3AFA	0xBD00    POP	(R15)
0x3AFC	0x4770    BX	LR
0x3AFE	0xBF00    NOP
0x3B00	0x00002000  	#536870912
0x3B04	0x00372000  	#536870967
0x3B08	0x3AA00000  	#15008
0x3B0C	0x00382000  	#536870968
0x3B10	0x003A2000  	#536870970
0x3B14	0x02B20000  	#690
0x3B74	0xB500    PUSH	(R14)
0x3B76	0xF8DFB010  LDR	R11, [PC, #16]
0x3B7A	0xF8DFA010  LDR	R10, [PC, #16]
0x3B7E	0xF7FFF8A7  BL	11472
0x3B82	0xBD00    POP	(R15)
0x3B84	0x4770    BX	LR
0x3B86	0xBF00    NOP
0x3B88	0x00002000  	#536870912
0x3B8C	0x00E02000  	#536871136
;__Lib_TFT_Defs.c,0 :: ?ICS__Lib_TFT_Defs___controller [2]
0x02B2	0x00FF ;?ICS__Lib_TFT_Defs___controller+0
; end of ?ICS__Lib_TFT_Defs___controller
;__Lib_TFT.c,4303 :: _TFT_defaultFont [2168]
0x31BC	0x00200000 ;_TFT_defaultFont+0
0x31C0	0x0010007F ;_TFT_defaultFont+4
0x31C4	0x00018801 ;_TFT_defaultFont+8
0x31C8	0x00019803 ;_TFT_defaultFont+12
0x31CC	0x0001A805 ;_TFT_defaultFont+16
0x31D0	0x0001B808 ;_TFT_defaultFont+20
0x31D4	0x0001C807 ;_TFT_defaultFont+24
0x31D8	0x0001D80D ;_TFT_defaultFont+28
0x31DC	0x0001F80A ;_TFT_defaultFont+32
0x31E0	0x00021803 ;_TFT_defaultFont+36
0x31E4	0x00022805 ;_TFT_defaultFont+40
0x31E8	0x00023805 ;_TFT_defaultFont+44
0x31EC	0x00024807 ;_TFT_defaultFont+48
0x31F0	0x00025809 ;_TFT_defaultFont+52
0x31F4	0x00027803 ;_TFT_defaultFont+56
0x31F8	0x00028805 ;_TFT_defaultFont+60
0x31FC	0x00029803 ;_TFT_defaultFont+64
0x3200	0x0002A806 ;_TFT_defaultFont+68
0x3204	0x0002B807 ;_TFT_defaultFont+72
0x3208	0x0002C807 ;_TFT_defaultFont+76
0x320C	0x0002D807 ;_TFT_defaultFont+80
0x3210	0x0002E807 ;_TFT_defaultFont+84
0x3214	0x0002F807 ;_TFT_defaultFont+88
0x3218	0x00030807 ;_TFT_defaultFont+92
0x321C	0x00031807 ;_TFT_defaultFont+96
0x3220	0x00032807 ;_TFT_defaultFont+100
0x3224	0x00033807 ;_TFT_defaultFont+104
0x3228	0x00034807 ;_TFT_defaultFont+108
0x322C	0x00035803 ;_TFT_defaultFont+112
0x3230	0x00036803 ;_TFT_defaultFont+116
0x3234	0x00037809 ;_TFT_defaultFont+120
0x3238	0x00039809 ;_TFT_defaultFont+124
0x323C	0x0003B809 ;_TFT_defaultFont+128
0x3240	0x0003D806 ;_TFT_defaultFont+132
0x3244	0x0003E809 ;_TFT_defaultFont+136
0x3248	0x00040809 ;_TFT_defaultFont+140
0x324C	0x00042807 ;_TFT_defaultFont+144
0x3250	0x00043807 ;_TFT_defaultFont+148
0x3254	0x00044808 ;_TFT_defaultFont+152
0x3258	0x00045806 ;_TFT_defaultFont+156
0x325C	0x00046806 ;_TFT_defaultFont+160
0x3260	0x00047807 ;_TFT_defaultFont+164
0x3264	0x00048808 ;_TFT_defaultFont+168
0x3268	0x00049804 ;_TFT_defaultFont+172
0x326C	0x0004A805 ;_TFT_defaultFont+176
0x3270	0x0004B807 ;_TFT_defaultFont+180
0x3274	0x0004C806 ;_TFT_defaultFont+184
0x3278	0x0004D80A ;_TFT_defaultFont+188
0x327C	0x0004F807 ;_TFT_defaultFont+192
0x3280	0x00050808 ;_TFT_defaultFont+196
0x3284	0x00051807 ;_TFT_defaultFont+200
0x3288	0x00052808 ;_TFT_defaultFont+204
0x328C	0x00053808 ;_TFT_defaultFont+208
0x3290	0x00054807 ;_TFT_defaultFont+212
0x3294	0x00055806 ;_TFT_defaultFont+216
0x3298	0x00056807 ;_TFT_defaultFont+220
0x329C	0x00057808 ;_TFT_defaultFont+224
0x32A0	0x0005880C ;_TFT_defaultFont+228
0x32A4	0x0005A808 ;_TFT_defaultFont+232
0x32A8	0x0005B808 ;_TFT_defaultFont+236
0x32AC	0x0005C806 ;_TFT_defaultFont+240
0x32B0	0x0005D805 ;_TFT_defaultFont+244
0x32B4	0x0005E806 ;_TFT_defaultFont+248
0x32B8	0x0005F805 ;_TFT_defaultFont+252
0x32BC	0x00060809 ;_TFT_defaultFont+256
0x32C0	0x00062808 ;_TFT_defaultFont+260
0x32C4	0x00063805 ;_TFT_defaultFont+264
0x32C8	0x00064807 ;_TFT_defaultFont+268
0x32CC	0x00065807 ;_TFT_defaultFont+272
0x32D0	0x00066806 ;_TFT_defaultFont+276
0x32D4	0x00067807 ;_TFT_defaultFont+280
0x32D8	0x00068807 ;_TFT_defaultFont+284
0x32DC	0x00069805 ;_TFT_defaultFont+288
0x32E0	0x0006A807 ;_TFT_defaultFont+292
0x32E4	0x0006B807 ;_TFT_defaultFont+296
0x32E8	0x0006C802 ;_TFT_defaultFont+300
0x32EC	0x0006D803 ;_TFT_defaultFont+304
0x32F0	0x0006E806 ;_TFT_defaultFont+308
0x32F4	0x0006F802 ;_TFT_defaultFont+312
0x32F8	0x0007080A ;_TFT_defaultFont+316
0x32FC	0x00072807 ;_TFT_defaultFont+320
0x3300	0x00073807 ;_TFT_defaultFont+324
0x3304	0x00074807 ;_TFT_defaultFont+328
0x3308	0x00075807 ;_TFT_defaultFont+332
0x330C	0x00076805 ;_TFT_defaultFont+336
0x3310	0x00077806 ;_TFT_defaultFont+340
0x3314	0x00078805 ;_TFT_defaultFont+344
0x3318	0x00079807 ;_TFT_defaultFont+348
0x331C	0x0007A807 ;_TFT_defaultFont+352
0x3320	0x0007B80A ;_TFT_defaultFont+356
0x3324	0x0007D806 ;_TFT_defaultFont+360
0x3328	0x0007E807 ;_TFT_defaultFont+364
0x332C	0x0007F806 ;_TFT_defaultFont+368
0x3330	0x00080806 ;_TFT_defaultFont+372
0x3334	0x00081804 ;_TFT_defaultFont+376
0x3338	0x00082806 ;_TFT_defaultFont+380
0x333C	0x0008380A ;_TFT_defaultFont+384
0x3340	0x0008580B ;_TFT_defaultFont+388
0x3344	0x00000000 ;_TFT_defaultFont+392
0x3348	0x00000000 ;_TFT_defaultFont+396
0x334C	0x00000000 ;_TFT_defaultFont+400
0x3350	0x00000000 ;_TFT_defaultFont+404
0x3354	0x00000000 ;_TFT_defaultFont+408
0x3358	0x06060606 ;_TFT_defaultFont+412
0x335C	0x06000606 ;_TFT_defaultFont+416
0x3360	0x00000006 ;_TFT_defaultFont+420
0x3364	0x1B000000 ;_TFT_defaultFont+424
0x3368	0x001B1B1B ;_TFT_defaultFont+428
0x336C	0x00000000 ;_TFT_defaultFont+432
0x3370	0x00000000 ;_TFT_defaultFont+436
0x3374	0x00000000 ;_TFT_defaultFont+440
0x3378	0xFEFE4848 ;_TFT_defaultFont+444
0x337C	0x127F7F24 ;_TFT_defaultFont+448
0x3380	0x00000012 ;_TFT_defaultFont+452
0x3384	0x08080000 ;_TFT_defaultFont+456
0x3388	0x0B0B4B3E ;_TFT_defaultFont+460
0x338C	0x6968683E ;_TFT_defaultFont+464
0x3390	0x0008083E ;_TFT_defaultFont+468
0x3394	0x00000000 ;_TFT_defaultFont+472
0x3398	0x00000000 ;_TFT_defaultFont+476
0x339C	0x0233001E ;_TFT_defaultFont+480
0x33A0	0x00B30133 ;_TFT_defaultFont+484
0x33A4	0x19A00F5E ;_TFT_defaultFont+488
0x33A8	0x19881990 ;_TFT_defaultFont+492
0x33AC	0x00000F00 ;_TFT_defaultFont+496
0x33B0	0x00000000 ;_TFT_defaultFont+500
0x33B4	0x00000000 ;_TFT_defaultFont+504
0x33B8	0x00000000 ;_TFT_defaultFont+508
0x33BC	0x0066003C ;_TFT_defaultFont+512
0x33C0	0x00660066 ;_TFT_defaultFont+516
0x33C4	0x0366033C ;_TFT_defaultFont+520
0x33C8	0x00C601C6 ;_TFT_defaultFont+524
0x33CC	0x000003BC ;_TFT_defaultFont+528
0x33D0	0x00000000 ;_TFT_defaultFont+532
0x33D4	0x06000000 ;_TFT_defaultFont+536
0x33D8	0x00060606 ;_TFT_defaultFont+540
0x33DC	0x00000000 ;_TFT_defaultFont+544
0x33E0	0x00000000 ;_TFT_defaultFont+548
0x33E4	0x18000000 ;_TFT_defaultFont+552
0x33E8	0x06060C0C ;_TFT_defaultFont+556
0x33EC	0x06060606 ;_TFT_defaultFont+560
0x33F0	0x180C0C06 ;_TFT_defaultFont+564
0x33F4	0x06000000 ;_TFT_defaultFont+568
0x33F8	0x18180C0C ;_TFT_defaultFont+572
0x33FC	0x18181818 ;_TFT_defaultFont+576
0x3400	0x060C0C18 ;_TFT_defaultFont+580
0x3404	0x18000000 ;_TFT_defaultFont+584
0x3408	0x185A3C5A ;_TFT_defaultFont+588
0x340C	0x00000000 ;_TFT_defaultFont+592
0x3410	0x00000000 ;_TFT_defaultFont+596
0x3414	0x00000000 ;_TFT_defaultFont+600
0x3418	0x00000000 ;_TFT_defaultFont+604
0x341C	0x00200000 ;_TFT_defaultFont+608
0x3420	0x00200020 ;_TFT_defaultFont+612
0x3424	0x002001FC ;_TFT_defaultFont+616
0x3428	0x00200020 ;_TFT_defaultFont+620
0x342C	0x00000000 ;_TFT_defaultFont+624
0x3430	0x00000000 ;_TFT_defaultFont+628
0x3434	0x00000000 ;_TFT_defaultFont+632
0x3438	0x00000000 ;_TFT_defaultFont+636
0x343C	0x06000000 ;_TFT_defaultFont+640
0x3440	0x00030306 ;_TFT_defaultFont+644
0x3444	0x00000000 ;_TFT_defaultFont+648
0x3448	0x00000000 ;_TFT_defaultFont+652
0x344C	0x0000001F ;_TFT_defaultFont+656
0x3450	0x00000000 ;_TFT_defaultFont+660
0x3454	0x00000000 ;_TFT_defaultFont+664
0x3458	0x00000000 ;_TFT_defaultFont+668
0x345C	0x06000000 ;_TFT_defaultFont+672
0x3460	0x00000006 ;_TFT_defaultFont+676
0x3464	0x20000000 ;_TFT_defaultFont+680
0x3468	0x08101020 ;_TFT_defaultFont+684
0x346C	0x02040408 ;_TFT_defaultFont+688
0x3470	0x00010102 ;_TFT_defaultFont+692
0x3474	0x00000000 ;_TFT_defaultFont+696
0x3478	0x6363633E ;_TFT_defaultFont+700
0x347C	0x63636363 ;_TFT_defaultFont+704
0x3480	0x0000003E ;_TFT_defaultFont+708
0x3484	0x00000000 ;_TFT_defaultFont+712
0x3488	0x18181E18 ;_TFT_defaultFont+716
0x348C	0x18181818 ;_TFT_defaultFont+720
0x3490	0x0000007E ;_TFT_defaultFont+724
0x3494	0x00000000 ;_TFT_defaultFont+728
0x3498	0x6061613E ;_TFT_defaultFont+732
0x349C	0x060C1830 ;_TFT_defaultFont+736
0x34A0	0x0000007F ;_TFT_defaultFont+740
0x34A4	0x00000000 ;_TFT_defaultFont+744
0x34A8	0x6060613E ;_TFT_defaultFont+748
0x34AC	0x6160603C ;_TFT_defaultFont+752
0x34B0	0x0000003E ;_TFT_defaultFont+756
0x34B4	0x00000000 ;_TFT_defaultFont+760
0x34B8	0x32343830 ;_TFT_defaultFont+764
0x34BC	0x30307F31 ;_TFT_defaultFont+768
0x34C0	0x00000030 ;_TFT_defaultFont+772
0x34C4	0x00000000 ;_TFT_defaultFont+776
0x34C8	0x3E06067E ;_TFT_defaultFont+780
0x34CC	0x61606060 ;_TFT_defaultFont+784
0x34D0	0x0000003E ;_TFT_defaultFont+788
0x34D4	0x00000000 ;_TFT_defaultFont+792
0x34D8	0x3F03063C ;_TFT_defaultFont+796
0x34DC	0x63636363 ;_TFT_defaultFont+800
0x34E0	0x0000003E ;_TFT_defaultFont+804
0x34E4	0x00000000 ;_TFT_defaultFont+808
0x34E8	0x3030607F ;_TFT_defaultFont+812
0x34EC	0x0C0C1818 ;_TFT_defaultFont+816
0x34F0	0x0000000C ;_TFT_defaultFont+820
0x34F4	0x00000000 ;_TFT_defaultFont+824
0x34F8	0x6363633E ;_TFT_defaultFont+828
0x34FC	0x6363633E ;_TFT_defaultFont+832
0x3500	0x0000003E ;_TFT_defaultFont+836
0x3504	0x00000000 ;_TFT_defaultFont+840
0x3508	0x6363633E ;_TFT_defaultFont+844
0x350C	0x30607E63 ;_TFT_defaultFont+848
0x3510	0x0000001E ;_TFT_defaultFont+852
0x3514	0x00000000 ;_TFT_defaultFont+856
0x3518	0x06060000 ;_TFT_defaultFont+860
0x351C	0x06000000 ;_TFT_defaultFont+864
0x3520	0x00000006 ;_TFT_defaultFont+868
0x3524	0x00000000 ;_TFT_defaultFont+872
0x3528	0x06060000 ;_TFT_defaultFont+876
0x352C	0x06000000 ;_TFT_defaultFont+880
0x3530	0x00030306 ;_TFT_defaultFont+884
0x3534	0x00000000 ;_TFT_defaultFont+888
0x3538	0x00000000 ;_TFT_defaultFont+892
0x353C	0x01800000 ;_TFT_defaultFont+896
0x3540	0x00180060 ;_TFT_defaultFont+900
0x3544	0x00060006 ;_TFT_defaultFont+904
0x3548	0x00600018 ;_TFT_defaultFont+908
0x354C	0x00000180 ;_TFT_defaultFont+912
0x3550	0x00000000 ;_TFT_defaultFont+916
0x3554	0x00000000 ;_TFT_defaultFont+920
0x3558	0x00000000 ;_TFT_defaultFont+924
0x355C	0x00000000 ;_TFT_defaultFont+928
0x3560	0x000001FE ;_TFT_defaultFont+932
0x3564	0x01FE0000 ;_TFT_defaultFont+936
0x3568	0x00000000 ;_TFT_defaultFont+940
0x356C	0x00000000 ;_TFT_defaultFont+944
0x3570	0x00000000 ;_TFT_defaultFont+948
0x3574	0x00000000 ;_TFT_defaultFont+952
0x3578	0x00000000 ;_TFT_defaultFont+956
0x357C	0x00060000 ;_TFT_defaultFont+960
0x3580	0x00600018 ;_TFT_defaultFont+964
0x3584	0x01800180 ;_TFT_defaultFont+968
0x3588	0x00180060 ;_TFT_defaultFont+972
0x358C	0x00000006 ;_TFT_defaultFont+976
0x3590	0x00000000 ;_TFT_defaultFont+980
0x3594	0x00000000 ;_TFT_defaultFont+984
0x3598	0x1830311E ;_TFT_defaultFont+988
0x359C	0x0C000C0C ;_TFT_defaultFont+992
0x35A0	0x0000000C ;_TFT_defaultFont+996
0x35A4	0x00000000 ;_TFT_defaultFont+1000
0x35A8	0x00000000 ;_TFT_defaultFont+1004
0x35AC	0x0082007C ;_TFT_defaultFont+1008
0x35B0	0x016D0179 ;_TFT_defaultFont+1012
0x35B4	0x016D016D ;_TFT_defaultFont+1016
0x35B8	0x00D9016D ;_TFT_defaultFont+1020
0x35BC	0x00FC0002 ;_TFT_defaultFont+1024
0x35C0	0x00000000 ;_TFT_defaultFont+1028
0x35C4	0x00000000 ;_TFT_defaultFont+1032
0x35C8	0x00000000 ;_TFT_defaultFont+1036
0x35CC	0x00380038 ;_TFT_defaultFont+1040
0x35D0	0x006C006C ;_TFT_defaultFont+1044
0x35D4	0x00FE00C6 ;_TFT_defaultFont+1048
0x35D8	0x018300C6 ;_TFT_defaultFont+1052
0x35DC	0x00000183 ;_TFT_defaultFont+1056
0x35E0	0x00000000 ;_TFT_defaultFont+1060
0x35E4	0x00000000 ;_TFT_defaultFont+1064
0x35E8	0x6363633F ;_TFT_defaultFont+1068
0x35EC	0x6363633F ;_TFT_defaultFont+1072
0x35F0	0x0000003F ;_TFT_defaultFont+1076
0x35F4	0x00000000 ;_TFT_defaultFont+1080
0x35F8	0x0343433E ;_TFT_defaultFont+1084
0x35FC	0x43430303 ;_TFT_defaultFont+1088
0x3600	0x0000003E ;_TFT_defaultFont+1092
0x3604	0x00000000 ;_TFT_defaultFont+1096
0x3608	0xC3C3633F ;_TFT_defaultFont+1100
0x360C	0x63C3C3C3 ;_TFT_defaultFont+1104
0x3610	0x0000003F ;_TFT_defaultFont+1108
0x3614	0x00000000 ;_TFT_defaultFont+1112
0x3618	0x0303033F ;_TFT_defaultFont+1116
0x361C	0x0303031F ;_TFT_defaultFont+1120
0x3620	0x0000003F ;_TFT_defaultFont+1124
0x3624	0x00000000 ;_TFT_defaultFont+1128
0x3628	0x0303033F ;_TFT_defaultFont+1132
0x362C	0x0303031F ;_TFT_defaultFont+1136
0x3630	0x00000003 ;_TFT_defaultFont+1140
0x3634	0x00000000 ;_TFT_defaultFont+1144
0x3638	0x0343433E ;_TFT_defaultFont+1148
0x363C	0x63636373 ;_TFT_defaultFont+1152
0x3640	0x0000007E ;_TFT_defaultFont+1156
0x3644	0x00000000 ;_TFT_defaultFont+1160
0x3648	0xC3C3C3C3 ;_TFT_defaultFont+1164
0x364C	0xC3C3C3FF ;_TFT_defaultFont+1168
0x3650	0x000000C3 ;_TFT_defaultFont+1172
0x3654	0x00000000 ;_TFT_defaultFont+1176
0x3658	0x0606060F ;_TFT_defaultFont+1180
0x365C	0x06060606 ;_TFT_defaultFont+1184
0x3660	0x0000000F ;_TFT_defaultFont+1188
0x3664	0x00000000 ;_TFT_defaultFont+1192
0x3668	0x1818181E ;_TFT_defaultFont+1196
0x366C	0x18181818 ;_TFT_defaultFont+1200
0x3670	0x0000000F ;_TFT_defaultFont+1204
0x3674	0x00000000 ;_TFT_defaultFont+1208
0x3678	0x0F1B3363 ;_TFT_defaultFont+1212
0x367C	0x331B0F07 ;_TFT_defaultFont+1216
0x3680	0x00000063 ;_TFT_defaultFont+1220
0x3684	0x00000000 ;_TFT_defaultFont+1224
0x3688	0x03030303 ;_TFT_defaultFont+1228
0x368C	0x03030303 ;_TFT_defaultFont+1232
0x3690	0x0000003F ;_TFT_defaultFont+1236
0x3694	0x00000000 ;_TFT_defaultFont+1240
0x3698	0x00000000 ;_TFT_defaultFont+1244
0x369C	0x03870387 ;_TFT_defaultFont+1248
0x36A0	0x034D034D ;_TFT_defaultFont+1252
0x36A4	0x03390339 ;_TFT_defaultFont+1256
0x36A8	0x03110311 ;_TFT_defaultFont+1260
0x36AC	0x00000301 ;_TFT_defaultFont+1264
0x36B0	0x00000000 ;_TFT_defaultFont+1268
0x36B4	0x00000000 ;_TFT_defaultFont+1272
0x36B8	0x4D4D4747 ;_TFT_defaultFont+1276
0x36BC	0x71715959 ;_TFT_defaultFont+1280
0x36C0	0x00000061 ;_TFT_defaultFont+1284
0x36C4	0x00000000 ;_TFT_defaultFont+1288
0x36C8	0xC3C3C37E ;_TFT_defaultFont+1292
0x36CC	0xC3C3C3C3 ;_TFT_defaultFont+1296
0x36D0	0x0000007E ;_TFT_defaultFont+1300
0x36D4	0x00000000 ;_TFT_defaultFont+1304
0x36D8	0x6363633F ;_TFT_defaultFont+1308
0x36DC	0x03033F63 ;_TFT_defaultFont+1312
0x36E0	0x00000003 ;_TFT_defaultFont+1316
0x36E4	0x00000000 ;_TFT_defaultFont+1320
0x36E8	0xC3C3C37E ;_TFT_defaultFont+1324
0x36EC	0xC3C3C3C3 ;_TFT_defaultFont+1328
0x36F0	0x00C0607E ;_TFT_defaultFont+1332
0x36F4	0x00000000 ;_TFT_defaultFont+1336
0x36F8	0x6363633F ;_TFT_defaultFont+1340
0x36FC	0x63331B3F ;_TFT_defaultFont+1344
0x3700	0x000000C3 ;_TFT_defaultFont+1348
0x3704	0x00000000 ;_TFT_defaultFont+1352
0x3708	0x0343433E ;_TFT_defaultFont+1356
0x370C	0x6161603E ;_TFT_defaultFont+1360
0x3710	0x0000003E ;_TFT_defaultFont+1364
0x3714	0x00000000 ;_TFT_defaultFont+1368
0x3718	0x0C0C0C3F ;_TFT_defaultFont+1372
0x371C	0x0C0C0C0C ;_TFT_defaultFont+1376
0x3720	0x0000000C ;_TFT_defaultFont+1380
0x3724	0x00000000 ;_TFT_defaultFont+1384
0x3728	0x63636363 ;_TFT_defaultFont+1388
0x372C	0x63636363 ;_TFT_defaultFont+1392
0x3730	0x0000003E ;_TFT_defaultFont+1396
0x3734	0x00000000 ;_TFT_defaultFont+1400
0x3738	0x66C3C3C3 ;_TFT_defaultFont+1404
0x373C	0x183C3C66 ;_TFT_defaultFont+1408
0x3740	0x00000018 ;_TFT_defaultFont+1412
0x3744	0x00000000 ;_TFT_defaultFont+1416
0x3748	0x00000000 ;_TFT_defaultFont+1420
0x374C	0x0C630C63 ;_TFT_defaultFont+1424
0x3750	0x0CF30C63 ;_TFT_defaultFont+1428
0x3754	0x079E06F6 ;_TFT_defaultFont+1432
0x3758	0x030C079E ;_TFT_defaultFont+1436
0x375C	0x0000030C ;_TFT_defaultFont+1440
0x3760	0x00000000 ;_TFT_defaultFont+1444
0x3764	0x00000000 ;_TFT_defaultFont+1448
0x3768	0x3C66C3C3 ;_TFT_defaultFont+1452
0x376C	0xC3663C18 ;_TFT_defaultFont+1456
0x3770	0x000000C3 ;_TFT_defaultFont+1460
0x3774	0x00000000 ;_TFT_defaultFont+1464
0x3778	0x6666C3C3 ;_TFT_defaultFont+1468
0x377C	0x1818183C ;_TFT_defaultFont+1472
0x3780	0x00000018 ;_TFT_defaultFont+1476
0x3784	0x00000000 ;_TFT_defaultFont+1480
0x3788	0x1830303F ;_TFT_defaultFont+1484
0x378C	0x0303060C ;_TFT_defaultFont+1488
0x3790	0x0000003F ;_TFT_defaultFont+1492
0x3794	0x1E000000 ;_TFT_defaultFont+1496
0x3798	0x06060606 ;_TFT_defaultFont+1500
0x379C	0x06060606 ;_TFT_defaultFont+1504
0x37A0	0x001E0606 ;_TFT_defaultFont+1508
0x37A4	0x01000000 ;_TFT_defaultFont+1512
0x37A8	0x04020201 ;_TFT_defaultFont+1516
0x37AC	0x10080804 ;_TFT_defaultFont+1520
0x37B0	0x00202010 ;_TFT_defaultFont+1524
0x37B4	0x1E000000 ;_TFT_defaultFont+1528
0x37B8	0x18181818 ;_TFT_defaultFont+1532
0x37BC	0x18181818 ;_TFT_defaultFont+1536
0x37C0	0x001E1818 ;_TFT_defaultFont+1540
0x37C4	0x00000000 ;_TFT_defaultFont+1544
0x37C8	0x00000000 ;_TFT_defaultFont+1548
0x37CC	0x00480030 ;_TFT_defaultFont+1552
0x37D0	0x01020084 ;_TFT_defaultFont+1556
0x37D4	0x00000000 ;_TFT_defaultFont+1560
0x37D8	0x00000000 ;_TFT_defaultFont+1564
0x37DC	0x00000000 ;_TFT_defaultFont+1568
0x37E0	0x00000000 ;_TFT_defaultFont+1572
0x37E4	0x00000000 ;_TFT_defaultFont+1576
0x37E8	0x00000000 ;_TFT_defaultFont+1580
0x37EC	0x00000000 ;_TFT_defaultFont+1584
0x37F0	0x00FF0000 ;_TFT_defaultFont+1588
0x37F4	0x0C000000 ;_TFT_defaultFont+1592
0x37F8	0x00000018 ;_TFT_defaultFont+1596
0x37FC	0x00000000 ;_TFT_defaultFont+1600
0x3800	0x00000000 ;_TFT_defaultFont+1604
0x3804	0x00000000 ;_TFT_defaultFont+1608
0x3808	0x623C0000 ;_TFT_defaultFont+1612
0x380C	0x63637E60 ;_TFT_defaultFont+1616
0x3810	0x0000007E ;_TFT_defaultFont+1620
0x3814	0x03000000 ;_TFT_defaultFont+1624
0x3818	0x673B0303 ;_TFT_defaultFont+1628
0x381C	0x63636363 ;_TFT_defaultFont+1632
0x3820	0x0000003F ;_TFT_defaultFont+1636
0x3824	0x00000000 ;_TFT_defaultFont+1640
0x3828	0x231E0000 ;_TFT_defaultFont+1644
0x382C	0x23030303 ;_TFT_defaultFont+1648
0x3830	0x0000001E ;_TFT_defaultFont+1652
0x3834	0x60000000 ;_TFT_defaultFont+1656
0x3838	0x637E6060 ;_TFT_defaultFont+1660
0x383C	0x73636363 ;_TFT_defaultFont+1664
0x3840	0x0000006E ;_TFT_defaultFont+1668
0x3844	0x00000000 ;_TFT_defaultFont+1672
0x3848	0x633E0000 ;_TFT_defaultFont+1676
0x384C	0x43037F63 ;_TFT_defaultFont+1680
0x3850	0x0000003E ;_TFT_defaultFont+1684
0x3854	0x1C000000 ;_TFT_defaultFont+1688
0x3858	0x060F0606 ;_TFT_defaultFont+1692
0x385C	0x06060606 ;_TFT_defaultFont+1696
0x3860	0x00000006 ;_TFT_defaultFont+1700
0x3864	0x00000000 ;_TFT_defaultFont+1704
0x3868	0x637E0000 ;_TFT_defaultFont+1708
0x386C	0x73636363 ;_TFT_defaultFont+1712
0x3870	0x3E61606E ;_TFT_defaultFont+1716
0x3874	0x03000000 ;_TFT_defaultFont+1720
0x3878	0x673B0303 ;_TFT_defaultFont+1724
0x387C	0x63636363 ;_TFT_defaultFont+1728
0x3880	0x00000063 ;_TFT_defaultFont+1732
0x3884	0x03000000 ;_TFT_defaultFont+1736
0x3888	0x03030003 ;_TFT_defaultFont+1740
0x388C	0x03030303 ;_TFT_defaultFont+1744
0x3890	0x00000003 ;_TFT_defaultFont+1748
0x3894	0x06000000 ;_TFT_defaultFont+1752
0x3898	0x06070006 ;_TFT_defaultFont+1756
0x389C	0x06060606 ;_TFT_defaultFont+1760
0x38A0	0x03060606 ;_TFT_defaultFont+1764
0x38A4	0x03000000 ;_TFT_defaultFont+1768
0x38A8	0x1B330303 ;_TFT_defaultFont+1772
0x38AC	0x1B0F070F ;_TFT_defaultFont+1776
0x38B0	0x00000033 ;_TFT_defaultFont+1780
0x38B4	0x03000000 ;_TFT_defaultFont+1784
0x38B8	0x03030303 ;_TFT_defaultFont+1788
0x38BC	0x03030303 ;_TFT_defaultFont+1792
0x38C0	0x00000003 ;_TFT_defaultFont+1796
0x38C4	0x00000000 ;_TFT_defaultFont+1800
0x38C8	0x00000000 ;_TFT_defaultFont+1804
0x38CC	0x00000000 ;_TFT_defaultFont+1808
0x38D0	0x033301DF ;_TFT_defaultFont+1812
0x38D4	0x03330333 ;_TFT_defaultFont+1816
0x38D8	0x03330333 ;_TFT_defaultFont+1820
0x38DC	0x00000333 ;_TFT_defaultFont+1824
0x38E0	0x00000000 ;_TFT_defaultFont+1828
0x38E4	0x00000000 ;_TFT_defaultFont+1832
0x38E8	0x673B0000 ;_TFT_defaultFont+1836
0x38EC	0x63636363 ;_TFT_defaultFont+1840
0x38F0	0x00000063 ;_TFT_defaultFont+1844
0x38F4	0x00000000 ;_TFT_defaultFont+1848
0x38F8	0x633E0000 ;_TFT_defaultFont+1852
0x38FC	0x63636363 ;_TFT_defaultFont+1856
0x3900	0x0000003E ;_TFT_defaultFont+1860
0x3904	0x00000000 ;_TFT_defaultFont+1864
0x3908	0x673B0000 ;_TFT_defaultFont+1868
0x390C	0x63636363 ;_TFT_defaultFont+1872
0x3910	0x0303033F ;_TFT_defaultFont+1876
0x3914	0x00000000 ;_TFT_defaultFont+1880
0x3918	0x637E0000 ;_TFT_defaultFont+1884
0x391C	0x73636363 ;_TFT_defaultFont+1888
0x3920	0x6060606E ;_TFT_defaultFont+1892
0x3924	0x00000000 ;_TFT_defaultFont+1896
0x3928	0x1F1B0000 ;_TFT_defaultFont+1900
0x392C	0x03030303 ;_TFT_defaultFont+1904
0x3930	0x00000003 ;_TFT_defaultFont+1908
0x3934	0x00000000 ;_TFT_defaultFont+1912
0x3938	0x231E0000 ;_TFT_defaultFont+1916
0x393C	0x31381E07 ;_TFT_defaultFont+1920
0x3940	0x0000001E ;_TFT_defaultFont+1924
0x3944	0x00000000 ;_TFT_defaultFont+1928
0x3948	0x061F0606 ;_TFT_defaultFont+1932
0x394C	0x06060606 ;_TFT_defaultFont+1936
0x3950	0x0000001C ;_TFT_defaultFont+1940
0x3954	0x00000000 ;_TFT_defaultFont+1944
0x3958	0x63630000 ;_TFT_defaultFont+1948
0x395C	0x73636363 ;_TFT_defaultFont+1952
0x3960	0x0000006E ;_TFT_defaultFont+1956
0x3964	0x00000000 ;_TFT_defaultFont+1960
0x3968	0x63630000 ;_TFT_defaultFont+1964
0x396C	0x1C363663 ;_TFT_defaultFont+1968
0x3970	0x0000001C ;_TFT_defaultFont+1972
0x3974	0x00000000 ;_TFT_defaultFont+1976
0x3978	0x00000000 ;_TFT_defaultFont+1980
0x397C	0x00000000 ;_TFT_defaultFont+1984
0x3980	0x03330333 ;_TFT_defaultFont+1988
0x3984	0x01B601B6 ;_TFT_defaultFont+1992
0x3988	0x00CC01CE ;_TFT_defaultFont+1996
0x398C	0x000000CC ;_TFT_defaultFont+2000
0x3990	0x00000000 ;_TFT_defaultFont+2004
0x3994	0x00000000 ;_TFT_defaultFont+2008
0x3998	0x33330000 ;_TFT_defaultFont+2012
0x399C	0x331E0C1E ;_TFT_defaultFont+2016
0x39A0	0x00000033 ;_TFT_defaultFont+2020
0x39A4	0x00000000 ;_TFT_defaultFont+2024
0x39A8	0x63630000 ;_TFT_defaultFont+2028
0x39AC	0x1C363663 ;_TFT_defaultFont+2032
0x39B0	0x0C0C181C ;_TFT_defaultFont+2036
0x39B4	0x00000000 ;_TFT_defaultFont+2040
0x39B8	0x303F0000 ;_TFT_defaultFont+2044
0x39BC	0x03060C18 ;_TFT_defaultFont+2048
0x39C0	0x0000003F ;_TFT_defaultFont+2052
0x39C4	0x38000000 ;_TFT_defaultFont+2056
0x39C8	0x0C0C0C0C ;_TFT_defaultFont+2060
0x39CC	0x0C0C0C07 ;_TFT_defaultFont+2064
0x39D0	0x00380C0C ;_TFT_defaultFont+2068
0x39D4	0x0C000000 ;_TFT_defaultFont+2072
0x39D8	0x0C0C0C0C ;_TFT_defaultFont+2076
0x39DC	0x0C0C0C0C ;_TFT_defaultFont+2080
0x39E0	0x000C0C0C ;_TFT_defaultFont+2084
0x39E4	0x07000000 ;_TFT_defaultFont+2088
0x39E8	0x0C0C0C0C ;_TFT_defaultFont+2092
0x39EC	0x0C0C0C38 ;_TFT_defaultFont+2096
0x39F0	0x00070C0C ;_TFT_defaultFont+2100
0x39F4	0x00000000 ;_TFT_defaultFont+2104
0x39F8	0x00000000 ;_TFT_defaultFont+2108
0x39FC	0x00000000 ;_TFT_defaultFont+2112
0x3A00	0x021E0000 ;_TFT_defaultFont+2116
0x3A04	0x03F1023F ;_TFT_defaultFont+2120
0x3A08	0x000001E1 ;_TFT_defaultFont+2124
0x3A0C	0x00000000 ;_TFT_defaultFont+2128
0x3A10	0x00000000 ;_TFT_defaultFont+2132
0x3A14	0x00000000 ;_TFT_defaultFont+2136
0x3A18	0x07FE0000 ;_TFT_defaultFont+2140
0x3A1C	0x04020402 ;_TFT_defaultFont+2144
0x3A20	0x04020402 ;_TFT_defaultFont+2148
0x3A24	0x04020402 ;_TFT_defaultFont+2152
0x3A28	0x04020402 ;_TFT_defaultFont+2156
0x3A2C	0x000007FE ;_TFT_defaultFont+2160
0x3A30	0x00000000 ;_TFT_defaultFont+2164
; end of _TFT_defaultFont
;__Lib_GPIO_32F10x_Defs.c,675 :: __GPIO_MODULE_SPI3_PC10_11_12 [108]
0x3A34	0x0000002A ;__GPIO_MODULE_SPI3_PC10_11_12+0
0x3A38	0x0000002B ;__GPIO_MODULE_SPI3_PC10_11_12+4
0x3A3C	0x0000002C ;__GPIO_MODULE_SPI3_PC10_11_12+8
0x3A40	0xFFFFFFFF ;__GPIO_MODULE_SPI3_PC10_11_12+12
0x3A44	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+16
0x3A48	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+20
0x3A4C	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+24
0x3A50	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+28
0x3A54	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+32
0x3A58	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+36
0x3A5C	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+40
0x3A60	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+44
0x3A64	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+48
0x3A68	0x00000818 ;__GPIO_MODULE_SPI3_PC10_11_12+52
0x3A6C	0x00000818 ;__GPIO_MODULE_SPI3_PC10_11_12+56
0x3A70	0x00000818 ;__GPIO_MODULE_SPI3_PC10_11_12+60
0x3A74	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+64
0x3A78	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+68
0x3A7C	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+72
0x3A80	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+76
0x3A84	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+80
0x3A88	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+84
0x3A8C	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+88
0x3A90	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+92
0x3A94	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+96
0x3A98	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+100
0x3A9C	0x08201100 ;__GPIO_MODULE_SPI3_PC10_11_12+104
; end of __GPIO_MODULE_SPI3_PC10_11_12
;,0 :: _initBlock_3 [2]
; Containing: ?ICS_deviceIdByte [1]
;             ?ICS__Lib_TFT_FontInitialized [1]
0x3AA0	0x0000 ;_initBlock_3+0 : ?ICS_deviceIdByte at 0x3AA0 : ?ICS__Lib_TFT_FontInitialized at 0x3AA1
; end of _initBlock_3
;Reciver.c,0 :: ?ICS_life_notifyer_counter [2]
0x3AA2	0x0000 ;?ICS_life_notifyer_counter+0
; end of ?ICS_life_notifyer_counter
;Reciver.c,0 :: ?ICS_adc_result [2]
0x3AA4	0x0000 ;?ICS_adc_result+0
; end of ?ICS_adc_result
;,0 :: _initBlock_6 [22]
; Containing: ?ICS?lstr1_Reciver [11]
;             ?ICS?lstr2_Reciver [11]
0x3AA6	0x52414F42 ;_initBlock_6+0 : ?ICS?lstr1_Reciver at 0x3AA6
0x3AAA	0x44492044 ;_initBlock_6+4
0x3AAE	0x42003A20 ;_initBlock_6+8 : ?ICS?lstr2_Reciver at 0x3AB1
0x3AB2	0x6F747475 ;_initBlock_6+12
0x3AB6	0x2031206E ;_initBlock_6+16
0x3ABA	0x003A ;_initBlock_6+20
; end of _initBlock_6
;,0 :: _initBlock_7 [22]
; Containing: ?ICS?lstr3_Reciver [11]
;             ?ICS?lstr4_Reciver [11]
0x3ABC	0x74747542 ;_initBlock_7+0 : ?ICS?lstr3_Reciver at 0x3ABC
0x3AC0	0x32206E6F ;_initBlock_7+4
0x3AC4	0x41003A20 ;_initBlock_7+8 : ?ICS?lstr4_Reciver at 0x3AC7
0x3AC8	0x4F4C414E ;_initBlock_7+12
0x3ACC	0x20312047 ;_initBlock_7+16
0x3AD0	0x003A ;_initBlock_7+20
; end of _initBlock_7
;__Lib_TFT.c,0 :: ?ICS__Lib_TFT_Ptr_Set [2]
0x3AD2	0x0000 ;?ICS__Lib_TFT_Ptr_Set+0
; end of ?ICS__Lib_TFT_Ptr_Set
;,0 :: _initBlock_9 [2]
; Containing: ?ICS__Lib_TFT___SSD1963_controller [1]
;             ?ICS__Lib_TFT_Defs_TFT_Disp_Rotation [1]
0x3AD4	0x0000 ;_initBlock_9+0 : ?ICS__Lib_TFT___SSD1963_controller at 0x3AD4 : ?ICS__Lib_TFT_Defs_TFT_Disp_Rotation at 0x3AD5
; end of _initBlock_9
;__Lib_TFT_Defs.c,0 :: ?ICS__Lib_TFT_Defs_TFT_Rotated_180 [1]
0x3AD6	0x00 ;?ICS__Lib_TFT_Defs_TFT_Rotated_180+0
; end of ?ICS__Lib_TFT_Defs_TFT_Rotated_180
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0150      [24]    _Delay_1us
0x0168      [24]    __Lib_TFT_Defs_Write_to_Port
0x0180      [84]    _TFT_SSD1963YT_8bit_Write_Command
0x01D4      [84]    _TFT_SSD1963_8bit_Set_Index
0x0228      [52]    _TFT_Set_Index
0x025C      [52]    _TFT_Write_Command
0x0290      [34]    __Lib_SPI_123_SPIx_Read
0x02B4      [28]    _SPI3_Read
0x02D0      [64]    _TFT_Set_Reg
0x0310     [196]    __Lib_TFT_Defs_TFT_Set_Pin_Directions
0x03D8      [24]    _Delay_100ms
0x03F0      [24]    _Delay_5ms
0x0408      [12]    _Is_TFT_Rotated_180
0x0418      [24]    _Delay_10ms
0x0430      [88]    _write_ZIGBEE_long
0x0488      [28]    _enable_PLL
0x04A4      [36]    _set_not_ACK
0x04C8     [152]    __Lib_GPIO_32F10x_GPIO_Configure_Pin
0x0560     [108]    _TFT_Set_Font
0x05CC      [36]    _set_not_encrypt
0x05F0      [80]    _WordToStr
0x0640      [36]    _start_transmit
0x0664     [140]    _GPIO_Clk_Enable
0x06F0     [100]    __Lib_TFT__TFT_getHeader
0x0754     [136]    _TFT_Dot
0x07DC      [64]    _write_ZIGBEE_short
0x081C      [64]    _read_ZIGBEE_short
0x085C     [112]    _init_ZIGBEE_basic
0x08CC     [110]    _IntToStr
0x093C      [16]    __Lib_TFT_Is_SSD1963_Set
0x094C      [44]    _TFT_16bit_Write_Data
0x0978      [96]    _TFT_Write_Data
0x09D8      [96]    _TFT_SSD1963_8bit_Write_Data
0x0A38     [976]    __Lib_TFT_Defs_TFT_Reset_ILI9341
0x0E08      [44]    _parse_adc_values
0x0E34     [788]    __Lib_TFT__TFT_Write_Char_E
0x1148      [26]    _enable_interrupt
0x1164     [512]    __Lib_TFT__TFT_Write_Char
0x1364     [332]    _write_TX_normal_FIFO
0x14B0     [356]    _set_channel
0x1614     [190]    _set_CCA_mode
0x16D4      [78]    _ByteToStr
0x1724      [88]    _read_ZIGBEE_long
0x177C      [62]    _set_RSSI_mode
0x17BC     [212]    _TFT_Set_Address_HX8352A
0x1890     [104]    _TFT_Set_Address_SST7715R
0x18F8     [500]    _GPIO_Config
0x1AEC      [16]    _Is_TFT_Set
0x1AFC      [66]    __Lib_SPI_123_SPIx_Init_Advanced
0x1B40     [628]    __Lib_TFT_Defs_TFT_Reset_Device
0x1DB4      [48]    __Lib_TFT_Defs_TFT_Set_DataPort_Direction
0x1DE4     [272]    _GPIO_Alternate_Function_Enable
0x1EF4     [120]    _TFT_Set_Address
0x1F6C     [328]    _TFT_Set_Address_SSD1963II
0x20B4     [104]    _TFT_Set_Address_ILI9340
0x211C      [24]    _TFT_Move_Cursor
0x2134      [64]    _TFT_Set_Brush
0x2174      [28]    _SPI3_Write
0x2190      [28]    _SPI2_Write
0x21AC      [28]    _SPI1_Write
0x21C8     [104]    _TFT_Set_Address_ILI9481
0x2230     [104]    _TFT_Set_Address_R61526
0x2298      [24]    _TFT_Set_Pen
0x22B0     [104]    _TFT_Set_Address_ILI9342
0x2318     [192]    _TFT_Init
0x23D8      [80]    _brodcast_id_request
0x2428     [136]    _clearScreen
0x24B0      [28]    _GPIO_Digital_Output
0x24CC     [140]    _display_on_screen
0x2558      [88]    _processRecivedData
0x25B0      [24]    _GPIO_Digital_Input
0x25C8      [84]    _SPI3_Init_Advanced
0x261C     [224]    _read_RX_FIFO
0x26FC      [44]    _Debounce_INT
0x2728     [136]    _TFT_Write_Text
0x27B0      [44]    _set_short_address
0x27DC      [62]    _set_long_address
0x281C      [50]    _init_ZIGBEE_nonbeacon
0x2850      [44]    _set_PAN_ID
0x287C      [26]    _software_reset
0x2898      [64]    _pin_reset
0x28D8      [68]    _set_wake_from_pin
0x2920      [82]    _RF_reset
0x2974     [144]    _TFT_Fill_Screen
0x2A04     [106]    _set_reception_mode
0x2A70      [36]    _pin_wake
0x2A94     [192]    _TFT_Init_ILI9341_8bit
0x2B54     [138]    _set_frame_format_filter
0x2BE0      [58]    _set_TX_power
0x2C1C      [70]    _nonbeacon_PAN_coordinator_device
0x2C64     [108]    __Lib_System_105_107_SystemClockSetDefault
0x2CD0      [58]    ___FillZeros
0x2D0C      [20]    ___CC2DW
0x2D20      [84]    _beeReciveData
0x2D78     [100]    _listen_for_id
0x2DDC      [88]    _draw_frame
0x2E38     [396]    _Initialize
0x2FC4      [20]    __Lib_System_105_107_InitialSetUpFosc
0x2FD8       [8]    ___GenExcept
0x2FE0     [152]    _main
0x3078     [324]    __Lib_System_105_107_InitialSetUpRCCRCC2
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000       [1]    _deviceIdByte
0x20000001       [1]    __Lib_TFT_FontInitialized
0x20000002       [2]    _life_notifyer_counter
0x20000004       [2]    _adc_result
0x20000006      [11]    ?lstr1_Reciver
0x20000011      [11]    ?lstr2_Reciver
0x2000001C      [11]    ?lstr3_Reciver
0x20000027      [11]    ?lstr4_Reciver
0x20000032       [2]    __Lib_TFT_Ptr_Set
0x20000034       [1]    __Lib_TFT___SSD1963_controller
0x20000035       [1]    __Lib_TFT_Defs_TFT_Disp_Rotation
0x20000036       [1]    __Lib_TFT_Defs_TFT_Rotated_180
0x20000037       [1]    _LQI
0x20000038       [2]    __Lib_TFT_Defs___controller
0x2000003A       [1]    _RSSI2
0x2000003B       [1]    _SEQ_NUMBER
0x2000003C       [1]    _lost_data
0x2000003D       [1]    _button1
0x2000003E       [2]    _address_RX_FIFO
0x20000040       [2]    _address_TX_normal_FIFO
0x20000042       [2]    _ADDRESS_short_1
0x20000044       [2]    _ADDRESS_short_2
0x20000046       [2]    _PAN_ID_1
0x20000048       [2]    _PAN_ID_2
0x2000004A       [8]    _ADDRESS_long_1
0x20000052       [8]    _ADDRESS_long_2
0x2000005A       [3]    _DATA_TX
0x2000005D      [19]    _data_RX_FIFO
0x20000070       [3]    _DATA_RX
0x20000073      [16]    _data_TX_normal_FIFO
0x20000083       [4]    _txt
0x20000087       [1]    _button2
0x20000088       [1]    _adc_h
0x20000089       [1]    _adc_l
0x2000008A       [1]    _temp1
0x2000008B       [1]    _ExternalFontSet
0x2000008C       [4]    _SPI_Rd_Ptr
0x20000090       [4]    _SPI_Wr_Ptr
0x20000094       [4]    ___System_CLOCK_IN_KHZ
0x20000098       [2]    _TFT_DISP_WIDTH
0x2000009A       [2]    _TFT_DISP_HEIGHT
0x2000009C       [2]    __Lib_TFT__fontFirstChar
0x2000009E       [2]    __Lib_TFT__fontLastChar
0x200000A0       [4]    __Lib_TFT__font
0x200000A4       [1]    __Lib_TFT_FontOrientation
0x200000A5       [1]    __Lib_TFT_PenWidth
0x200000A6       [2]    __Lib_TFT_y_cord
0x200000A8       [2]    __Lib_TFT__fontHeight
0x200000AA       [2]    __Lib_TFT_x_cord
0x200000AC       [2]    __Lib_TFT_FontColor
0x200000AE       [2]    __Lib_TFT_PenColor
0x200000B0       [4]    _TFT_SSD1963_Set_Address_Ptr
0x200000B4       [4]    _TFT_Set_Address_Ptr
0x200000B8       [4]    _TFT_Write_Data_Ptr
0x200000BC       [4]    __Lib_TFT_activeExtFont
0x200000C0      [10]    __Lib_TFT_headerBuffer
0x200000CA       [1]    __Lib_TFT_BrushEnabled
0x200000CB       [1]    __Lib_TFT_GradientEnabled
0x200000CC       [4]    _TFT_Get_Ext_Data_Ptr
0x200000D0       [2]    __Lib_TFT_BrushColor
0x200000D2       [1]    __Lib_TFT_GradientOrientation
0x200000D4       [2]    __Lib_TFT_GradColorFrom
0x200000D6       [2]    __Lib_TFT_GradColorTo
0x200000D8       [4]    _TFT_Set_Index_Ptr
0x200000DC       [4]    _TFT_Write_Command_Ptr
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x02B2       [2]    ?ICS__Lib_TFT_Defs___controller
0x31BC    [2168]    _TFT_defaultFont
0x3A34     [108]    __GPIO_MODULE_SPI3_PC10_11_12
0x3AA0       [1]    ?ICS_deviceIdByte
0x3AA1       [1]    ?ICS__Lib_TFT_FontInitialized
0x3AA2       [2]    ?ICS_life_notifyer_counter
0x3AA4       [2]    ?ICS_adc_result
0x3AA6      [11]    ?ICS?lstr1_Reciver
0x3AB1      [11]    ?ICS?lstr2_Reciver
0x3ABC      [11]    ?ICS?lstr3_Reciver
0x3AC7      [11]    ?ICS?lstr4_Reciver
0x3AD2       [2]    ?ICS__Lib_TFT_Ptr_Set
0x3AD4       [1]    ?ICS__Lib_TFT___SSD1963_controller
0x3AD5       [1]    ?ICS__Lib_TFT_Defs_TFT_Disp_Rotation
0x3AD6       [1]    ?ICS__Lib_TFT_Defs_TFT_Rotated_180
